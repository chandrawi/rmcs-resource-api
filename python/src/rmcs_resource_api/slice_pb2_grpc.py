# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from rmcs_resource_api import slice_pb2 as rmcs__resource__api_dot_slice__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rmcs_resource_api/slice_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SliceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadSlice = channel.unary_unary(
                '/slice.SliceService/ReadSlice',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceReadResponse.FromString,
                _registered_method=True)
        self.ListSliceByTime = channel.unary_unary(
                '/slice.SliceService/ListSliceByTime',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceTime.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
                _registered_method=True)
        self.ListSliceByRangeTime = channel.unary_unary(
                '/slice.SliceService/ListSliceByRangeTime',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceRange.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
                _registered_method=True)
        self.ListSliceByNameTime = channel.unary_unary(
                '/slice.SliceService/ListSliceByNameTime',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceNameTime.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
                _registered_method=True)
        self.ListSliceByNameRangeTime = channel.unary_unary(
                '/slice.SliceService/ListSliceByNameRangeTime',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceNameRange.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
                _registered_method=True)
        self.ListSliceOption = channel.unary_unary(
                '/slice.SliceService/ListSliceOption',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceOption.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
                _registered_method=True)
        self.CreateSlice = channel.unary_unary(
                '/slice.SliceService/CreateSlice',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceSchema.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceCreateResponse.FromString,
                _registered_method=True)
        self.UpdateSlice = channel.unary_unary(
                '/slice.SliceService/UpdateSlice',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceUpdate.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
                _registered_method=True)
        self.DeleteSlice = channel.unary_unary(
                '/slice.SliceService/DeleteSlice',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
                _registered_method=True)
        self.ReadSliceSet = channel.unary_unary(
                '/slice.SliceService/ReadSliceSet',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetReadResponse.FromString,
                _registered_method=True)
        self.ListSliceSetByTime = channel.unary_unary(
                '/slice.SliceService/ListSliceSetByTime',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetTime.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
                _registered_method=True)
        self.ListSliceSetByRangeTime = channel.unary_unary(
                '/slice.SliceService/ListSliceSetByRangeTime',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetRange.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
                _registered_method=True)
        self.ListSliceSetByNameTime = channel.unary_unary(
                '/slice.SliceService/ListSliceSetByNameTime',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceNameTime.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
                _registered_method=True)
        self.ListSliceSetByNameRangeTime = channel.unary_unary(
                '/slice.SliceService/ListSliceSetByNameRangeTime',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceNameRange.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
                _registered_method=True)
        self.ListSliceSetOption = channel.unary_unary(
                '/slice.SliceService/ListSliceSetOption',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetOption.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
                _registered_method=True)
        self.CreateSliceSet = channel.unary_unary(
                '/slice.SliceService/CreateSliceSet',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetSchema.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceCreateResponse.FromString,
                _registered_method=True)
        self.UpdateSliceSet = channel.unary_unary(
                '/slice.SliceService/UpdateSliceSet',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceUpdate.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
                _registered_method=True)
        self.DeleteSliceSet = channel.unary_unary(
                '/slice.SliceService/DeleteSliceSet',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
                _registered_method=True)


class SliceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceByTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceByRangeTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceByNameTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceByNameRangeTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceOption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadSliceSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceSetByTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceSetByRangeTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceSetByNameTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceSetByNameRangeTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceSetOption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSliceSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSliceSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSliceSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SliceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadSlice,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceId.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceReadResponse.SerializeToString,
            ),
            'ListSliceByTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceByTime,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceTime.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.SerializeToString,
            ),
            'ListSliceByRangeTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceByRangeTime,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceRange.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.SerializeToString,
            ),
            'ListSliceByNameTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceByNameTime,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceNameTime.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.SerializeToString,
            ),
            'ListSliceByNameRangeTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceByNameRangeTime,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceNameRange.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.SerializeToString,
            ),
            'ListSliceOption': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceOption,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceOption.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.SerializeToString,
            ),
            'CreateSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSlice,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSchema.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceCreateResponse.SerializeToString,
            ),
            'UpdateSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSlice,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceUpdate.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.SerializeToString,
            ),
            'DeleteSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSlice,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceId.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.SerializeToString,
            ),
            'ReadSliceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadSliceSet,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceId.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetReadResponse.SerializeToString,
            ),
            'ListSliceSetByTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceSetByTime,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetTime.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.SerializeToString,
            ),
            'ListSliceSetByRangeTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceSetByRangeTime,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetRange.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.SerializeToString,
            ),
            'ListSliceSetByNameTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceSetByNameTime,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceNameTime.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.SerializeToString,
            ),
            'ListSliceSetByNameRangeTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceSetByNameRangeTime,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceNameRange.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.SerializeToString,
            ),
            'ListSliceSetOption': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceSetOption,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetOption.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.SerializeToString,
            ),
            'CreateSliceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSliceSet,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSetSchema.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceCreateResponse.SerializeToString,
            ),
            'UpdateSliceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSliceSet,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceUpdate.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.SerializeToString,
            ),
            'DeleteSliceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSliceSet,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceId.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'slice.SliceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('slice.SliceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SliceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ReadSlice',
            rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceByTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceByTime',
            rmcs__resource__api_dot_slice__pb2.SliceTime.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceByRangeTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceByRangeTime',
            rmcs__resource__api_dot_slice__pb2.SliceRange.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceByNameTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceByNameTime',
            rmcs__resource__api_dot_slice__pb2.SliceNameTime.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceByNameRangeTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceByNameRangeTime',
            rmcs__resource__api_dot_slice__pb2.SliceNameRange.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceOption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceOption',
            rmcs__resource__api_dot_slice__pb2.SliceOption.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/CreateSlice',
            rmcs__resource__api_dot_slice__pb2.SliceSchema.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/UpdateSlice',
            rmcs__resource__api_dot_slice__pb2.SliceUpdate.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/DeleteSlice',
            rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadSliceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ReadSliceSet',
            rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceSetReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceSetByTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceSetByTime',
            rmcs__resource__api_dot_slice__pb2.SliceSetTime.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceSetByRangeTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceSetByRangeTime',
            rmcs__resource__api_dot_slice__pb2.SliceSetRange.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceSetByNameTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceSetByNameTime',
            rmcs__resource__api_dot_slice__pb2.SliceNameTime.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceSetByNameRangeTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceSetByNameRangeTime',
            rmcs__resource__api_dot_slice__pb2.SliceNameRange.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceSetOption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceSetOption',
            rmcs__resource__api_dot_slice__pb2.SliceSetOption.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceSetListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSliceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/CreateSliceSet',
            rmcs__resource__api_dot_slice__pb2.SliceSetSchema.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSliceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/UpdateSliceSet',
            rmcs__resource__api_dot_slice__pb2.SliceUpdate.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSliceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/DeleteSliceSet',
            rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
