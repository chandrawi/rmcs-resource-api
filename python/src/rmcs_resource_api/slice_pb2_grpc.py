# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from rmcs_resource_api import slice_pb2 as rmcs__resource__api_dot_slice__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rmcs_resource_api/slice_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class SliceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadSlice = channel.unary_unary(
                '/slice.SliceService/ReadSlice',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceReadResponse.FromString,
                _registered_method=True)
        self.ListSliceByName = channel.unary_unary(
                '/slice.SliceService/ListSliceByName',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceName.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
                _registered_method=True)
        self.ListSliceByDevice = channel.unary_unary(
                '/slice.SliceService/ListSliceByDevice',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceDevice.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
                _registered_method=True)
        self.ListSliceByModel = channel.unary_unary(
                '/slice.SliceService/ListSliceByModel',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceModel.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
                _registered_method=True)
        self.ListSliceByDeviceModel = channel.unary_unary(
                '/slice.SliceService/ListSliceByDeviceModel',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceDeviceModel.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
                _registered_method=True)
        self.CreateSlice = channel.unary_unary(
                '/slice.SliceService/CreateSlice',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceSchema.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceCreateResponse.FromString,
                _registered_method=True)
        self.UpdateSlice = channel.unary_unary(
                '/slice.SliceService/UpdateSlice',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceUpdate.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
                _registered_method=True)
        self.DeleteSlice = channel.unary_unary(
                '/slice.SliceService/DeleteSlice',
                request_serializer=rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
                response_deserializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
                _registered_method=True)


class SliceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceByDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceByModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSliceByDeviceModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSlice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SliceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadSlice,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceId.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceReadResponse.SerializeToString,
            ),
            'ListSliceByName': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceByName,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceName.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.SerializeToString,
            ),
            'ListSliceByDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceByDevice,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceDevice.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.SerializeToString,
            ),
            'ListSliceByModel': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceByModel,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceModel.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.SerializeToString,
            ),
            'ListSliceByDeviceModel': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSliceByDeviceModel,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceDeviceModel.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceListResponse.SerializeToString,
            ),
            'CreateSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSlice,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceSchema.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceCreateResponse.SerializeToString,
            ),
            'UpdateSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSlice,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceUpdate.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.SerializeToString,
            ),
            'DeleteSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSlice,
                    request_deserializer=rmcs__resource__api_dot_slice__pb2.SliceId.FromString,
                    response_serializer=rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'slice.SliceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SliceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ReadSlice',
            rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceByName',
            rmcs__resource__api_dot_slice__pb2.SliceName.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceByDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceByDevice',
            rmcs__resource__api_dot_slice__pb2.SliceDevice.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceByModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceByModel',
            rmcs__resource__api_dot_slice__pb2.SliceModel.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSliceByDeviceModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/ListSliceByDeviceModel',
            rmcs__resource__api_dot_slice__pb2.SliceDeviceModel.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/CreateSlice',
            rmcs__resource__api_dot_slice__pb2.SliceSchema.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/UpdateSlice',
            rmcs__resource__api_dot_slice__pb2.SliceUpdate.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slice.SliceService/DeleteSlice',
            rmcs__resource__api_dot_slice__pb2.SliceId.SerializeToString,
            rmcs__resource__api_dot_slice__pb2.SliceChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
