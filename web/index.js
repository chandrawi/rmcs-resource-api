import require$$0$1 from 'grpc-web';
import require$$0 from 'google-protobuf';

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var common_pb = {};

(function (exports) {
	// source: rmcs_resource_api/common.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.common.DataType', null, global);
	/**
	 * @enum {number}
	 */
	proto.common.DataType = {
	  NULLD: 0,
	  I8: 1,
	  I16: 2,
	  I32: 3,
	  I64: 4,
	  I128: 5,
	  U8: 6,
	  U16: 7,
	  U32: 8,
	  U64: 9,
	  U128: 10,
	  F32: 12,
	  F64: 13,
	  BOOL: 15,
	  CHAR: 16,
	  STRING: 17,
	  BYTES: 18
	};

	goog.object.extend(exports, proto.common); 
} (common_pb));

var model_pb = {};

(function (exports) {
	// source: rmcs_resource_api/model.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	var rmcs_resource_api_common_pb = common_pb;
	goog.object.extend(proto, rmcs_resource_api_common_pb);
	goog.exportSymbol('proto.model.ConfigChangeResponse', null, global);
	goog.exportSymbol('proto.model.ConfigCreateResponse', null, global);
	goog.exportSymbol('proto.model.ConfigId', null, global);
	goog.exportSymbol('proto.model.ConfigListResponse', null, global);
	goog.exportSymbol('proto.model.ConfigReadResponse', null, global);
	goog.exportSymbol('proto.model.ConfigSchema', null, global);
	goog.exportSymbol('proto.model.ConfigSchemaVec', null, global);
	goog.exportSymbol('proto.model.ConfigUpdate', null, global);
	goog.exportSymbol('proto.model.ModelCategory', null, global);
	goog.exportSymbol('proto.model.ModelChangeResponse', null, global);
	goog.exportSymbol('proto.model.ModelCreateResponse', null, global);
	goog.exportSymbol('proto.model.ModelId', null, global);
	goog.exportSymbol('proto.model.ModelIds', null, global);
	goog.exportSymbol('proto.model.ModelListResponse', null, global);
	goog.exportSymbol('proto.model.ModelName', null, global);
	goog.exportSymbol('proto.model.ModelOption', null, global);
	goog.exportSymbol('proto.model.ModelReadResponse', null, global);
	goog.exportSymbol('proto.model.ModelSchema', null, global);
	goog.exportSymbol('proto.model.ModelUpdate', null, global);
	goog.exportSymbol('proto.model.TypeId', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ModelSchema.repeatedFields_, null);
	};
	goog.inherits(proto.model.ModelSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelSchema.displayName = 'proto.model.ModelSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ConfigSchemaVec = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ConfigSchemaVec.repeatedFields_, null);
	};
	goog.inherits(proto.model.ConfigSchemaVec, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ConfigSchemaVec.displayName = 'proto.model.ConfigSchemaVec';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ModelId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelId.displayName = 'proto.model.ModelId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelIds = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ModelIds.repeatedFields_, null);
	};
	goog.inherits(proto.model.ModelIds, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelIds.displayName = 'proto.model.ModelIds';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.TypeId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.TypeId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.TypeId.displayName = 'proto.model.TypeId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ModelName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelName.displayName = 'proto.model.ModelName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelCategory = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ModelCategory, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelCategory.displayName = 'proto.model.ModelCategory';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelOption = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ModelOption, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelOption.displayName = 'proto.model.ModelOption';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ModelUpdate.repeatedFields_, null);
	};
	goog.inherits(proto.model.ModelUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelUpdate.displayName = 'proto.model.ModelUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ConfigSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ConfigSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ConfigSchema.displayName = 'proto.model.ConfigSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ConfigId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ConfigId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ConfigId.displayName = 'proto.model.ConfigId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ConfigUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ConfigUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ConfigUpdate.displayName = 'proto.model.ConfigUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ModelReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelReadResponse.displayName = 'proto.model.ModelReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ModelListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.model.ModelListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelListResponse.displayName = 'proto.model.ModelListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ModelCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelCreateResponse.displayName = 'proto.model.ModelCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ModelChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ModelChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ModelChangeResponse.displayName = 'proto.model.ModelChangeResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ConfigReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ConfigReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ConfigReadResponse.displayName = 'proto.model.ConfigReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ConfigListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.ConfigListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.model.ConfigListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ConfigListResponse.displayName = 'proto.model.ConfigListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ConfigCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ConfigCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ConfigCreateResponse.displayName = 'proto.model.ConfigCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.model.ConfigChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.model.ConfigChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.model.ConfigChangeResponse.displayName = 'proto.model.ConfigChangeResponse';
	}

	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.model.ModelSchema.repeatedFields_ = [5,6];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelSchema.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	category: jspb.Message.getFieldWithDefault(msg, 2, ""),
	name: jspb.Message.getFieldWithDefault(msg, 3, ""),
	description: jspb.Message.getFieldWithDefault(msg, 4, ""),
	dataTypeList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
	configsList: jspb.Message.toObjectList(msg.getConfigsList(),
	    proto.model.ConfigSchemaVec.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelSchema}
	 */
	proto.model.ModelSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelSchema;
	  return proto.model.ModelSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelSchema}
	 */
	proto.model.ModelSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 5:
	      var values = /** @type {!Array<!proto.common.DataType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
	      for (var i = 0; i < values.length; i++) {
	        msg.addDataType(values[i]);
	      }
	      break;
	    case 6:
	      var value = new proto.model.ConfigSchemaVec;
	      reader.readMessage(value,proto.model.ConfigSchemaVec.deserializeBinaryFromReader);
	      msg.addConfigs(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getCategory();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getDataTypeList();
	  if (f.length > 0) {
	    writer.writePackedEnum(
	      5,
	      f
	    );
	  }
	  f = message.getConfigsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      6,
	      f,
	      proto.model.ConfigSchemaVec.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.model.ModelSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.model.ModelSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.model.ModelSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.model.ModelSchema} returns this
	 */
	proto.model.ModelSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string category = 2;
	 * @return {string}
	 */
	proto.model.ModelSchema.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelSchema} returns this
	 */
	proto.model.ModelSchema.prototype.setCategory = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.model.ModelSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelSchema} returns this
	 */
	proto.model.ModelSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.model.ModelSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelSchema} returns this
	 */
	proto.model.ModelSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * repeated common.DataType data_type = 5;
	 * @return {!Array<!proto.common.DataType>}
	 */
	proto.model.ModelSchema.prototype.getDataTypeList = function() {
	  return /** @type {!Array<!proto.common.DataType>} */ (jspb.Message.getRepeatedField(this, 5));
	};


	/**
	 * @param {!Array<!proto.common.DataType>} value
	 * @return {!proto.model.ModelSchema} returns this
	 */
	proto.model.ModelSchema.prototype.setDataTypeList = function(value) {
	  return jspb.Message.setField(this, 5, value || []);
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @param {number=} opt_index
	 * @return {!proto.model.ModelSchema} returns this
	 */
	proto.model.ModelSchema.prototype.addDataType = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.model.ModelSchema} returns this
	 */
	proto.model.ModelSchema.prototype.clearDataTypeList = function() {
	  return this.setDataTypeList([]);
	};


	/**
	 * repeated ConfigSchemaVec configs = 6;
	 * @return {!Array<!proto.model.ConfigSchemaVec>}
	 */
	proto.model.ModelSchema.prototype.getConfigsList = function() {
	  return /** @type{!Array<!proto.model.ConfigSchemaVec>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.model.ConfigSchemaVec, 6));
	};


	/**
	 * @param {!Array<!proto.model.ConfigSchemaVec>} value
	 * @return {!proto.model.ModelSchema} returns this
	*/
	proto.model.ModelSchema.prototype.setConfigsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 6, value);
	};


	/**
	 * @param {!proto.model.ConfigSchemaVec=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.model.ConfigSchemaVec}
	 */
	proto.model.ModelSchema.prototype.addConfigs = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.model.ConfigSchemaVec, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.model.ModelSchema} returns this
	 */
	proto.model.ModelSchema.prototype.clearConfigsList = function() {
	  return this.setConfigsList([]);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.model.ConfigSchemaVec.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ConfigSchemaVec.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ConfigSchemaVec.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ConfigSchemaVec} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigSchemaVec.toObject = function(includeInstance, msg) {
	  var obj = {
	configsList: jspb.Message.toObjectList(msg.getConfigsList(),
	    proto.model.ConfigSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ConfigSchemaVec}
	 */
	proto.model.ConfigSchemaVec.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ConfigSchemaVec;
	  return proto.model.ConfigSchemaVec.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ConfigSchemaVec} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ConfigSchemaVec}
	 */
	proto.model.ConfigSchemaVec.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.model.ConfigSchema;
	      reader.readMessage(value,proto.model.ConfigSchema.deserializeBinaryFromReader);
	      msg.addConfigs(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigSchemaVec.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ConfigSchemaVec.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ConfigSchemaVec} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigSchemaVec.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getConfigsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.model.ConfigSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated ConfigSchema configs = 1;
	 * @return {!Array<!proto.model.ConfigSchema>}
	 */
	proto.model.ConfigSchemaVec.prototype.getConfigsList = function() {
	  return /** @type{!Array<!proto.model.ConfigSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.model.ConfigSchema, 1));
	};


	/**
	 * @param {!Array<!proto.model.ConfigSchema>} value
	 * @return {!proto.model.ConfigSchemaVec} returns this
	*/
	proto.model.ConfigSchemaVec.prototype.setConfigsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.model.ConfigSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.model.ConfigSchema}
	 */
	proto.model.ConfigSchemaVec.prototype.addConfigs = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.ConfigSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.model.ConfigSchemaVec} returns this
	 */
	proto.model.ConfigSchemaVec.prototype.clearConfigsList = function() {
	  return this.setConfigsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelId.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelId}
	 */
	proto.model.ModelId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelId;
	  return proto.model.ModelId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelId}
	 */
	proto.model.ModelId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.model.ModelId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.model.ModelId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.model.ModelId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.model.ModelId} returns this
	 */
	proto.model.ModelId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.model.ModelIds.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelIds.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelIds.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelIds} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelIds.toObject = function(includeInstance, msg) {
	  var obj = {
	idsList: msg.getIdsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelIds}
	 */
	proto.model.ModelIds.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelIds;
	  return proto.model.ModelIds.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelIds} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelIds}
	 */
	proto.model.ModelIds.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addIds(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelIds.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelIds.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelIds} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelIds.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.model.ModelIds.prototype.getIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes ids = 1;
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<string>}
	 */
	proto.model.ModelIds.prototype.getIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getIdsList()));
	};


	/**
	 * repeated bytes ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.model.ModelIds.prototype.getIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.model.ModelIds} returns this
	 */
	proto.model.ModelIds.prototype.setIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.model.ModelIds} returns this
	 */
	proto.model.ModelIds.prototype.addIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.model.ModelIds} returns this
	 */
	proto.model.ModelIds.prototype.clearIdsList = function() {
	  return this.setIdsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.TypeId.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.TypeId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.TypeId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.TypeId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.TypeId}
	 */
	proto.model.TypeId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.TypeId;
	  return proto.model.TypeId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.TypeId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.TypeId}
	 */
	proto.model.TypeId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.TypeId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.TypeId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.TypeId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.TypeId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.model.TypeId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.model.TypeId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.model.TypeId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.model.TypeId} returns this
	 */
	proto.model.TypeId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelName.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelName.toObject = function(includeInstance, msg) {
	  var obj = {
	name: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelName}
	 */
	proto.model.ModelName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelName;
	  return proto.model.ModelName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelName}
	 */
	proto.model.ModelName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.model.ModelName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelName} returns this
	 */
	proto.model.ModelName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelCategory.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelCategory.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelCategory} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelCategory.toObject = function(includeInstance, msg) {
	  var obj = {
	category: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelCategory}
	 */
	proto.model.ModelCategory.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelCategory;
	  return proto.model.ModelCategory.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelCategory} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelCategory}
	 */
	proto.model.ModelCategory.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelCategory.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelCategory.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelCategory} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelCategory.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getCategory();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string category = 1;
	 * @return {string}
	 */
	proto.model.ModelCategory.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelCategory} returns this
	 */
	proto.model.ModelCategory.prototype.setCategory = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelOption.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelOption.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelOption} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelOption.toObject = function(includeInstance, msg) {
	  var f, obj = {
	typeId: msg.getTypeId_asB64(),
	name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	category: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelOption}
	 */
	proto.model.ModelOption.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelOption;
	  return proto.model.ModelOption.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelOption} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelOption}
	 */
	proto.model.ModelOption.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTypeId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelOption.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelOption.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelOption} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelOption.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes type_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.model.ModelOption.prototype.getTypeId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes type_id = 1;
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {string}
	 */
	proto.model.ModelOption.prototype.getTypeId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTypeId()));
	};


	/**
	 * optional bytes type_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {!Uint8Array}
	 */
	proto.model.ModelOption.prototype.getTypeId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTypeId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.model.ModelOption} returns this
	 */
	proto.model.ModelOption.prototype.setTypeId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ModelOption} returns this
	 */
	proto.model.ModelOption.prototype.clearTypeId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ModelOption.prototype.hasTypeId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.model.ModelOption.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelOption} returns this
	 */
	proto.model.ModelOption.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ModelOption} returns this
	 */
	proto.model.ModelOption.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ModelOption.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string category = 3;
	 * @return {string}
	 */
	proto.model.ModelOption.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelOption} returns this
	 */
	proto.model.ModelOption.prototype.setCategory = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ModelOption} returns this
	 */
	proto.model.ModelOption.prototype.clearCategory = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ModelOption.prototype.hasCategory = function() {
	  return jspb.Message.getField(this, 3) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.model.ModelUpdate.repeatedFields_ = [5];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	category: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	description: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
	dataTypeList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
	dataTypeFlag: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelUpdate}
	 */
	proto.model.ModelUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelUpdate;
	  return proto.model.ModelUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelUpdate}
	 */
	proto.model.ModelUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 5:
	      var values = /** @type {!Array<!proto.common.DataType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
	      for (var i = 0; i < values.length; i++) {
	        msg.addDataType(values[i]);
	      }
	      break;
	    case 6:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setDataTypeFlag(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getDataTypeList();
	  if (f.length > 0) {
	    writer.writePackedEnum(
	      5,
	      f
	    );
	  }
	  f = message.getDataTypeFlag();
	  if (f) {
	    writer.writeBool(
	      6,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.model.ModelUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.model.ModelUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.model.ModelUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string category = 2;
	 * @return {string}
	 */
	proto.model.ModelUpdate.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.setCategory = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.clearCategory = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ModelUpdate.prototype.hasCategory = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.model.ModelUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ModelUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.model.ModelUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ModelUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * repeated common.DataType data_type = 5;
	 * @return {!Array<!proto.common.DataType>}
	 */
	proto.model.ModelUpdate.prototype.getDataTypeList = function() {
	  return /** @type {!Array<!proto.common.DataType>} */ (jspb.Message.getRepeatedField(this, 5));
	};


	/**
	 * @param {!Array<!proto.common.DataType>} value
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.setDataTypeList = function(value) {
	  return jspb.Message.setField(this, 5, value || []);
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @param {number=} opt_index
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.addDataType = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.clearDataTypeList = function() {
	  return this.setDataTypeList([]);
	};


	/**
	 * optional bool data_type_flag = 6;
	 * @return {boolean}
	 */
	proto.model.ModelUpdate.prototype.getDataTypeFlag = function() {
	  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
	};


	/**
	 * @param {boolean} value
	 * @return {!proto.model.ModelUpdate} returns this
	 */
	proto.model.ModelUpdate.prototype.setDataTypeFlag = function(value) {
	  return jspb.Message.setProto3BooleanField(this, 6, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ConfigSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ConfigSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ConfigSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0),
	modelId: msg.getModelId_asB64(),
	index: jspb.Message.getFieldWithDefault(msg, 3, 0),
	name: jspb.Message.getFieldWithDefault(msg, 4, ""),
	configBytes: msg.getConfigBytes_asB64(),
	configType: jspb.Message.getFieldWithDefault(msg, 6, 0),
	category: jspb.Message.getFieldWithDefault(msg, 7, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ConfigSchema}
	 */
	proto.model.ConfigSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ConfigSchema;
	  return proto.model.ConfigSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ConfigSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ConfigSchema}
	 */
	proto.model.ConfigSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setIndex(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 5:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setConfigBytes(value);
	      break;
	    case 6:
	      var value = /** @type {!proto.common.DataType} */ (reader.readEnum());
	      msg.setConfigType(value);
	      break;
	    case 7:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ConfigSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ConfigSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getIndex();
	  if (f !== 0) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getConfigBytes_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      5,
	      f
	    );
	  }
	  f = message.getConfigType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      6,
	      f
	    );
	  }
	  f = message.getCategory();
	  if (f.length > 0) {
	    writer.writeString(
	      7,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.model.ConfigSchema.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.model.ConfigSchema} returns this
	 */
	proto.model.ConfigSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.model.ConfigSchema.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.model.ConfigSchema.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigSchema.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.model.ConfigSchema} returns this
	 */
	proto.model.ConfigSchema.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int32 index = 3;
	 * @return {number}
	 */
	proto.model.ConfigSchema.prototype.getIndex = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.model.ConfigSchema} returns this
	 */
	proto.model.ConfigSchema.prototype.setIndex = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional string name = 4;
	 * @return {string}
	 */
	proto.model.ConfigSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ConfigSchema} returns this
	 */
	proto.model.ConfigSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * optional bytes config_bytes = 5;
	 * @return {!(string|Uint8Array)}
	 */
	proto.model.ConfigSchema.prototype.getConfigBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * optional bytes config_bytes = 5;
	 * This is a type-conversion wrapper around `getConfigBytes()`
	 * @return {string}
	 */
	proto.model.ConfigSchema.prototype.getConfigBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getConfigBytes()));
	};


	/**
	 * optional bytes config_bytes = 5;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getConfigBytes()`
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigSchema.prototype.getConfigBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getConfigBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.model.ConfigSchema} returns this
	 */
	proto.model.ConfigSchema.prototype.setConfigBytes = function(value) {
	  return jspb.Message.setProto3BytesField(this, 5, value);
	};


	/**
	 * optional common.DataType config_type = 6;
	 * @return {!proto.common.DataType}
	 */
	proto.model.ConfigSchema.prototype.getConfigType = function() {
	  return /** @type {!proto.common.DataType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @return {!proto.model.ConfigSchema} returns this
	 */
	proto.model.ConfigSchema.prototype.setConfigType = function(value) {
	  return jspb.Message.setProto3EnumField(this, 6, value);
	};


	/**
	 * optional string category = 7;
	 * @return {string}
	 */
	proto.model.ConfigSchema.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ConfigSchema} returns this
	 */
	proto.model.ConfigSchema.prototype.setCategory = function(value) {
	  return jspb.Message.setProto3StringField(this, 7, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ConfigId.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ConfigId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ConfigId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ConfigId}
	 */
	proto.model.ConfigId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ConfigId;
	  return proto.model.ConfigId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ConfigId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ConfigId}
	 */
	proto.model.ConfigId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ConfigId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ConfigId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.model.ConfigId.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.model.ConfigId} returns this
	 */
	proto.model.ConfigId.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ConfigUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ConfigUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ConfigUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0),
	name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	configBytes: msg.getConfigBytes_asB64(),
	configType: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
	category: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ConfigUpdate}
	 */
	proto.model.ConfigUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ConfigUpdate;
	  return proto.model.ConfigUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ConfigUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ConfigUpdate}
	 */
	proto.model.ConfigUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setConfigBytes(value);
	      break;
	    case 4:
	      var value = /** @type {!proto.common.DataType} */ (reader.readEnum());
	      msg.setConfigType(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ConfigUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ConfigUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = /** @type {!proto.common.DataType} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeEnum(
	      4,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.model.ConfigUpdate.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.model.ConfigUpdate} returns this
	 */
	proto.model.ConfigUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.model.ConfigUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ConfigUpdate} returns this
	 */
	proto.model.ConfigUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ConfigUpdate} returns this
	 */
	proto.model.ConfigUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ConfigUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional bytes config_bytes = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.model.ConfigUpdate.prototype.getConfigBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes config_bytes = 3;
	 * This is a type-conversion wrapper around `getConfigBytes()`
	 * @return {string}
	 */
	proto.model.ConfigUpdate.prototype.getConfigBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getConfigBytes()));
	};


	/**
	 * optional bytes config_bytes = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getConfigBytes()`
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigUpdate.prototype.getConfigBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getConfigBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.model.ConfigUpdate} returns this
	 */
	proto.model.ConfigUpdate.prototype.setConfigBytes = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ConfigUpdate} returns this
	 */
	proto.model.ConfigUpdate.prototype.clearConfigBytes = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ConfigUpdate.prototype.hasConfigBytes = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional common.DataType config_type = 4;
	 * @return {!proto.common.DataType}
	 */
	proto.model.ConfigUpdate.prototype.getConfigType = function() {
	  return /** @type {!proto.common.DataType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @return {!proto.model.ConfigUpdate} returns this
	 */
	proto.model.ConfigUpdate.prototype.setConfigType = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ConfigUpdate} returns this
	 */
	proto.model.ConfigUpdate.prototype.clearConfigType = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ConfigUpdate.prototype.hasConfigType = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional string category = 5;
	 * @return {string}
	 */
	proto.model.ConfigUpdate.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.model.ConfigUpdate} returns this
	 */
	proto.model.ConfigUpdate.prototype.setCategory = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.model.ConfigUpdate} returns this
	 */
	proto.model.ConfigUpdate.prototype.clearCategory = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ConfigUpdate.prototype.hasCategory = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.model.ModelSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelReadResponse}
	 */
	proto.model.ModelReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelReadResponse;
	  return proto.model.ModelReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelReadResponse}
	 */
	proto.model.ModelReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.model.ModelSchema;
	      reader.readMessage(value,proto.model.ModelSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.model.ModelSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional ModelSchema result = 1;
	 * @return {?proto.model.ModelSchema}
	 */
	proto.model.ModelReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.model.ModelSchema} */ (
	    jspb.Message.getWrapperField(this, proto.model.ModelSchema, 1));
	};


	/**
	 * @param {?proto.model.ModelSchema|undefined} value
	 * @return {!proto.model.ModelReadResponse} returns this
	*/
	proto.model.ModelReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.model.ModelReadResponse} returns this
	 */
	proto.model.ModelReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ModelReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.model.ModelListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.model.ModelSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelListResponse}
	 */
	proto.model.ModelListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelListResponse;
	  return proto.model.ModelListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelListResponse}
	 */
	proto.model.ModelListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.model.ModelSchema;
	      reader.readMessage(value,proto.model.ModelSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.model.ModelSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated ModelSchema results = 1;
	 * @return {!Array<!proto.model.ModelSchema>}
	 */
	proto.model.ModelListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.model.ModelSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.model.ModelSchema, 1));
	};


	/**
	 * @param {!Array<!proto.model.ModelSchema>} value
	 * @return {!proto.model.ModelListResponse} returns this
	*/
	proto.model.ModelListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.model.ModelSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.model.ModelSchema}
	 */
	proto.model.ModelListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.ModelSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.model.ModelListResponse} returns this
	 */
	proto.model.ModelListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelCreateResponse}
	 */
	proto.model.ModelCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelCreateResponse;
	  return proto.model.ModelCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelCreateResponse}
	 */
	proto.model.ModelCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.model.ModelCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.model.ModelCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.model.ModelCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.model.ModelCreateResponse} returns this
	 */
	proto.model.ModelCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ModelChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ModelChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ModelChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ModelChangeResponse}
	 */
	proto.model.ModelChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ModelChangeResponse;
	  return proto.model.ModelChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ModelChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ModelChangeResponse}
	 */
	proto.model.ModelChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ModelChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ModelChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ModelChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ModelChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ConfigReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ConfigReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ConfigReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.model.ConfigSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ConfigReadResponse}
	 */
	proto.model.ConfigReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ConfigReadResponse;
	  return proto.model.ConfigReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ConfigReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ConfigReadResponse}
	 */
	proto.model.ConfigReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.model.ConfigSchema;
	      reader.readMessage(value,proto.model.ConfigSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ConfigReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ConfigReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.model.ConfigSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional ConfigSchema result = 1;
	 * @return {?proto.model.ConfigSchema}
	 */
	proto.model.ConfigReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.model.ConfigSchema} */ (
	    jspb.Message.getWrapperField(this, proto.model.ConfigSchema, 1));
	};


	/**
	 * @param {?proto.model.ConfigSchema|undefined} value
	 * @return {!proto.model.ConfigReadResponse} returns this
	*/
	proto.model.ConfigReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.model.ConfigReadResponse} returns this
	 */
	proto.model.ConfigReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.model.ConfigReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.model.ConfigListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ConfigListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ConfigListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ConfigListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.model.ConfigSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ConfigListResponse}
	 */
	proto.model.ConfigListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ConfigListResponse;
	  return proto.model.ConfigListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ConfigListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ConfigListResponse}
	 */
	proto.model.ConfigListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.model.ConfigSchema;
	      reader.readMessage(value,proto.model.ConfigSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ConfigListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ConfigListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.model.ConfigSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated ConfigSchema results = 1;
	 * @return {!Array<!proto.model.ConfigSchema>}
	 */
	proto.model.ConfigListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.model.ConfigSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.model.ConfigSchema, 1));
	};


	/**
	 * @param {!Array<!proto.model.ConfigSchema>} value
	 * @return {!proto.model.ConfigListResponse} returns this
	*/
	proto.model.ConfigListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.model.ConfigSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.model.ConfigSchema}
	 */
	proto.model.ConfigListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.ConfigSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.model.ConfigListResponse} returns this
	 */
	proto.model.ConfigListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ConfigCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ConfigCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ConfigCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ConfigCreateResponse}
	 */
	proto.model.ConfigCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ConfigCreateResponse;
	  return proto.model.ConfigCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ConfigCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ConfigCreateResponse}
	 */
	proto.model.ConfigCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ConfigCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ConfigCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.model.ConfigCreateResponse.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.model.ConfigCreateResponse} returns this
	 */
	proto.model.ConfigCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.model.ConfigChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.model.ConfigChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.model.ConfigChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.model.ConfigChangeResponse}
	 */
	proto.model.ConfigChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.model.ConfigChangeResponse;
	  return proto.model.ConfigChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.model.ConfigChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.model.ConfigChangeResponse}
	 */
	proto.model.ConfigChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.model.ConfigChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.model.ConfigChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.model.ConfigChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.model.ConfigChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.model); 
} (model_pb));

/**
 * @fileoverview gRPC-Web generated client stub for model
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_resource_api/model.proto


/* eslint-disable */
// @ts-nocheck



const grpc$7 = {};
grpc$7.web = require$$0$1;
const proto$8 = {};
proto$8.model = model_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$8.model.ModelServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$7.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$8.model.ModelServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$7.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelId,
 *   !proto.model.ModelReadResponse>}
 */
const methodDescriptor_ModelService_ReadModel = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/ReadModel',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ModelId,
  proto$8.model.ModelReadResponse,
  /**
   * @param {!proto.model.ModelId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ModelReadResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.readModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ReadModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_ReadModel,
      callback);
};


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelReadResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.readModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ReadModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_ReadModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelIds,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelByIds = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/ListModelByIds',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ModelIds,
  proto$8.model.ModelListResponse,
  /**
   * @param {!proto.model.ModelIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.listModelByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelByIds',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByIds,
      callback);
};


/**
 * @param {!proto.model.ModelIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.listModelByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelByIds',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.TypeId,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelByType = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/ListModelByType',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.TypeId,
  proto$8.model.ModelListResponse,
  /**
   * @param {!proto.model.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.listModelByType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelByType',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByType,
      callback);
};


/**
 * @param {!proto.model.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.listModelByType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelByType',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelName,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelByName = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/ListModelByName',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ModelName,
  proto$8.model.ModelListResponse,
  /**
   * @param {!proto.model.ModelName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.listModelByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelByName',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByName,
      callback);
};


/**
 * @param {!proto.model.ModelName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.listModelByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelByName',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelCategory,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelByCategory = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/ListModelByCategory',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ModelCategory,
  proto$8.model.ModelListResponse,
  /**
   * @param {!proto.model.ModelCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.listModelByCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelByCategory',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByCategory,
      callback);
};


/**
 * @param {!proto.model.ModelCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.listModelByCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelByCategory',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelOption,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelOption = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/ListModelOption',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ModelOption,
  proto$8.model.ModelListResponse,
  /**
   * @param {!proto.model.ModelOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.listModelOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelOption',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelOption,
      callback);
};


/**
 * @param {!proto.model.ModelOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.listModelOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelOption',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelSchema,
 *   !proto.model.ModelCreateResponse>}
 */
const methodDescriptor_ModelService_CreateModel = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/CreateModel',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ModelSchema,
  proto$8.model.ModelCreateResponse,
  /**
   * @param {!proto.model.ModelSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ModelCreateResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.createModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/CreateModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_CreateModel,
      callback);
};


/**
 * @param {!proto.model.ModelSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelCreateResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.createModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/CreateModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_CreateModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelUpdate,
 *   !proto.model.ModelChangeResponse>}
 */
const methodDescriptor_ModelService_UpdateModel = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/UpdateModel',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ModelUpdate,
  proto$8.model.ModelChangeResponse,
  /**
   * @param {!proto.model.ModelUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ModelChangeResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.updateModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/UpdateModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_UpdateModel,
      callback);
};


/**
 * @param {!proto.model.ModelUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelChangeResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.updateModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/UpdateModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_UpdateModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelId,
 *   !proto.model.ModelChangeResponse>}
 */
const methodDescriptor_ModelService_DeleteModel = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/DeleteModel',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ModelId,
  proto$8.model.ModelChangeResponse,
  /**
   * @param {!proto.model.ModelId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ModelChangeResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.deleteModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/DeleteModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_DeleteModel,
      callback);
};


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelChangeResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.deleteModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/DeleteModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_DeleteModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ConfigId,
 *   !proto.model.ConfigReadResponse>}
 */
const methodDescriptor_ModelService_ReadModelConfig = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/ReadModelConfig',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ConfigId,
  proto$8.model.ConfigReadResponse,
  /**
   * @param {!proto.model.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ConfigReadResponse.deserializeBinary
);


/**
 * @param {!proto.model.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.readModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ReadModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_ReadModelConfig,
      callback);
};


/**
 * @param {!proto.model.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigReadResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.readModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ReadModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_ReadModelConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelId,
 *   !proto.model.ConfigListResponse>}
 */
const methodDescriptor_ModelService_ListModelConfig = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/ListModelConfig',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ModelId,
  proto$8.model.ConfigListResponse,
  /**
   * @param {!proto.model.ModelId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ConfigListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.listModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelConfig,
      callback);
};


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigListResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.listModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ConfigSchema,
 *   !proto.model.ConfigCreateResponse>}
 */
const methodDescriptor_ModelService_CreateModelConfig = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/CreateModelConfig',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ConfigSchema,
  proto$8.model.ConfigCreateResponse,
  /**
   * @param {!proto.model.ConfigSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ConfigCreateResponse.deserializeBinary
);


/**
 * @param {!proto.model.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.createModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/CreateModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_CreateModelConfig,
      callback);
};


/**
 * @param {!proto.model.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigCreateResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.createModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/CreateModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_CreateModelConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ConfigUpdate,
 *   !proto.model.ConfigChangeResponse>}
 */
const methodDescriptor_ModelService_UpdateModelConfig = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/UpdateModelConfig',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ConfigUpdate,
  proto$8.model.ConfigChangeResponse,
  /**
   * @param {!proto.model.ConfigUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.model.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.updateModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/UpdateModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_UpdateModelConfig,
      callback);
};


/**
 * @param {!proto.model.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.updateModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/UpdateModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_UpdateModelConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ConfigId,
 *   !proto.model.ConfigChangeResponse>}
 */
const methodDescriptor_ModelService_DeleteModelConfig = new grpc$7.web.MethodDescriptor(
  '/model.ModelService/DeleteModelConfig',
  grpc$7.web.MethodType.UNARY,
  proto$8.model.ConfigId,
  proto$8.model.ConfigChangeResponse,
  /**
   * @param {!proto.model.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$8.model.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.model.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$8.model.ModelServiceClient.prototype.deleteModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/DeleteModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_DeleteModelConfig,
      callback);
};


/**
 * @param {!proto.model.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto$8.model.ModelServicePromiseClient.prototype.deleteModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/DeleteModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_DeleteModelConfig);
};


var model_grpc_web_pb = proto$8.model;

var model_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(model_grpc_web_pb);

var device_pb = {};

(function (exports) {
	// source: rmcs_resource_api/device.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	var rmcs_resource_api_common_pb = common_pb;
	goog.object.extend(proto, rmcs_resource_api_common_pb);
	goog.exportSymbol('proto.device.ConfigChangeResponse', null, global);
	goog.exportSymbol('proto.device.ConfigCreateResponse', null, global);
	goog.exportSymbol('proto.device.ConfigId', null, global);
	goog.exportSymbol('proto.device.ConfigListResponse', null, global);
	goog.exportSymbol('proto.device.ConfigReadResponse', null, global);
	goog.exportSymbol('proto.device.ConfigSchema', null, global);
	goog.exportSymbol('proto.device.ConfigUpdate', null, global);
	goog.exportSymbol('proto.device.DeviceChangeResponse', null, global);
	goog.exportSymbol('proto.device.DeviceCreateResponse', null, global);
	goog.exportSymbol('proto.device.DeviceId', null, global);
	goog.exportSymbol('proto.device.DeviceIds', null, global);
	goog.exportSymbol('proto.device.DeviceListResponse', null, global);
	goog.exportSymbol('proto.device.DeviceName', null, global);
	goog.exportSymbol('proto.device.DeviceOption', null, global);
	goog.exportSymbol('proto.device.DeviceReadResponse', null, global);
	goog.exportSymbol('proto.device.DeviceSchema', null, global);
	goog.exportSymbol('proto.device.DeviceUpdate', null, global);
	goog.exportSymbol('proto.device.GatewayChangeResponse', null, global);
	goog.exportSymbol('proto.device.GatewayCreateResponse', null, global);
	goog.exportSymbol('proto.device.GatewayId', null, global);
	goog.exportSymbol('proto.device.GatewayIds', null, global);
	goog.exportSymbol('proto.device.GatewayListResponse', null, global);
	goog.exportSymbol('proto.device.GatewayName', null, global);
	goog.exportSymbol('proto.device.GatewayOption', null, global);
	goog.exportSymbol('proto.device.GatewayReadResponse', null, global);
	goog.exportSymbol('proto.device.GatewaySchema', null, global);
	goog.exportSymbol('proto.device.GatewayUpdate', null, global);
	goog.exportSymbol('proto.device.SerialNumber', null, global);
	goog.exportSymbol('proto.device.TypeChangeResponse', null, global);
	goog.exportSymbol('proto.device.TypeCreateResponse', null, global);
	goog.exportSymbol('proto.device.TypeId', null, global);
	goog.exportSymbol('proto.device.TypeIds', null, global);
	goog.exportSymbol('proto.device.TypeListResponse', null, global);
	goog.exportSymbol('proto.device.TypeModel', null, global);
	goog.exportSymbol('proto.device.TypeName', null, global);
	goog.exportSymbol('proto.device.TypeOption', null, global);
	goog.exportSymbol('proto.device.TypeReadResponse', null, global);
	goog.exportSymbol('proto.device.TypeSchema', null, global);
	goog.exportSymbol('proto.device.TypeUpdate', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.DeviceSchema.repeatedFields_, null);
	};
	goog.inherits(proto.device.DeviceSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceSchema.displayName = 'proto.device.DeviceSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewaySchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.GatewaySchema.repeatedFields_, null);
	};
	goog.inherits(proto.device.GatewaySchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewaySchema.displayName = 'proto.device.GatewaySchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.DeviceId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceId.displayName = 'proto.device.DeviceId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewayId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.GatewayId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewayId.displayName = 'proto.device.GatewayId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceIds = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.DeviceIds.repeatedFields_, null);
	};
	goog.inherits(proto.device.DeviceIds, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceIds.displayName = 'proto.device.DeviceIds';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewayIds = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.GatewayIds.repeatedFields_, null);
	};
	goog.inherits(proto.device.GatewayIds, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewayIds.displayName = 'proto.device.GatewayIds';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.SerialNumber = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.SerialNumber, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.SerialNumber.displayName = 'proto.device.SerialNumber';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.DeviceName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceName.displayName = 'proto.device.DeviceName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewayName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.GatewayName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewayName.displayName = 'proto.device.GatewayName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceOption = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.DeviceOption, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceOption.displayName = 'proto.device.DeviceOption';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewayOption = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.GatewayOption, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewayOption.displayName = 'proto.device.GatewayOption';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.DeviceUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceUpdate.displayName = 'proto.device.DeviceUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewayUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.GatewayUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewayUpdate.displayName = 'proto.device.GatewayUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.ConfigSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.ConfigSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.ConfigSchema.displayName = 'proto.device.ConfigSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.ConfigId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.ConfigId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.ConfigId.displayName = 'proto.device.ConfigId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.ConfigUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.ConfigUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.ConfigUpdate.displayName = 'proto.device.ConfigUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.TypeSchema.repeatedFields_, null);
	};
	goog.inherits(proto.device.TypeSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeSchema.displayName = 'proto.device.TypeSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.TypeId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeId.displayName = 'proto.device.TypeId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeIds = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.TypeIds.repeatedFields_, null);
	};
	goog.inherits(proto.device.TypeIds, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeIds.displayName = 'proto.device.TypeIds';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.TypeName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeName.displayName = 'proto.device.TypeName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeOption = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.TypeOption, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeOption.displayName = 'proto.device.TypeOption';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.TypeUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeUpdate.displayName = 'proto.device.TypeUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeModel = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.TypeModel, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeModel.displayName = 'proto.device.TypeModel';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.DeviceReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceReadResponse.displayName = 'proto.device.DeviceReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.DeviceListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.device.DeviceListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceListResponse.displayName = 'proto.device.DeviceListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.DeviceCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceCreateResponse.displayName = 'proto.device.DeviceCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.DeviceChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.DeviceChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.DeviceChangeResponse.displayName = 'proto.device.DeviceChangeResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewayReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.GatewayReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewayReadResponse.displayName = 'proto.device.GatewayReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewayListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.GatewayListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.device.GatewayListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewayListResponse.displayName = 'proto.device.GatewayListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewayCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.GatewayCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewayCreateResponse.displayName = 'proto.device.GatewayCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.GatewayChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.GatewayChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.GatewayChangeResponse.displayName = 'proto.device.GatewayChangeResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.ConfigReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.ConfigReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.ConfigReadResponse.displayName = 'proto.device.ConfigReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.ConfigListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.ConfigListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.device.ConfigListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.ConfigListResponse.displayName = 'proto.device.ConfigListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.ConfigCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.ConfigCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.ConfigCreateResponse.displayName = 'proto.device.ConfigCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.ConfigChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.ConfigChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.ConfigChangeResponse.displayName = 'proto.device.ConfigChangeResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.TypeReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeReadResponse.displayName = 'proto.device.TypeReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.device.TypeListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.device.TypeListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeListResponse.displayName = 'proto.device.TypeListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.TypeCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeCreateResponse.displayName = 'proto.device.TypeCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.device.TypeChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.device.TypeChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.device.TypeChangeResponse.displayName = 'proto.device.TypeChangeResponse';
	}

	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.DeviceSchema.repeatedFields_ = [7];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceSchema.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	gatewayId: msg.getGatewayId_asB64(),
	serialNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
	name: jspb.Message.getFieldWithDefault(msg, 4, ""),
	description: jspb.Message.getFieldWithDefault(msg, 5, ""),
	deviceType: (f = msg.getDeviceType()) && proto.device.TypeSchema.toObject(includeInstance, f),
	configsList: jspb.Message.toObjectList(msg.getConfigsList(),
	    proto.device.ConfigSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceSchema}
	 */
	proto.device.DeviceSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceSchema;
	  return proto.device.DeviceSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceSchema}
	 */
	proto.device.DeviceSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setGatewayId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setSerialNumber(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 6:
	      var value = new proto.device.TypeSchema;
	      reader.readMessage(value,proto.device.TypeSchema.deserializeBinaryFromReader);
	      msg.setDeviceType(value);
	      break;
	    case 7:
	      var value = new proto.device.ConfigSchema;
	      reader.readMessage(value,proto.device.ConfigSchema.deserializeBinaryFromReader);
	      msg.addConfigs(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getGatewayId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getSerialNumber();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	  f = message.getDeviceType();
	  if (f != null) {
	    writer.writeMessage(
	      6,
	      f,
	      proto.device.TypeSchema.serializeBinaryToWriter
	    );
	  }
	  f = message.getConfigsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      7,
	      f,
	      proto.device.ConfigSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.DeviceSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.DeviceSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.DeviceSchema} returns this
	 */
	proto.device.DeviceSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes gateway_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.DeviceSchema.prototype.getGatewayId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes gateway_id = 2;
	 * This is a type-conversion wrapper around `getGatewayId()`
	 * @return {string}
	 */
	proto.device.DeviceSchema.prototype.getGatewayId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getGatewayId()));
	};


	/**
	 * optional bytes gateway_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getGatewayId()`
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceSchema.prototype.getGatewayId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getGatewayId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.DeviceSchema} returns this
	 */
	proto.device.DeviceSchema.prototype.setGatewayId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional string serial_number = 3;
	 * @return {string}
	 */
	proto.device.DeviceSchema.prototype.getSerialNumber = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.DeviceSchema} returns this
	 */
	proto.device.DeviceSchema.prototype.setSerialNumber = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string name = 4;
	 * @return {string}
	 */
	proto.device.DeviceSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.DeviceSchema} returns this
	 */
	proto.device.DeviceSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * optional string description = 5;
	 * @return {string}
	 */
	proto.device.DeviceSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.DeviceSchema} returns this
	 */
	proto.device.DeviceSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 5, value);
	};


	/**
	 * optional TypeSchema device_type = 6;
	 * @return {?proto.device.TypeSchema}
	 */
	proto.device.DeviceSchema.prototype.getDeviceType = function() {
	  return /** @type{?proto.device.TypeSchema} */ (
	    jspb.Message.getWrapperField(this, proto.device.TypeSchema, 6));
	};


	/**
	 * @param {?proto.device.TypeSchema|undefined} value
	 * @return {!proto.device.DeviceSchema} returns this
	*/
	proto.device.DeviceSchema.prototype.setDeviceType = function(value) {
	  return jspb.Message.setWrapperField(this, 6, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.device.DeviceSchema} returns this
	 */
	proto.device.DeviceSchema.prototype.clearDeviceType = function() {
	  return this.setDeviceType(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceSchema.prototype.hasDeviceType = function() {
	  return jspb.Message.getField(this, 6) != null;
	};


	/**
	 * repeated ConfigSchema configs = 7;
	 * @return {!Array<!proto.device.ConfigSchema>}
	 */
	proto.device.DeviceSchema.prototype.getConfigsList = function() {
	  return /** @type{!Array<!proto.device.ConfigSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.device.ConfigSchema, 7));
	};


	/**
	 * @param {!Array<!proto.device.ConfigSchema>} value
	 * @return {!proto.device.DeviceSchema} returns this
	*/
	proto.device.DeviceSchema.prototype.setConfigsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 7, value);
	};


	/**
	 * @param {!proto.device.ConfigSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.device.ConfigSchema}
	 */
	proto.device.DeviceSchema.prototype.addConfigs = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.device.ConfigSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.DeviceSchema} returns this
	 */
	proto.device.DeviceSchema.prototype.clearConfigsList = function() {
	  return this.setConfigsList([]);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.GatewaySchema.repeatedFields_ = [6];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewaySchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewaySchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewaySchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewaySchema.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	serialNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
	name: jspb.Message.getFieldWithDefault(msg, 3, ""),
	description: jspb.Message.getFieldWithDefault(msg, 4, ""),
	gatewayType: (f = msg.getGatewayType()) && proto.device.TypeSchema.toObject(includeInstance, f),
	configsList: jspb.Message.toObjectList(msg.getConfigsList(),
	    proto.device.ConfigSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewaySchema}
	 */
	proto.device.GatewaySchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewaySchema;
	  return proto.device.GatewaySchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewaySchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewaySchema}
	 */
	proto.device.GatewaySchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setSerialNumber(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 5:
	      var value = new proto.device.TypeSchema;
	      reader.readMessage(value,proto.device.TypeSchema.deserializeBinaryFromReader);
	      msg.setGatewayType(value);
	      break;
	    case 6:
	      var value = new proto.device.ConfigSchema;
	      reader.readMessage(value,proto.device.ConfigSchema.deserializeBinaryFromReader);
	      msg.addConfigs(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewaySchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewaySchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewaySchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewaySchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getSerialNumber();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getGatewayType();
	  if (f != null) {
	    writer.writeMessage(
	      5,
	      f,
	      proto.device.TypeSchema.serializeBinaryToWriter
	    );
	  }
	  f = message.getConfigsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      6,
	      f,
	      proto.device.ConfigSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.GatewaySchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.GatewaySchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.GatewaySchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.GatewaySchema} returns this
	 */
	proto.device.GatewaySchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string serial_number = 2;
	 * @return {string}
	 */
	proto.device.GatewaySchema.prototype.getSerialNumber = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.GatewaySchema} returns this
	 */
	proto.device.GatewaySchema.prototype.setSerialNumber = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.device.GatewaySchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.GatewaySchema} returns this
	 */
	proto.device.GatewaySchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.device.GatewaySchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.GatewaySchema} returns this
	 */
	proto.device.GatewaySchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * optional TypeSchema gateway_type = 5;
	 * @return {?proto.device.TypeSchema}
	 */
	proto.device.GatewaySchema.prototype.getGatewayType = function() {
	  return /** @type{?proto.device.TypeSchema} */ (
	    jspb.Message.getWrapperField(this, proto.device.TypeSchema, 5));
	};


	/**
	 * @param {?proto.device.TypeSchema|undefined} value
	 * @return {!proto.device.GatewaySchema} returns this
	*/
	proto.device.GatewaySchema.prototype.setGatewayType = function(value) {
	  return jspb.Message.setWrapperField(this, 5, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.device.GatewaySchema} returns this
	 */
	proto.device.GatewaySchema.prototype.clearGatewayType = function() {
	  return this.setGatewayType(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.GatewaySchema.prototype.hasGatewayType = function() {
	  return jspb.Message.getField(this, 5) != null;
	};


	/**
	 * repeated ConfigSchema configs = 6;
	 * @return {!Array<!proto.device.ConfigSchema>}
	 */
	proto.device.GatewaySchema.prototype.getConfigsList = function() {
	  return /** @type{!Array<!proto.device.ConfigSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.device.ConfigSchema, 6));
	};


	/**
	 * @param {!Array<!proto.device.ConfigSchema>} value
	 * @return {!proto.device.GatewaySchema} returns this
	*/
	proto.device.GatewaySchema.prototype.setConfigsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 6, value);
	};


	/**
	 * @param {!proto.device.ConfigSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.device.ConfigSchema}
	 */
	proto.device.GatewaySchema.prototype.addConfigs = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.device.ConfigSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.GatewaySchema} returns this
	 */
	proto.device.GatewaySchema.prototype.clearConfigsList = function() {
	  return this.setConfigsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceId.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceId}
	 */
	proto.device.DeviceId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceId;
	  return proto.device.DeviceId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceId}
	 */
	proto.device.DeviceId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.DeviceId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.DeviceId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.DeviceId} returns this
	 */
	proto.device.DeviceId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewayId.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewayId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewayId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewayId}
	 */
	proto.device.GatewayId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewayId;
	  return proto.device.GatewayId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewayId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewayId}
	 */
	proto.device.GatewayId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewayId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewayId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.GatewayId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.GatewayId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.GatewayId} returns this
	 */
	proto.device.GatewayId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.DeviceIds.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceIds.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceIds.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceIds} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceIds.toObject = function(includeInstance, msg) {
	  var obj = {
	idsList: msg.getIdsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceIds}
	 */
	proto.device.DeviceIds.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceIds;
	  return proto.device.DeviceIds.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceIds} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceIds}
	 */
	proto.device.DeviceIds.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addIds(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceIds.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceIds.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceIds} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceIds.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.device.DeviceIds.prototype.getIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes ids = 1;
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<string>}
	 */
	proto.device.DeviceIds.prototype.getIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getIdsList()));
	};


	/**
	 * repeated bytes ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.device.DeviceIds.prototype.getIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.device.DeviceIds} returns this
	 */
	proto.device.DeviceIds.prototype.setIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.device.DeviceIds} returns this
	 */
	proto.device.DeviceIds.prototype.addIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.DeviceIds} returns this
	 */
	proto.device.DeviceIds.prototype.clearIdsList = function() {
	  return this.setIdsList([]);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.GatewayIds.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewayIds.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewayIds.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewayIds} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayIds.toObject = function(includeInstance, msg) {
	  var obj = {
	idsList: msg.getIdsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewayIds}
	 */
	proto.device.GatewayIds.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewayIds;
	  return proto.device.GatewayIds.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewayIds} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewayIds}
	 */
	proto.device.GatewayIds.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addIds(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayIds.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewayIds.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewayIds} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayIds.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.device.GatewayIds.prototype.getIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes ids = 1;
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<string>}
	 */
	proto.device.GatewayIds.prototype.getIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getIdsList()));
	};


	/**
	 * repeated bytes ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.device.GatewayIds.prototype.getIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.device.GatewayIds} returns this
	 */
	proto.device.GatewayIds.prototype.setIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.device.GatewayIds} returns this
	 */
	proto.device.GatewayIds.prototype.addIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.GatewayIds} returns this
	 */
	proto.device.GatewayIds.prototype.clearIdsList = function() {
	  return this.setIdsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.SerialNumber.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.SerialNumber.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.SerialNumber} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.SerialNumber.toObject = function(includeInstance, msg) {
	  var obj = {
	serialNumber: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.SerialNumber}
	 */
	proto.device.SerialNumber.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.SerialNumber;
	  return proto.device.SerialNumber.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.SerialNumber} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.SerialNumber}
	 */
	proto.device.SerialNumber.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setSerialNumber(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.SerialNumber.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.SerialNumber.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.SerialNumber} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.SerialNumber.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSerialNumber();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string serial_number = 1;
	 * @return {string}
	 */
	proto.device.SerialNumber.prototype.getSerialNumber = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.SerialNumber} returns this
	 */
	proto.device.SerialNumber.prototype.setSerialNumber = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceName.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceName.toObject = function(includeInstance, msg) {
	  var obj = {
	name: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceName}
	 */
	proto.device.DeviceName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceName;
	  return proto.device.DeviceName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceName}
	 */
	proto.device.DeviceName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.device.DeviceName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.DeviceName} returns this
	 */
	proto.device.DeviceName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewayName.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewayName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewayName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayName.toObject = function(includeInstance, msg) {
	  var obj = {
	name: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewayName}
	 */
	proto.device.GatewayName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewayName;
	  return proto.device.GatewayName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewayName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewayName}
	 */
	proto.device.GatewayName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewayName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewayName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.device.GatewayName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.GatewayName} returns this
	 */
	proto.device.GatewayName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceOption.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceOption.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceOption} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceOption.toObject = function(includeInstance, msg) {
	  var f, obj = {
	gatewayId: msg.getGatewayId_asB64(),
	typeId: msg.getTypeId_asB64(),
	name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceOption}
	 */
	proto.device.DeviceOption.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceOption;
	  return proto.device.DeviceOption.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceOption} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceOption}
	 */
	proto.device.DeviceOption.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setGatewayId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTypeId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceOption.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceOption.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceOption} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceOption.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes gateway_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.DeviceOption.prototype.getGatewayId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes gateway_id = 1;
	 * This is a type-conversion wrapper around `getGatewayId()`
	 * @return {string}
	 */
	proto.device.DeviceOption.prototype.getGatewayId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getGatewayId()));
	};


	/**
	 * optional bytes gateway_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getGatewayId()`
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceOption.prototype.getGatewayId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getGatewayId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.DeviceOption} returns this
	 */
	proto.device.DeviceOption.prototype.setGatewayId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.DeviceOption} returns this
	 */
	proto.device.DeviceOption.prototype.clearGatewayId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceOption.prototype.hasGatewayId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes type_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.DeviceOption.prototype.getTypeId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes type_id = 2;
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {string}
	 */
	proto.device.DeviceOption.prototype.getTypeId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTypeId()));
	};


	/**
	 * optional bytes type_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceOption.prototype.getTypeId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTypeId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.DeviceOption} returns this
	 */
	proto.device.DeviceOption.prototype.setTypeId = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.DeviceOption} returns this
	 */
	proto.device.DeviceOption.prototype.clearTypeId = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceOption.prototype.hasTypeId = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.device.DeviceOption.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.DeviceOption} returns this
	 */
	proto.device.DeviceOption.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.DeviceOption} returns this
	 */
	proto.device.DeviceOption.prototype.clearName = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceOption.prototype.hasName = function() {
	  return jspb.Message.getField(this, 3) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewayOption.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewayOption.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewayOption} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayOption.toObject = function(includeInstance, msg) {
	  var f, obj = {
	typeId: msg.getTypeId_asB64(),
	name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewayOption}
	 */
	proto.device.GatewayOption.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewayOption;
	  return proto.device.GatewayOption.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewayOption} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewayOption}
	 */
	proto.device.GatewayOption.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTypeId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayOption.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewayOption.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewayOption} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayOption.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes type_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.GatewayOption.prototype.getTypeId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes type_id = 1;
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {string}
	 */
	proto.device.GatewayOption.prototype.getTypeId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTypeId()));
	};


	/**
	 * optional bytes type_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayOption.prototype.getTypeId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTypeId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.GatewayOption} returns this
	 */
	proto.device.GatewayOption.prototype.setTypeId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.GatewayOption} returns this
	 */
	proto.device.GatewayOption.prototype.clearTypeId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.GatewayOption.prototype.hasTypeId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.device.GatewayOption.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.GatewayOption} returns this
	 */
	proto.device.GatewayOption.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.GatewayOption} returns this
	 */
	proto.device.GatewayOption.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.GatewayOption.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	gatewayId: msg.getGatewayId_asB64(),
	serialNumber: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	name: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
	description: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
	typeId: msg.getTypeId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceUpdate}
	 */
	proto.device.DeviceUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceUpdate;
	  return proto.device.DeviceUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceUpdate}
	 */
	proto.device.DeviceUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setGatewayId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setSerialNumber(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 6:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTypeId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
	  if (f != null) {
	    writer.writeBytes(
	      6,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.DeviceUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.DeviceUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes gateway_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.DeviceUpdate.prototype.getGatewayId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes gateway_id = 2;
	 * This is a type-conversion wrapper around `getGatewayId()`
	 * @return {string}
	 */
	proto.device.DeviceUpdate.prototype.getGatewayId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getGatewayId()));
	};


	/**
	 * optional bytes gateway_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getGatewayId()`
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceUpdate.prototype.getGatewayId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getGatewayId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.setGatewayId = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.clearGatewayId = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceUpdate.prototype.hasGatewayId = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string serial_number = 3;
	 * @return {string}
	 */
	proto.device.DeviceUpdate.prototype.getSerialNumber = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.setSerialNumber = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.clearSerialNumber = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceUpdate.prototype.hasSerialNumber = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional string name = 4;
	 * @return {string}
	 */
	proto.device.DeviceUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional string description = 5;
	 * @return {string}
	 */
	proto.device.DeviceUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 5) != null;
	};


	/**
	 * optional bytes type_id = 6;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.DeviceUpdate.prototype.getTypeId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
	};


	/**
	 * optional bytes type_id = 6;
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {string}
	 */
	proto.device.DeviceUpdate.prototype.getTypeId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTypeId()));
	};


	/**
	 * optional bytes type_id = 6;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceUpdate.prototype.getTypeId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTypeId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.setTypeId = function(value) {
	  return jspb.Message.setField(this, 6, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.DeviceUpdate} returns this
	 */
	proto.device.DeviceUpdate.prototype.clearTypeId = function() {
	  return jspb.Message.setField(this, 6, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceUpdate.prototype.hasTypeId = function() {
	  return jspb.Message.getField(this, 6) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewayUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewayUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewayUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	serialNumber: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	description: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
	typeId: msg.getTypeId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewayUpdate}
	 */
	proto.device.GatewayUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewayUpdate;
	  return proto.device.GatewayUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewayUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewayUpdate}
	 */
	proto.device.GatewayUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setSerialNumber(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 5:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTypeId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewayUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewayUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeBytes(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.GatewayUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.GatewayUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.GatewayUpdate} returns this
	 */
	proto.device.GatewayUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string serial_number = 2;
	 * @return {string}
	 */
	proto.device.GatewayUpdate.prototype.getSerialNumber = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.GatewayUpdate} returns this
	 */
	proto.device.GatewayUpdate.prototype.setSerialNumber = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.GatewayUpdate} returns this
	 */
	proto.device.GatewayUpdate.prototype.clearSerialNumber = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.GatewayUpdate.prototype.hasSerialNumber = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.device.GatewayUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.GatewayUpdate} returns this
	 */
	proto.device.GatewayUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.GatewayUpdate} returns this
	 */
	proto.device.GatewayUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.GatewayUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.device.GatewayUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.GatewayUpdate} returns this
	 */
	proto.device.GatewayUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.GatewayUpdate} returns this
	 */
	proto.device.GatewayUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.GatewayUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional bytes type_id = 5;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.GatewayUpdate.prototype.getTypeId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * optional bytes type_id = 5;
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {string}
	 */
	proto.device.GatewayUpdate.prototype.getTypeId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTypeId()));
	};


	/**
	 * optional bytes type_id = 5;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayUpdate.prototype.getTypeId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTypeId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.GatewayUpdate} returns this
	 */
	proto.device.GatewayUpdate.prototype.setTypeId = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.GatewayUpdate} returns this
	 */
	proto.device.GatewayUpdate.prototype.clearTypeId = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.GatewayUpdate.prototype.hasTypeId = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.ConfigSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.ConfigSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.ConfigSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0),
	deviceId: msg.getDeviceId_asB64(),
	name: jspb.Message.getFieldWithDefault(msg, 3, ""),
	configBytes: msg.getConfigBytes_asB64(),
	configType: jspb.Message.getFieldWithDefault(msg, 5, 0),
	category: jspb.Message.getFieldWithDefault(msg, 6, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.ConfigSchema}
	 */
	proto.device.ConfigSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.ConfigSchema;
	  return proto.device.ConfigSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.ConfigSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.ConfigSchema}
	 */
	proto.device.ConfigSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setConfigBytes(value);
	      break;
	    case 5:
	      var value = /** @type {!proto.common.DataType} */ (reader.readEnum());
	      msg.setConfigType(value);
	      break;
	    case 6:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.ConfigSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.ConfigSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getConfigBytes_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	  f = message.getConfigType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      5,
	      f
	    );
	  }
	  f = message.getCategory();
	  if (f.length > 0) {
	    writer.writeString(
	      6,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.device.ConfigSchema.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.device.ConfigSchema} returns this
	 */
	proto.device.ConfigSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes device_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.ConfigSchema.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id = 2;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.device.ConfigSchema.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigSchema.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.ConfigSchema} returns this
	 */
	proto.device.ConfigSchema.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.device.ConfigSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.ConfigSchema} returns this
	 */
	proto.device.ConfigSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional bytes config_bytes = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.ConfigSchema.prototype.getConfigBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes config_bytes = 4;
	 * This is a type-conversion wrapper around `getConfigBytes()`
	 * @return {string}
	 */
	proto.device.ConfigSchema.prototype.getConfigBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getConfigBytes()));
	};


	/**
	 * optional bytes config_bytes = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getConfigBytes()`
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigSchema.prototype.getConfigBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getConfigBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.ConfigSchema} returns this
	 */
	proto.device.ConfigSchema.prototype.setConfigBytes = function(value) {
	  return jspb.Message.setProto3BytesField(this, 4, value);
	};


	/**
	 * optional common.DataType config_type = 5;
	 * @return {!proto.common.DataType}
	 */
	proto.device.ConfigSchema.prototype.getConfigType = function() {
	  return /** @type {!proto.common.DataType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @return {!proto.device.ConfigSchema} returns this
	 */
	proto.device.ConfigSchema.prototype.setConfigType = function(value) {
	  return jspb.Message.setProto3EnumField(this, 5, value);
	};


	/**
	 * optional string category = 6;
	 * @return {string}
	 */
	proto.device.ConfigSchema.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.ConfigSchema} returns this
	 */
	proto.device.ConfigSchema.prototype.setCategory = function(value) {
	  return jspb.Message.setProto3StringField(this, 6, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.ConfigId.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.ConfigId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.ConfigId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.ConfigId}
	 */
	proto.device.ConfigId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.ConfigId;
	  return proto.device.ConfigId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.ConfigId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.ConfigId}
	 */
	proto.device.ConfigId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.ConfigId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.ConfigId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.device.ConfigId.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.device.ConfigId} returns this
	 */
	proto.device.ConfigId.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.ConfigUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.ConfigUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.ConfigUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0),
	name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	configBytes: msg.getConfigBytes_asB64(),
	configType: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
	category: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.ConfigUpdate}
	 */
	proto.device.ConfigUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.ConfigUpdate;
	  return proto.device.ConfigUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.ConfigUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.ConfigUpdate}
	 */
	proto.device.ConfigUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setConfigBytes(value);
	      break;
	    case 4:
	      var value = /** @type {!proto.common.DataType} */ (reader.readEnum());
	      msg.setConfigType(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.ConfigUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.ConfigUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = /** @type {!proto.common.DataType} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeEnum(
	      4,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.device.ConfigUpdate.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.device.ConfigUpdate} returns this
	 */
	proto.device.ConfigUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.device.ConfigUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.ConfigUpdate} returns this
	 */
	proto.device.ConfigUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.ConfigUpdate} returns this
	 */
	proto.device.ConfigUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.ConfigUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional bytes config_bytes = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.ConfigUpdate.prototype.getConfigBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes config_bytes = 3;
	 * This is a type-conversion wrapper around `getConfigBytes()`
	 * @return {string}
	 */
	proto.device.ConfigUpdate.prototype.getConfigBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getConfigBytes()));
	};


	/**
	 * optional bytes config_bytes = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getConfigBytes()`
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigUpdate.prototype.getConfigBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getConfigBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.ConfigUpdate} returns this
	 */
	proto.device.ConfigUpdate.prototype.setConfigBytes = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.ConfigUpdate} returns this
	 */
	proto.device.ConfigUpdate.prototype.clearConfigBytes = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.ConfigUpdate.prototype.hasConfigBytes = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional common.DataType config_type = 4;
	 * @return {!proto.common.DataType}
	 */
	proto.device.ConfigUpdate.prototype.getConfigType = function() {
	  return /** @type {!proto.common.DataType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @return {!proto.device.ConfigUpdate} returns this
	 */
	proto.device.ConfigUpdate.prototype.setConfigType = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.ConfigUpdate} returns this
	 */
	proto.device.ConfigUpdate.prototype.clearConfigType = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.ConfigUpdate.prototype.hasConfigType = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional string category = 5;
	 * @return {string}
	 */
	proto.device.ConfigUpdate.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.ConfigUpdate} returns this
	 */
	proto.device.ConfigUpdate.prototype.setCategory = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.ConfigUpdate} returns this
	 */
	proto.device.ConfigUpdate.prototype.clearCategory = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.ConfigUpdate.prototype.hasCategory = function() {
	  return jspb.Message.getField(this, 5) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.TypeSchema.repeatedFields_ = [4];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64(),
	name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	description: jspb.Message.getFieldWithDefault(msg, 3, ""),
	modelsList: msg.getModelsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeSchema}
	 */
	proto.device.TypeSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeSchema;
	  return proto.device.TypeSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeSchema}
	 */
	proto.device.TypeSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addModels(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getModelsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.TypeSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.TypeSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.TypeSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.TypeSchema} returns this
	 */
	proto.device.TypeSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.device.TypeSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.TypeSchema} returns this
	 */
	proto.device.TypeSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string description = 3;
	 * @return {string}
	 */
	proto.device.TypeSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.TypeSchema} returns this
	 */
	proto.device.TypeSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * repeated bytes models = 4;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.device.TypeSchema.prototype.getModelsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
	};


	/**
	 * repeated bytes models = 4;
	 * This is a type-conversion wrapper around `getModelsList()`
	 * @return {!Array<string>}
	 */
	proto.device.TypeSchema.prototype.getModelsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getModelsList()));
	};


	/**
	 * repeated bytes models = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.device.TypeSchema.prototype.getModelsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getModelsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.device.TypeSchema} returns this
	 */
	proto.device.TypeSchema.prototype.setModelsList = function(value) {
	  return jspb.Message.setField(this, 4, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.device.TypeSchema} returns this
	 */
	proto.device.TypeSchema.prototype.addModels = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.TypeSchema} returns this
	 */
	proto.device.TypeSchema.prototype.clearModelsList = function() {
	  return this.setModelsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeId.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeId}
	 */
	proto.device.TypeId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeId;
	  return proto.device.TypeId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeId}
	 */
	proto.device.TypeId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.TypeId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.TypeId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.TypeId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.TypeId} returns this
	 */
	proto.device.TypeId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.TypeIds.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeIds.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeIds.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeIds} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeIds.toObject = function(includeInstance, msg) {
	  var obj = {
	idsList: msg.getIdsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeIds}
	 */
	proto.device.TypeIds.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeIds;
	  return proto.device.TypeIds.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeIds} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeIds}
	 */
	proto.device.TypeIds.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addIds(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeIds.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeIds.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeIds} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeIds.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.device.TypeIds.prototype.getIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes ids = 1;
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<string>}
	 */
	proto.device.TypeIds.prototype.getIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getIdsList()));
	};


	/**
	 * repeated bytes ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.device.TypeIds.prototype.getIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.device.TypeIds} returns this
	 */
	proto.device.TypeIds.prototype.setIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.device.TypeIds} returns this
	 */
	proto.device.TypeIds.prototype.addIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.TypeIds} returns this
	 */
	proto.device.TypeIds.prototype.clearIdsList = function() {
	  return this.setIdsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeName.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeName.toObject = function(includeInstance, msg) {
	  var obj = {
	name: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeName}
	 */
	proto.device.TypeName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeName;
	  return proto.device.TypeName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeName}
	 */
	proto.device.TypeName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.device.TypeName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.TypeName} returns this
	 */
	proto.device.TypeName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeOption.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeOption.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeOption} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeOption.toObject = function(includeInstance, msg) {
	  var f, obj = {
	name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeOption}
	 */
	proto.device.TypeOption.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeOption;
	  return proto.device.TypeOption.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeOption} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeOption}
	 */
	proto.device.TypeOption.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeOption.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeOption.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeOption} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeOption.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {string} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.device.TypeOption.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.TypeOption} returns this
	 */
	proto.device.TypeOption.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.TypeOption} returns this
	 */
	proto.device.TypeOption.prototype.clearName = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.TypeOption.prototype.hasName = function() {
	  return jspb.Message.getField(this, 1) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	description: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeUpdate}
	 */
	proto.device.TypeUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeUpdate;
	  return proto.device.TypeUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeUpdate}
	 */
	proto.device.TypeUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.TypeUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.TypeUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.TypeUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.TypeUpdate} returns this
	 */
	proto.device.TypeUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.device.TypeUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.TypeUpdate} returns this
	 */
	proto.device.TypeUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.TypeUpdate} returns this
	 */
	proto.device.TypeUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.TypeUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string description = 3;
	 * @return {string}
	 */
	proto.device.TypeUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.device.TypeUpdate} returns this
	 */
	proto.device.TypeUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.device.TypeUpdate} returns this
	 */
	proto.device.TypeUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.TypeUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 3) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeModel.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeModel.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeModel} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeModel.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64(),
	modelId: msg.getModelId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeModel}
	 */
	proto.device.TypeModel.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeModel;
	  return proto.device.TypeModel.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeModel} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeModel}
	 */
	proto.device.TypeModel.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeModel.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeModel.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeModel} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeModel.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.TypeModel.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.TypeModel.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.TypeModel.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.TypeModel} returns this
	 */
	proto.device.TypeModel.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.TypeModel.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.device.TypeModel.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.device.TypeModel.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.TypeModel} returns this
	 */
	proto.device.TypeModel.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.device.DeviceSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceReadResponse}
	 */
	proto.device.DeviceReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceReadResponse;
	  return proto.device.DeviceReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceReadResponse}
	 */
	proto.device.DeviceReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.device.DeviceSchema;
	      reader.readMessage(value,proto.device.DeviceSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.device.DeviceSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional DeviceSchema result = 1;
	 * @return {?proto.device.DeviceSchema}
	 */
	proto.device.DeviceReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.device.DeviceSchema} */ (
	    jspb.Message.getWrapperField(this, proto.device.DeviceSchema, 1));
	};


	/**
	 * @param {?proto.device.DeviceSchema|undefined} value
	 * @return {!proto.device.DeviceReadResponse} returns this
	*/
	proto.device.DeviceReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.device.DeviceReadResponse} returns this
	 */
	proto.device.DeviceReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.DeviceReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.DeviceListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.device.DeviceSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceListResponse}
	 */
	proto.device.DeviceListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceListResponse;
	  return proto.device.DeviceListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceListResponse}
	 */
	proto.device.DeviceListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.device.DeviceSchema;
	      reader.readMessage(value,proto.device.DeviceSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.device.DeviceSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated DeviceSchema results = 1;
	 * @return {!Array<!proto.device.DeviceSchema>}
	 */
	proto.device.DeviceListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.device.DeviceSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.device.DeviceSchema, 1));
	};


	/**
	 * @param {!Array<!proto.device.DeviceSchema>} value
	 * @return {!proto.device.DeviceListResponse} returns this
	*/
	proto.device.DeviceListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.device.DeviceSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.device.DeviceSchema}
	 */
	proto.device.DeviceListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.device.DeviceSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.DeviceListResponse} returns this
	 */
	proto.device.DeviceListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceCreateResponse}
	 */
	proto.device.DeviceCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceCreateResponse;
	  return proto.device.DeviceCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceCreateResponse}
	 */
	proto.device.DeviceCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.DeviceCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.DeviceCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.DeviceCreateResponse} returns this
	 */
	proto.device.DeviceCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.DeviceChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.DeviceChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.DeviceChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.DeviceChangeResponse}
	 */
	proto.device.DeviceChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.DeviceChangeResponse;
	  return proto.device.DeviceChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.DeviceChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.DeviceChangeResponse}
	 */
	proto.device.DeviceChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.DeviceChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.DeviceChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.DeviceChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.DeviceChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewayReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewayReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewayReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.device.GatewaySchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewayReadResponse}
	 */
	proto.device.GatewayReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewayReadResponse;
	  return proto.device.GatewayReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewayReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewayReadResponse}
	 */
	proto.device.GatewayReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.device.GatewaySchema;
	      reader.readMessage(value,proto.device.GatewaySchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewayReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewayReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.device.GatewaySchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional GatewaySchema result = 1;
	 * @return {?proto.device.GatewaySchema}
	 */
	proto.device.GatewayReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.device.GatewaySchema} */ (
	    jspb.Message.getWrapperField(this, proto.device.GatewaySchema, 1));
	};


	/**
	 * @param {?proto.device.GatewaySchema|undefined} value
	 * @return {!proto.device.GatewayReadResponse} returns this
	*/
	proto.device.GatewayReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.device.GatewayReadResponse} returns this
	 */
	proto.device.GatewayReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.GatewayReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.GatewayListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewayListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewayListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewayListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.device.GatewaySchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewayListResponse}
	 */
	proto.device.GatewayListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewayListResponse;
	  return proto.device.GatewayListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewayListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewayListResponse}
	 */
	proto.device.GatewayListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.device.GatewaySchema;
	      reader.readMessage(value,proto.device.GatewaySchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewayListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewayListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.device.GatewaySchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated GatewaySchema results = 1;
	 * @return {!Array<!proto.device.GatewaySchema>}
	 */
	proto.device.GatewayListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.device.GatewaySchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.device.GatewaySchema, 1));
	};


	/**
	 * @param {!Array<!proto.device.GatewaySchema>} value
	 * @return {!proto.device.GatewayListResponse} returns this
	*/
	proto.device.GatewayListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.device.GatewaySchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.device.GatewaySchema}
	 */
	proto.device.GatewayListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.device.GatewaySchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.GatewayListResponse} returns this
	 */
	proto.device.GatewayListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewayCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewayCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewayCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewayCreateResponse}
	 */
	proto.device.GatewayCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewayCreateResponse;
	  return proto.device.GatewayCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewayCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewayCreateResponse}
	 */
	proto.device.GatewayCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewayCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewayCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.GatewayCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.GatewayCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.GatewayCreateResponse} returns this
	 */
	proto.device.GatewayCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.GatewayChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.GatewayChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.GatewayChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.GatewayChangeResponse}
	 */
	proto.device.GatewayChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.GatewayChangeResponse;
	  return proto.device.GatewayChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.GatewayChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.GatewayChangeResponse}
	 */
	proto.device.GatewayChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.GatewayChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.GatewayChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.GatewayChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.GatewayChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.ConfigReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.ConfigReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.ConfigReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.device.ConfigSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.ConfigReadResponse}
	 */
	proto.device.ConfigReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.ConfigReadResponse;
	  return proto.device.ConfigReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.ConfigReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.ConfigReadResponse}
	 */
	proto.device.ConfigReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.device.ConfigSchema;
	      reader.readMessage(value,proto.device.ConfigSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.ConfigReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.ConfigReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.device.ConfigSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional ConfigSchema result = 1;
	 * @return {?proto.device.ConfigSchema}
	 */
	proto.device.ConfigReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.device.ConfigSchema} */ (
	    jspb.Message.getWrapperField(this, proto.device.ConfigSchema, 1));
	};


	/**
	 * @param {?proto.device.ConfigSchema|undefined} value
	 * @return {!proto.device.ConfigReadResponse} returns this
	*/
	proto.device.ConfigReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.device.ConfigReadResponse} returns this
	 */
	proto.device.ConfigReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.ConfigReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.ConfigListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.ConfigListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.ConfigListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.ConfigListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.device.ConfigSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.ConfigListResponse}
	 */
	proto.device.ConfigListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.ConfigListResponse;
	  return proto.device.ConfigListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.ConfigListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.ConfigListResponse}
	 */
	proto.device.ConfigListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.device.ConfigSchema;
	      reader.readMessage(value,proto.device.ConfigSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.ConfigListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.ConfigListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.device.ConfigSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated ConfigSchema results = 1;
	 * @return {!Array<!proto.device.ConfigSchema>}
	 */
	proto.device.ConfigListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.device.ConfigSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.device.ConfigSchema, 1));
	};


	/**
	 * @param {!Array<!proto.device.ConfigSchema>} value
	 * @return {!proto.device.ConfigListResponse} returns this
	*/
	proto.device.ConfigListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.device.ConfigSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.device.ConfigSchema}
	 */
	proto.device.ConfigListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.device.ConfigSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.ConfigListResponse} returns this
	 */
	proto.device.ConfigListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.ConfigCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.ConfigCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.ConfigCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.ConfigCreateResponse}
	 */
	proto.device.ConfigCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.ConfigCreateResponse;
	  return proto.device.ConfigCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.ConfigCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.ConfigCreateResponse}
	 */
	proto.device.ConfigCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.ConfigCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.ConfigCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.device.ConfigCreateResponse.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.device.ConfigCreateResponse} returns this
	 */
	proto.device.ConfigCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.ConfigChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.ConfigChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.ConfigChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.ConfigChangeResponse}
	 */
	proto.device.ConfigChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.ConfigChangeResponse;
	  return proto.device.ConfigChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.ConfigChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.ConfigChangeResponse}
	 */
	proto.device.ConfigChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.ConfigChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.ConfigChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.ConfigChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.ConfigChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.device.TypeSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeReadResponse}
	 */
	proto.device.TypeReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeReadResponse;
	  return proto.device.TypeReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeReadResponse}
	 */
	proto.device.TypeReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.device.TypeSchema;
	      reader.readMessage(value,proto.device.TypeSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.device.TypeSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional TypeSchema result = 1;
	 * @return {?proto.device.TypeSchema}
	 */
	proto.device.TypeReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.device.TypeSchema} */ (
	    jspb.Message.getWrapperField(this, proto.device.TypeSchema, 1));
	};


	/**
	 * @param {?proto.device.TypeSchema|undefined} value
	 * @return {!proto.device.TypeReadResponse} returns this
	*/
	proto.device.TypeReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.device.TypeReadResponse} returns this
	 */
	proto.device.TypeReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.device.TypeReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.device.TypeListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.device.TypeSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeListResponse}
	 */
	proto.device.TypeListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeListResponse;
	  return proto.device.TypeListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeListResponse}
	 */
	proto.device.TypeListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.device.TypeSchema;
	      reader.readMessage(value,proto.device.TypeSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.device.TypeSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated TypeSchema results = 1;
	 * @return {!Array<!proto.device.TypeSchema>}
	 */
	proto.device.TypeListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.device.TypeSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.device.TypeSchema, 1));
	};


	/**
	 * @param {!Array<!proto.device.TypeSchema>} value
	 * @return {!proto.device.TypeListResponse} returns this
	*/
	proto.device.TypeListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.device.TypeSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.device.TypeSchema}
	 */
	proto.device.TypeListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.device.TypeSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.device.TypeListResponse} returns this
	 */
	proto.device.TypeListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeCreateResponse}
	 */
	proto.device.TypeCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeCreateResponse;
	  return proto.device.TypeCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeCreateResponse}
	 */
	proto.device.TypeCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.device.TypeCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.device.TypeCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.device.TypeCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.device.TypeCreateResponse} returns this
	 */
	proto.device.TypeCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.device.TypeChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.device.TypeChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.device.TypeChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.device.TypeChangeResponse}
	 */
	proto.device.TypeChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.device.TypeChangeResponse;
	  return proto.device.TypeChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.device.TypeChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.device.TypeChangeResponse}
	 */
	proto.device.TypeChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.device.TypeChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.device.TypeChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.device.TypeChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.device.TypeChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.device); 
} (device_pb));

/**
 * @fileoverview gRPC-Web generated client stub for device
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_resource_api/device.proto


/* eslint-disable */
// @ts-nocheck



const grpc$6 = {};
grpc$6.web = require$$0$1;
const proto$7 = {};
proto$7.device = device_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$7.device.DeviceServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$6.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$7.device.DeviceServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$6.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceId,
 *   !proto.device.DeviceReadResponse>}
 */
const methodDescriptor_DeviceService_ReadDevice = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ReadDevice',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.DeviceId,
  proto$7.device.DeviceReadResponse,
  /**
   * @param {!proto.device.DeviceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.readDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDevice,
      callback);
};


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceReadResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.readDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.SerialNumber,
 *   !proto.device.DeviceReadResponse>}
 */
const methodDescriptor_DeviceService_ReadDeviceBySn = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ReadDeviceBySn',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.SerialNumber,
  proto$7.device.DeviceReadResponse,
  /**
   * @param {!proto.device.SerialNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.SerialNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.readDeviceBySn =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadDeviceBySn',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDeviceBySn,
      callback);
};


/**
 * @param {!proto.device.SerialNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceReadResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.readDeviceBySn =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadDeviceBySn',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDeviceBySn);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceIds,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceByIds = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceByIds',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.DeviceIds,
  proto$7.device.DeviceListResponse,
  /**
   * @param {!proto.device.DeviceIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listDeviceByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByIds,
      callback);
};


/**
 * @param {!proto.device.DeviceIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listDeviceByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayId,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceByGateway = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceByGateway',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.GatewayId,
  proto$7.device.DeviceListResponse,
  /**
   * @param {!proto.device.GatewayId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listDeviceByGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByGateway,
      callback);
};


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listDeviceByGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeId,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceByType = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceByType',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeId,
  proto$7.device.DeviceListResponse,
  /**
   * @param {!proto.device.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listDeviceByType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByType,
      callback);
};


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listDeviceByType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceName,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceByName = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceByName',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.DeviceName,
  proto$7.device.DeviceListResponse,
  /**
   * @param {!proto.device.DeviceName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listDeviceByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByName,
      callback);
};


/**
 * @param {!proto.device.DeviceName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listDeviceByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceOption,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceOption = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceOption',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.DeviceOption,
  proto$7.device.DeviceListResponse,
  /**
   * @param {!proto.device.DeviceOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listDeviceOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceOption,
      callback);
};


/**
 * @param {!proto.device.DeviceOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listDeviceOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceSchema,
 *   !proto.device.DeviceCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateDevice = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/CreateDevice',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.DeviceSchema,
  proto$7.device.DeviceCreateResponse,
  /**
   * @param {!proto.device.DeviceSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.createDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateDevice,
      callback);
};


/**
 * @param {!proto.device.DeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceCreateResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.createDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceUpdate,
 *   !proto.device.DeviceChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateDevice = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/UpdateDevice',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.DeviceUpdate,
  proto$7.device.DeviceChangeResponse,
  /**
   * @param {!proto.device.DeviceUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.updateDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateDevice,
      callback);
};


/**
 * @param {!proto.device.DeviceUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.updateDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceId,
 *   !proto.device.DeviceChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteDevice = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/DeleteDevice',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.DeviceId,
  proto$7.device.DeviceChangeResponse,
  /**
   * @param {!proto.device.DeviceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.DeviceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.deleteDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteDevice,
      callback);
};


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.deleteDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayId,
 *   !proto.device.GatewayReadResponse>}
 */
const methodDescriptor_DeviceService_ReadGateway = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ReadGateway',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.GatewayId,
  proto$7.device.GatewayReadResponse,
  /**
   * @param {!proto.device.GatewayId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.GatewayReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.readGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGateway,
      callback);
};


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayReadResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.readGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.SerialNumber,
 *   !proto.device.GatewayReadResponse>}
 */
const methodDescriptor_DeviceService_ReadGatewayBySn = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ReadGatewayBySn',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.SerialNumber,
  proto$7.device.GatewayReadResponse,
  /**
   * @param {!proto.device.SerialNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.GatewayReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.SerialNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.readGatewayBySn =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadGatewayBySn',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGatewayBySn,
      callback);
};


/**
 * @param {!proto.device.SerialNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayReadResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.readGatewayBySn =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadGatewayBySn',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGatewayBySn);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayIds,
 *   !proto.device.GatewayListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayByIds = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayByIds',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.GatewayIds,
  proto$7.device.GatewayListResponse,
  /**
   * @param {!proto.device.GatewayIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.GatewayListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listGatewayByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByIds,
      callback);
};


/**
 * @param {!proto.device.GatewayIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listGatewayByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeId,
 *   !proto.device.GatewayListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayByType = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayByType',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeId,
  proto$7.device.GatewayListResponse,
  /**
   * @param {!proto.device.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.GatewayListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listGatewayByType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByType,
      callback);
};


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listGatewayByType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayName,
 *   !proto.device.GatewayListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayByName = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayByName',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.GatewayName,
  proto$7.device.GatewayListResponse,
  /**
   * @param {!proto.device.GatewayName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.GatewayListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listGatewayByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByName,
      callback);
};


/**
 * @param {!proto.device.GatewayName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listGatewayByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayOption,
 *   !proto.device.GatewayListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayOption = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayOption',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.GatewayOption,
  proto$7.device.GatewayListResponse,
  /**
   * @param {!proto.device.GatewayOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.GatewayListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listGatewayOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayOption,
      callback);
};


/**
 * @param {!proto.device.GatewayOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listGatewayOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewaySchema,
 *   !proto.device.GatewayCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateGateway = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/CreateGateway',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.GatewaySchema,
  proto$7.device.GatewayCreateResponse,
  /**
   * @param {!proto.device.GatewaySchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.GatewayCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewaySchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.createGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateGateway,
      callback);
};


/**
 * @param {!proto.device.GatewaySchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayCreateResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.createGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayUpdate,
 *   !proto.device.GatewayChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateGateway = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/UpdateGateway',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.GatewayUpdate,
  proto$7.device.GatewayChangeResponse,
  /**
   * @param {!proto.device.GatewayUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.GatewayChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.updateGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateGateway,
      callback);
};


/**
 * @param {!proto.device.GatewayUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.updateGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayId,
 *   !proto.device.GatewayChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteGateway = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/DeleteGateway',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.GatewayId,
  proto$7.device.GatewayChangeResponse,
  /**
   * @param {!proto.device.GatewayId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.GatewayChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.deleteGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteGateway,
      callback);
};


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.deleteGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigId,
 *   !proto.device.ConfigReadResponse>}
 */
const methodDescriptor_DeviceService_ReadDeviceConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ReadDeviceConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.ConfigId,
  proto$7.device.ConfigReadResponse,
  /**
   * @param {!proto.device.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.readDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigReadResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.readDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceId,
 *   !proto.device.ConfigListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.DeviceId,
  proto$7.device.ConfigListResponse,
  /**
   * @param {!proto.device.DeviceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigListResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigSchema,
 *   !proto.device.ConfigCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateDeviceConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/CreateDeviceConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.ConfigSchema,
  proto$7.device.ConfigCreateResponse,
  /**
   * @param {!proto.device.ConfigSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.createDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigCreateResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.createDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigUpdate,
 *   !proto.device.ConfigChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateDeviceConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/UpdateDeviceConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.ConfigUpdate,
  proto$7.device.ConfigChangeResponse,
  /**
   * @param {!proto.device.ConfigUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.updateDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.updateDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigId,
 *   !proto.device.ConfigChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteDeviceConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/DeleteDeviceConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.ConfigId,
  proto$7.device.ConfigChangeResponse,
  /**
   * @param {!proto.device.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.deleteDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.deleteDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigId,
 *   !proto.device.ConfigReadResponse>}
 */
const methodDescriptor_DeviceService_ReadGatewayConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ReadGatewayConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.ConfigId,
  proto$7.device.ConfigReadResponse,
  /**
   * @param {!proto.device.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.readGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigReadResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.readGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayId,
 *   !proto.device.ConfigListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.GatewayId,
  proto$7.device.ConfigListResponse,
  /**
   * @param {!proto.device.GatewayId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigSchema,
 *   !proto.device.ConfigCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateGatewayConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/CreateGatewayConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.ConfigSchema,
  proto$7.device.ConfigCreateResponse,
  /**
   * @param {!proto.device.ConfigSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.createGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigCreateResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.createGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigUpdate,
 *   !proto.device.ConfigChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateGatewayConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/UpdateGatewayConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.ConfigUpdate,
  proto$7.device.ConfigChangeResponse,
  /**
   * @param {!proto.device.ConfigUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.updateGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.updateGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigId,
 *   !proto.device.ConfigChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteGatewayConfig = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/DeleteGatewayConfig',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.ConfigId,
  proto$7.device.ConfigChangeResponse,
  /**
   * @param {!proto.device.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.deleteGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.deleteGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeId,
 *   !proto.device.TypeReadResponse>}
 */
const methodDescriptor_DeviceService_ReadType = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ReadType',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeId,
  proto$7.device.TypeReadResponse,
  /**
   * @param {!proto.device.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.TypeReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.readType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadType,
      callback);
};


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeReadResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.readType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeIds,
 *   !proto.device.TypeListResponse>}
 */
const methodDescriptor_DeviceService_ListTypeByIds = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListTypeByIds',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeIds,
  proto$7.device.TypeListResponse,
  /**
   * @param {!proto.device.TypeIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.TypeListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listTypeByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListTypeByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeByIds,
      callback);
};


/**
 * @param {!proto.device.TypeIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listTypeByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListTypeByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeName,
 *   !proto.device.TypeListResponse>}
 */
const methodDescriptor_DeviceService_ListTypeByName = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListTypeByName',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeName,
  proto$7.device.TypeListResponse,
  /**
   * @param {!proto.device.TypeName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.TypeListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listTypeByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListTypeByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeByName,
      callback);
};


/**
 * @param {!proto.device.TypeName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listTypeByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListTypeByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeOption,
 *   !proto.device.TypeListResponse>}
 */
const methodDescriptor_DeviceService_ListTypeOption = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/ListTypeOption',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeOption,
  proto$7.device.TypeListResponse,
  /**
   * @param {!proto.device.TypeOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.TypeListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.listTypeOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListTypeOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeOption,
      callback);
};


/**
 * @param {!proto.device.TypeOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeListResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.listTypeOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListTypeOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeSchema,
 *   !proto.device.TypeCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateType = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/CreateType',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeSchema,
  proto$7.device.TypeCreateResponse,
  /**
   * @param {!proto.device.TypeSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.TypeCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.createType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateType,
      callback);
};


/**
 * @param {!proto.device.TypeSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeCreateResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.createType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeUpdate,
 *   !proto.device.TypeChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateType = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/UpdateType',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeUpdate,
  proto$7.device.TypeChangeResponse,
  /**
   * @param {!proto.device.TypeUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.TypeChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.updateType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateType,
      callback);
};


/**
 * @param {!proto.device.TypeUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.updateType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeId,
 *   !proto.device.TypeChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteType = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/DeleteType',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeId,
  proto$7.device.TypeChangeResponse,
  /**
   * @param {!proto.device.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.TypeChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.deleteType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteType,
      callback);
};


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.deleteType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeModel,
 *   !proto.device.TypeChangeResponse>}
 */
const methodDescriptor_DeviceService_AddTypeModel = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/AddTypeModel',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeModel,
  proto$7.device.TypeChangeResponse,
  /**
   * @param {!proto.device.TypeModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.TypeChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.addTypeModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/AddTypeModel',
      request,
      metadata || {},
      methodDescriptor_DeviceService_AddTypeModel,
      callback);
};


/**
 * @param {!proto.device.TypeModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.addTypeModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/AddTypeModel',
      request,
      metadata || {},
      methodDescriptor_DeviceService_AddTypeModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeModel,
 *   !proto.device.TypeChangeResponse>}
 */
const methodDescriptor_DeviceService_RemoveTypeModel = new grpc$6.web.MethodDescriptor(
  '/device.DeviceService/RemoveTypeModel',
  grpc$6.web.MethodType.UNARY,
  proto$7.device.TypeModel,
  proto$7.device.TypeChangeResponse,
  /**
   * @param {!proto.device.TypeModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$7.device.TypeChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$7.device.DeviceServiceClient.prototype.removeTypeModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/RemoveTypeModel',
      request,
      metadata || {},
      methodDescriptor_DeviceService_RemoveTypeModel,
      callback);
};


/**
 * @param {!proto.device.TypeModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeChangeResponse>}
 *     Promise that resolves to the response
 */
proto$7.device.DeviceServicePromiseClient.prototype.removeTypeModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/RemoveTypeModel',
      request,
      metadata || {},
      methodDescriptor_DeviceService_RemoveTypeModel);
};


var device_grpc_web_pb = proto$7.device;

var device_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(device_grpc_web_pb);

var group_pb = {};

(function (exports) {
	// source: rmcs_resource_api/group.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.group.GroupCategory', null, global);
	goog.exportSymbol('proto.group.GroupChangeResponse', null, global);
	goog.exportSymbol('proto.group.GroupCreateResponse', null, global);
	goog.exportSymbol('proto.group.GroupDevice', null, global);
	goog.exportSymbol('proto.group.GroupDeviceListResponse', null, global);
	goog.exportSymbol('proto.group.GroupDeviceReadResponse', null, global);
	goog.exportSymbol('proto.group.GroupDeviceSchema', null, global);
	goog.exportSymbol('proto.group.GroupId', null, global);
	goog.exportSymbol('proto.group.GroupIds', null, global);
	goog.exportSymbol('proto.group.GroupModel', null, global);
	goog.exportSymbol('proto.group.GroupModelListResponse', null, global);
	goog.exportSymbol('proto.group.GroupModelReadResponse', null, global);
	goog.exportSymbol('proto.group.GroupModelSchema', null, global);
	goog.exportSymbol('proto.group.GroupName', null, global);
	goog.exportSymbol('proto.group.GroupOption', null, global);
	goog.exportSymbol('proto.group.GroupUpdate', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupModelSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.group.GroupModelSchema.repeatedFields_, null);
	};
	goog.inherits(proto.group.GroupModelSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupModelSchema.displayName = 'proto.group.GroupModelSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupDeviceSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.group.GroupDeviceSchema.repeatedFields_, null);
	};
	goog.inherits(proto.group.GroupDeviceSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupDeviceSchema.displayName = 'proto.group.GroupDeviceSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupId.displayName = 'proto.group.GroupId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupIds = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.group.GroupIds.repeatedFields_, null);
	};
	goog.inherits(proto.group.GroupIds, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupIds.displayName = 'proto.group.GroupIds';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupName.displayName = 'proto.group.GroupName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupCategory = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupCategory, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupCategory.displayName = 'proto.group.GroupCategory';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupOption = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupOption, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupOption.displayName = 'proto.group.GroupOption';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupUpdate.displayName = 'proto.group.GroupUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupModel = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupModel, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupModel.displayName = 'proto.group.GroupModel';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupDevice = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupDevice, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupDevice.displayName = 'proto.group.GroupDevice';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupModelReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupModelReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupModelReadResponse.displayName = 'proto.group.GroupModelReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupModelListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.group.GroupModelListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.group.GroupModelListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupModelListResponse.displayName = 'proto.group.GroupModelListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupDeviceReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupDeviceReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupDeviceReadResponse.displayName = 'proto.group.GroupDeviceReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupDeviceListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.group.GroupDeviceListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.group.GroupDeviceListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupDeviceListResponse.displayName = 'proto.group.GroupDeviceListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupCreateResponse.displayName = 'proto.group.GroupCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.group.GroupChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.group.GroupChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.group.GroupChangeResponse.displayName = 'proto.group.GroupChangeResponse';
	}

	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.group.GroupModelSchema.repeatedFields_ = [5];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupModelSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupModelSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupModelSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupModelSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64(),
	name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	category: jspb.Message.getFieldWithDefault(msg, 3, ""),
	description: jspb.Message.getFieldWithDefault(msg, 4, ""),
	modelsList: msg.getModelsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupModelSchema}
	 */
	proto.group.GroupModelSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupModelSchema;
	  return proto.group.GroupModelSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupModelSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupModelSchema}
	 */
	proto.group.GroupModelSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 5:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addModels(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupModelSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupModelSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupModelSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupModelSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getCategory();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getModelsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.group.GroupModelSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.group.GroupModelSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.group.GroupModelSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.group.GroupModelSchema} returns this
	 */
	proto.group.GroupModelSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.group.GroupModelSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupModelSchema} returns this
	 */
	proto.group.GroupModelSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string category = 3;
	 * @return {string}
	 */
	proto.group.GroupModelSchema.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupModelSchema} returns this
	 */
	proto.group.GroupModelSchema.prototype.setCategory = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.group.GroupModelSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupModelSchema} returns this
	 */
	proto.group.GroupModelSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * repeated bytes models = 5;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.group.GroupModelSchema.prototype.getModelsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
	};


	/**
	 * repeated bytes models = 5;
	 * This is a type-conversion wrapper around `getModelsList()`
	 * @return {!Array<string>}
	 */
	proto.group.GroupModelSchema.prototype.getModelsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getModelsList()));
	};


	/**
	 * repeated bytes models = 5;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.group.GroupModelSchema.prototype.getModelsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getModelsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.group.GroupModelSchema} returns this
	 */
	proto.group.GroupModelSchema.prototype.setModelsList = function(value) {
	  return jspb.Message.setField(this, 5, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.group.GroupModelSchema} returns this
	 */
	proto.group.GroupModelSchema.prototype.addModels = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.group.GroupModelSchema} returns this
	 */
	proto.group.GroupModelSchema.prototype.clearModelsList = function() {
	  return this.setModelsList([]);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.group.GroupDeviceSchema.repeatedFields_ = [5];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupDeviceSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupDeviceSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupDeviceSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupDeviceSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64(),
	name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	category: jspb.Message.getFieldWithDefault(msg, 3, ""),
	description: jspb.Message.getFieldWithDefault(msg, 4, ""),
	devicesList: msg.getDevicesList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupDeviceSchema}
	 */
	proto.group.GroupDeviceSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupDeviceSchema;
	  return proto.group.GroupDeviceSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupDeviceSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupDeviceSchema}
	 */
	proto.group.GroupDeviceSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 5:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addDevices(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupDeviceSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupDeviceSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupDeviceSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupDeviceSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getCategory();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getDevicesList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.group.GroupDeviceSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.group.GroupDeviceSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.group.GroupDeviceSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.group.GroupDeviceSchema} returns this
	 */
	proto.group.GroupDeviceSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.group.GroupDeviceSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupDeviceSchema} returns this
	 */
	proto.group.GroupDeviceSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string category = 3;
	 * @return {string}
	 */
	proto.group.GroupDeviceSchema.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupDeviceSchema} returns this
	 */
	proto.group.GroupDeviceSchema.prototype.setCategory = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.group.GroupDeviceSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupDeviceSchema} returns this
	 */
	proto.group.GroupDeviceSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * repeated bytes devices = 5;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.group.GroupDeviceSchema.prototype.getDevicesList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
	};


	/**
	 * repeated bytes devices = 5;
	 * This is a type-conversion wrapper around `getDevicesList()`
	 * @return {!Array<string>}
	 */
	proto.group.GroupDeviceSchema.prototype.getDevicesList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getDevicesList()));
	};


	/**
	 * repeated bytes devices = 5;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDevicesList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.group.GroupDeviceSchema.prototype.getDevicesList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getDevicesList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.group.GroupDeviceSchema} returns this
	 */
	proto.group.GroupDeviceSchema.prototype.setDevicesList = function(value) {
	  return jspb.Message.setField(this, 5, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.group.GroupDeviceSchema} returns this
	 */
	proto.group.GroupDeviceSchema.prototype.addDevices = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.group.GroupDeviceSchema} returns this
	 */
	proto.group.GroupDeviceSchema.prototype.clearDevicesList = function() {
	  return this.setDevicesList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupId.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupId}
	 */
	proto.group.GroupId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupId;
	  return proto.group.GroupId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupId}
	 */
	proto.group.GroupId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.group.GroupId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.group.GroupId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.group.GroupId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.group.GroupId} returns this
	 */
	proto.group.GroupId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.group.GroupIds.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupIds.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupIds.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupIds} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupIds.toObject = function(includeInstance, msg) {
	  var obj = {
	idsList: msg.getIdsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupIds}
	 */
	proto.group.GroupIds.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupIds;
	  return proto.group.GroupIds.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupIds} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupIds}
	 */
	proto.group.GroupIds.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addIds(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupIds.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupIds.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupIds} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupIds.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.group.GroupIds.prototype.getIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes ids = 1;
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<string>}
	 */
	proto.group.GroupIds.prototype.getIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getIdsList()));
	};


	/**
	 * repeated bytes ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.group.GroupIds.prototype.getIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.group.GroupIds} returns this
	 */
	proto.group.GroupIds.prototype.setIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.group.GroupIds} returns this
	 */
	proto.group.GroupIds.prototype.addIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.group.GroupIds} returns this
	 */
	proto.group.GroupIds.prototype.clearIdsList = function() {
	  return this.setIdsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupName.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupName.toObject = function(includeInstance, msg) {
	  var obj = {
	name: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupName}
	 */
	proto.group.GroupName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupName;
	  return proto.group.GroupName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupName}
	 */
	proto.group.GroupName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.group.GroupName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupName} returns this
	 */
	proto.group.GroupName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupCategory.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupCategory.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupCategory} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupCategory.toObject = function(includeInstance, msg) {
	  var obj = {
	category: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupCategory}
	 */
	proto.group.GroupCategory.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupCategory;
	  return proto.group.GroupCategory.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupCategory} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupCategory}
	 */
	proto.group.GroupCategory.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupCategory.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupCategory.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupCategory} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupCategory.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getCategory();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string category = 1;
	 * @return {string}
	 */
	proto.group.GroupCategory.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupCategory} returns this
	 */
	proto.group.GroupCategory.prototype.setCategory = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupOption.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupOption.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupOption} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupOption.toObject = function(includeInstance, msg) {
	  var f, obj = {
	name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
	category: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupOption}
	 */
	proto.group.GroupOption.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupOption;
	  return proto.group.GroupOption.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupOption} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupOption}
	 */
	proto.group.GroupOption.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupOption.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupOption.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupOption} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupOption.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {string} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.group.GroupOption.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupOption} returns this
	 */
	proto.group.GroupOption.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.group.GroupOption} returns this
	 */
	proto.group.GroupOption.prototype.clearName = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.group.GroupOption.prototype.hasName = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional string category = 2;
	 * @return {string}
	 */
	proto.group.GroupOption.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupOption} returns this
	 */
	proto.group.GroupOption.prototype.setCategory = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.group.GroupOption} returns this
	 */
	proto.group.GroupOption.prototype.clearCategory = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.group.GroupOption.prototype.hasCategory = function() {
	  return jspb.Message.getField(this, 2) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	category: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	description: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupUpdate}
	 */
	proto.group.GroupUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupUpdate;
	  return proto.group.GroupUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupUpdate}
	 */
	proto.group.GroupUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.group.GroupUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.group.GroupUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.group.GroupUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.group.GroupUpdate} returns this
	 */
	proto.group.GroupUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.group.GroupUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupUpdate} returns this
	 */
	proto.group.GroupUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.group.GroupUpdate} returns this
	 */
	proto.group.GroupUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.group.GroupUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string category = 3;
	 * @return {string}
	 */
	proto.group.GroupUpdate.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupUpdate} returns this
	 */
	proto.group.GroupUpdate.prototype.setCategory = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.group.GroupUpdate} returns this
	 */
	proto.group.GroupUpdate.prototype.clearCategory = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.group.GroupUpdate.prototype.hasCategory = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.group.GroupUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.group.GroupUpdate} returns this
	 */
	proto.group.GroupUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.group.GroupUpdate} returns this
	 */
	proto.group.GroupUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.group.GroupUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 4) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupModel.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupModel.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupModel} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupModel.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64(),
	modelId: msg.getModelId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupModel}
	 */
	proto.group.GroupModel.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupModel;
	  return proto.group.GroupModel.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupModel} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupModel}
	 */
	proto.group.GroupModel.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupModel.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupModel.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupModel} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupModel.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.group.GroupModel.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.group.GroupModel.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.group.GroupModel.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.group.GroupModel} returns this
	 */
	proto.group.GroupModel.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.group.GroupModel.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.group.GroupModel.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.group.GroupModel.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.group.GroupModel} returns this
	 */
	proto.group.GroupModel.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupDevice.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupDevice.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupDevice} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupDevice.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64(),
	deviceId: msg.getDeviceId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupDevice}
	 */
	proto.group.GroupDevice.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupDevice;
	  return proto.group.GroupDevice.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupDevice} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupDevice}
	 */
	proto.group.GroupDevice.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupDevice.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupDevice.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupDevice} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupDevice.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.group.GroupDevice.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.group.GroupDevice.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.group.GroupDevice.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.group.GroupDevice} returns this
	 */
	proto.group.GroupDevice.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes device_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.group.GroupDevice.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id = 2;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.group.GroupDevice.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.group.GroupDevice.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.group.GroupDevice} returns this
	 */
	proto.group.GroupDevice.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupModelReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupModelReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupModelReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupModelReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.group.GroupModelSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupModelReadResponse}
	 */
	proto.group.GroupModelReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupModelReadResponse;
	  return proto.group.GroupModelReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupModelReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupModelReadResponse}
	 */
	proto.group.GroupModelReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.group.GroupModelSchema;
	      reader.readMessage(value,proto.group.GroupModelSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupModelReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupModelReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupModelReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupModelReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.group.GroupModelSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional GroupModelSchema result = 1;
	 * @return {?proto.group.GroupModelSchema}
	 */
	proto.group.GroupModelReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.group.GroupModelSchema} */ (
	    jspb.Message.getWrapperField(this, proto.group.GroupModelSchema, 1));
	};


	/**
	 * @param {?proto.group.GroupModelSchema|undefined} value
	 * @return {!proto.group.GroupModelReadResponse} returns this
	*/
	proto.group.GroupModelReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.group.GroupModelReadResponse} returns this
	 */
	proto.group.GroupModelReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.group.GroupModelReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.group.GroupModelListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupModelListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupModelListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupModelListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupModelListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.group.GroupModelSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupModelListResponse}
	 */
	proto.group.GroupModelListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupModelListResponse;
	  return proto.group.GroupModelListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupModelListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupModelListResponse}
	 */
	proto.group.GroupModelListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.group.GroupModelSchema;
	      reader.readMessage(value,proto.group.GroupModelSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupModelListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupModelListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupModelListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupModelListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.group.GroupModelSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated GroupModelSchema results = 1;
	 * @return {!Array<!proto.group.GroupModelSchema>}
	 */
	proto.group.GroupModelListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.group.GroupModelSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.group.GroupModelSchema, 1));
	};


	/**
	 * @param {!Array<!proto.group.GroupModelSchema>} value
	 * @return {!proto.group.GroupModelListResponse} returns this
	*/
	proto.group.GroupModelListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.group.GroupModelSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.group.GroupModelSchema}
	 */
	proto.group.GroupModelListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.group.GroupModelSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.group.GroupModelListResponse} returns this
	 */
	proto.group.GroupModelListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupDeviceReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupDeviceReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupDeviceReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupDeviceReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.group.GroupDeviceSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupDeviceReadResponse}
	 */
	proto.group.GroupDeviceReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupDeviceReadResponse;
	  return proto.group.GroupDeviceReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupDeviceReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupDeviceReadResponse}
	 */
	proto.group.GroupDeviceReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.group.GroupDeviceSchema;
	      reader.readMessage(value,proto.group.GroupDeviceSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupDeviceReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupDeviceReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupDeviceReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupDeviceReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.group.GroupDeviceSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional GroupDeviceSchema result = 1;
	 * @return {?proto.group.GroupDeviceSchema}
	 */
	proto.group.GroupDeviceReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.group.GroupDeviceSchema} */ (
	    jspb.Message.getWrapperField(this, proto.group.GroupDeviceSchema, 1));
	};


	/**
	 * @param {?proto.group.GroupDeviceSchema|undefined} value
	 * @return {!proto.group.GroupDeviceReadResponse} returns this
	*/
	proto.group.GroupDeviceReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.group.GroupDeviceReadResponse} returns this
	 */
	proto.group.GroupDeviceReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.group.GroupDeviceReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.group.GroupDeviceListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupDeviceListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupDeviceListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupDeviceListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupDeviceListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.group.GroupDeviceSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupDeviceListResponse}
	 */
	proto.group.GroupDeviceListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupDeviceListResponse;
	  return proto.group.GroupDeviceListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupDeviceListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupDeviceListResponse}
	 */
	proto.group.GroupDeviceListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.group.GroupDeviceSchema;
	      reader.readMessage(value,proto.group.GroupDeviceSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupDeviceListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupDeviceListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupDeviceListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupDeviceListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.group.GroupDeviceSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated GroupDeviceSchema results = 1;
	 * @return {!Array<!proto.group.GroupDeviceSchema>}
	 */
	proto.group.GroupDeviceListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.group.GroupDeviceSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.group.GroupDeviceSchema, 1));
	};


	/**
	 * @param {!Array<!proto.group.GroupDeviceSchema>} value
	 * @return {!proto.group.GroupDeviceListResponse} returns this
	*/
	proto.group.GroupDeviceListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.group.GroupDeviceSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.group.GroupDeviceSchema}
	 */
	proto.group.GroupDeviceListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.group.GroupDeviceSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.group.GroupDeviceListResponse} returns this
	 */
	proto.group.GroupDeviceListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupCreateResponse}
	 */
	proto.group.GroupCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupCreateResponse;
	  return proto.group.GroupCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupCreateResponse}
	 */
	proto.group.GroupCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.group.GroupCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.group.GroupCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.group.GroupCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.group.GroupCreateResponse} returns this
	 */
	proto.group.GroupCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.group.GroupChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.group.GroupChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.group.GroupChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.group.GroupChangeResponse}
	 */
	proto.group.GroupChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.group.GroupChangeResponse;
	  return proto.group.GroupChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.group.GroupChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.group.GroupChangeResponse}
	 */
	proto.group.GroupChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.group.GroupChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.group.GroupChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.group.GroupChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.group.GroupChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.group); 
} (group_pb));

/**
 * @fileoverview gRPC-Web generated client stub for group
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_resource_api/group.proto


/* eslint-disable */
// @ts-nocheck



const grpc$5 = {};
grpc$5.web = require$$0$1;

const proto$6 = {};
proto$6.group = group_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$6.group.GroupServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$5.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$6.group.GroupServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$5.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupModelReadResponse>}
 */
const methodDescriptor_GroupService_ReadGroupModel = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ReadGroupModel',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupId,
  proto$6.group.GroupModelReadResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupModelReadResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupModelReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupModelReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.readGroupModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ReadGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupModel,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupModelReadResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.readGroupModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ReadGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupIds,
 *   !proto.group.GroupModelListResponse>}
 */
const methodDescriptor_GroupService_ListGroupModelByIds = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupModelByIds',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupIds,
  proto$6.group.GroupModelListResponse,
  /**
   * @param {!proto.group.GroupIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupModelListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupModelByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByIds',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByIds,
      callback);
};


/**
 * @param {!proto.group.GroupIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupModelListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupModelByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByIds',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupName,
 *   !proto.group.GroupModelListResponse>}
 */
const methodDescriptor_GroupService_ListGroupModelByName = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupModelByName',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupName,
  proto$6.group.GroupModelListResponse,
  /**
   * @param {!proto.group.GroupName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupModelListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupModelByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByName,
      callback);
};


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupModelListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupModelByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupCategory,
 *   !proto.group.GroupModelListResponse>}
 */
const methodDescriptor_GroupService_ListGroupModelByCategory = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupModelByCategory',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupCategory,
  proto$6.group.GroupModelListResponse,
  /**
   * @param {!proto.group.GroupCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupModelListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupModelByCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByCategory,
      callback);
};


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupModelListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupModelByCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupOption,
 *   !proto.group.GroupModelListResponse>}
 */
const methodDescriptor_GroupService_ListGroupModelOption = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupModelOption',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupOption,
  proto$6.group.GroupModelListResponse,
  /**
   * @param {!proto.group.GroupOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupModelListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupModelOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupModelOption',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelOption,
      callback);
};


/**
 * @param {!proto.group.GroupOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupModelListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupModelOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupModelOption',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupModelSchema,
 *   !proto.group.GroupCreateResponse>}
 */
const methodDescriptor_GroupService_CreateGroupModel = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/CreateGroupModel',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupModelSchema,
  proto$6.group.GroupCreateResponse,
  /**
   * @param {!proto.group.GroupModelSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupCreateResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupModelSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.createGroupModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/CreateGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupModel,
      callback);
};


/**
 * @param {!proto.group.GroupModelSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupCreateResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.createGroupModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/CreateGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupUpdate,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_UpdateGroupModel = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/UpdateGroupModel',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupUpdate,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.updateGroupModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/UpdateGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupModel,
      callback);
};


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.updateGroupModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/UpdateGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_DeleteGroupModel = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/DeleteGroupModel',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupId,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.deleteGroupModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/DeleteGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupModel,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.deleteGroupModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/DeleteGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupModel,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_AddGroupModelMember = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/AddGroupModelMember',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupModel,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.addGroupModelMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/AddGroupModelMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupModelMember,
      callback);
};


/**
 * @param {!proto.group.GroupModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.addGroupModelMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/AddGroupModelMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupModelMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupModel,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_RemoveGroupModelMember = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/RemoveGroupModelMember',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupModel,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.removeGroupModelMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/RemoveGroupModelMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupModelMember,
      callback);
};


/**
 * @param {!proto.group.GroupModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.removeGroupModelMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/RemoveGroupModelMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupModelMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupDeviceReadResponse>}
 */
const methodDescriptor_GroupService_ReadGroupDevice = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ReadGroupDevice',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupId,
  proto$6.group.GroupDeviceReadResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceReadResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.readGroupDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ReadGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupDevice,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceReadResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.readGroupDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ReadGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupIds,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupDeviceByIds = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupDeviceByIds',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupIds,
  proto$6.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupDeviceByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByIds',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByIds,
      callback);
};


/**
 * @param {!proto.group.GroupIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupDeviceByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByIds',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupName,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupDeviceByName = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupDeviceByName',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupName,
  proto$6.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupDeviceByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByName,
      callback);
};


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupDeviceByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupCategory,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupDeviceByCategory = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupDeviceByCategory',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupCategory,
  proto$6.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupDeviceByCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByCategory,
      callback);
};


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupDeviceByCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupOption,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupDeviceOption = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupDeviceOption',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupOption,
  proto$6.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupDeviceOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceOption',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceOption,
      callback);
};


/**
 * @param {!proto.group.GroupOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupDeviceOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceOption',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDeviceSchema,
 *   !proto.group.GroupCreateResponse>}
 */
const methodDescriptor_GroupService_CreateGroupDevice = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/CreateGroupDevice',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupDeviceSchema,
  proto$6.group.GroupCreateResponse,
  /**
   * @param {!proto.group.GroupDeviceSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupCreateResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.createGroupDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/CreateGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupDevice,
      callback);
};


/**
 * @param {!proto.group.GroupDeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupCreateResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.createGroupDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/CreateGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupUpdate,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_UpdateGroupDevice = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/UpdateGroupDevice',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupUpdate,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.updateGroupDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/UpdateGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupDevice,
      callback);
};


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.updateGroupDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/UpdateGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_DeleteGroupDevice = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/DeleteGroupDevice',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupId,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.deleteGroupDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/DeleteGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupDevice,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.deleteGroupDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/DeleteGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDevice,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_AddGroupDeviceMember = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/AddGroupDeviceMember',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupDevice,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupDevice} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.addGroupDeviceMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/AddGroupDeviceMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupDeviceMember,
      callback);
};


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.addGroupDeviceMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/AddGroupDeviceMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupDeviceMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDevice,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_RemoveGroupDeviceMember = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/RemoveGroupDeviceMember',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupDevice,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupDevice} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.removeGroupDeviceMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/RemoveGroupDeviceMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupDeviceMember,
      callback);
};


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.removeGroupDeviceMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/RemoveGroupDeviceMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupDeviceMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupDeviceReadResponse>}
 */
const methodDescriptor_GroupService_ReadGroupGateway = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ReadGroupGateway',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupId,
  proto$6.group.GroupDeviceReadResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceReadResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.readGroupGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ReadGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupGateway,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceReadResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.readGroupGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ReadGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupIds,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupGatewayByIds = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupGatewayByIds',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupIds,
  proto$6.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupGatewayByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByIds',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByIds,
      callback);
};


/**
 * @param {!proto.group.GroupIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupGatewayByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByIds',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupName,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupGatewayByName = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupGatewayByName',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupName,
  proto$6.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupGatewayByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByName,
      callback);
};


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupGatewayByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupCategory,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupGatewayByCategory = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupGatewayByCategory',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupCategory,
  proto$6.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupGatewayByCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByCategory,
      callback);
};


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupGatewayByCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupOption,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupGatewayOption = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/ListGroupGatewayOption',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupOption,
  proto$6.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.listGroupGatewayOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayOption',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayOption,
      callback);
};


/**
 * @param {!proto.group.GroupOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.listGroupGatewayOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayOption',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDeviceSchema,
 *   !proto.group.GroupCreateResponse>}
 */
const methodDescriptor_GroupService_CreateGroupGateway = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/CreateGroupGateway',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupDeviceSchema,
  proto$6.group.GroupCreateResponse,
  /**
   * @param {!proto.group.GroupDeviceSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupCreateResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.createGroupGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/CreateGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupGateway,
      callback);
};


/**
 * @param {!proto.group.GroupDeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupCreateResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.createGroupGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/CreateGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupUpdate,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_UpdateGroupGateway = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/UpdateGroupGateway',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupUpdate,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.updateGroupGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/UpdateGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupGateway,
      callback);
};


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.updateGroupGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/UpdateGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_DeleteGroupGateway = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/DeleteGroupGateway',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupId,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.deleteGroupGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/DeleteGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupGateway,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.deleteGroupGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/DeleteGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDevice,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_AddGroupGatewayMember = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/AddGroupGatewayMember',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupDevice,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupDevice} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.addGroupGatewayMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/AddGroupGatewayMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupGatewayMember,
      callback);
};


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.addGroupGatewayMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/AddGroupGatewayMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupGatewayMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDevice,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_RemoveGroupGatewayMember = new grpc$5.web.MethodDescriptor(
  '/group.GroupService/RemoveGroupGatewayMember',
  grpc$5.web.MethodType.UNARY,
  proto$6.group.GroupDevice,
  proto$6.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupDevice} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$6.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$6.group.GroupServiceClient.prototype.removeGroupGatewayMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/RemoveGroupGatewayMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupGatewayMember,
      callback);
};


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto$6.group.GroupServicePromiseClient.prototype.removeGroupGatewayMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/RemoveGroupGatewayMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupGatewayMember);
};


var group_grpc_web_pb = proto$6.group;

var group_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(group_grpc_web_pb);

var set_pb = {};

(function (exports) {
	// source: rmcs_resource_api/set.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.set.SetChangeResponse', null, global);
	goog.exportSymbol('proto.set.SetCreateResponse', null, global);
	goog.exportSymbol('proto.set.SetId', null, global);
	goog.exportSymbol('proto.set.SetIds', null, global);
	goog.exportSymbol('proto.set.SetListResponse', null, global);
	goog.exportSymbol('proto.set.SetMember', null, global);
	goog.exportSymbol('proto.set.SetMemberRequest', null, global);
	goog.exportSymbol('proto.set.SetMemberSwap', null, global);
	goog.exportSymbol('proto.set.SetName', null, global);
	goog.exportSymbol('proto.set.SetOption', null, global);
	goog.exportSymbol('proto.set.SetReadResponse', null, global);
	goog.exportSymbol('proto.set.SetSchema', null, global);
	goog.exportSymbol('proto.set.SetTemplateId', null, global);
	goog.exportSymbol('proto.set.SetTemplateIds', null, global);
	goog.exportSymbol('proto.set.SetTemplateMember', null, global);
	goog.exportSymbol('proto.set.SetTemplateMemberRequest', null, global);
	goog.exportSymbol('proto.set.SetTemplateMemberSwap', null, global);
	goog.exportSymbol('proto.set.SetTemplateName', null, global);
	goog.exportSymbol('proto.set.SetTemplateOption', null, global);
	goog.exportSymbol('proto.set.SetTemplateSchema', null, global);
	goog.exportSymbol('proto.set.SetTemplateUpdate', null, global);
	goog.exportSymbol('proto.set.SetUpdate', null, global);
	goog.exportSymbol('proto.set.TemplateChangeResponse', null, global);
	goog.exportSymbol('proto.set.TemplateCreateResponse', null, global);
	goog.exportSymbol('proto.set.TemplateListResponse', null, global);
	goog.exportSymbol('proto.set.TemplateReadResponse', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.set.SetSchema.repeatedFields_, null);
	};
	goog.inherits(proto.set.SetSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetSchema.displayName = 'proto.set.SetSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetMember = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetMember, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetMember.displayName = 'proto.set.SetMember';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetId.displayName = 'proto.set.SetId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetIds = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.set.SetIds.repeatedFields_, null);
	};
	goog.inherits(proto.set.SetIds, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetIds.displayName = 'proto.set.SetIds';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetName.displayName = 'proto.set.SetName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetOption = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetOption, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetOption.displayName = 'proto.set.SetOption';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetUpdate.displayName = 'proto.set.SetUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetMemberRequest = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetMemberRequest, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetMemberRequest.displayName = 'proto.set.SetMemberRequest';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetMemberSwap = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetMemberSwap, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetMemberSwap.displayName = 'proto.set.SetMemberSwap';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetTemplateSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.set.SetTemplateSchema.repeatedFields_, null);
	};
	goog.inherits(proto.set.SetTemplateSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetTemplateSchema.displayName = 'proto.set.SetTemplateSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetTemplateMember = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetTemplateMember, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetTemplateMember.displayName = 'proto.set.SetTemplateMember';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetTemplateId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetTemplateId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetTemplateId.displayName = 'proto.set.SetTemplateId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetTemplateIds = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.set.SetTemplateIds.repeatedFields_, null);
	};
	goog.inherits(proto.set.SetTemplateIds, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetTemplateIds.displayName = 'proto.set.SetTemplateIds';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetTemplateName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetTemplateName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetTemplateName.displayName = 'proto.set.SetTemplateName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetTemplateOption = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetTemplateOption, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetTemplateOption.displayName = 'proto.set.SetTemplateOption';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetTemplateUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetTemplateUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetTemplateUpdate.displayName = 'proto.set.SetTemplateUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetTemplateMemberRequest = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetTemplateMemberRequest, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetTemplateMemberRequest.displayName = 'proto.set.SetTemplateMemberRequest';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetTemplateMemberSwap = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetTemplateMemberSwap, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetTemplateMemberSwap.displayName = 'proto.set.SetTemplateMemberSwap';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetReadResponse.displayName = 'proto.set.SetReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.set.SetListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.set.SetListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetListResponse.displayName = 'proto.set.SetListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetCreateResponse.displayName = 'proto.set.SetCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.SetChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.SetChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.SetChangeResponse.displayName = 'proto.set.SetChangeResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.TemplateReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.TemplateReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.TemplateReadResponse.displayName = 'proto.set.TemplateReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.TemplateListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.set.TemplateListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.set.TemplateListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.TemplateListResponse.displayName = 'proto.set.TemplateListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.TemplateCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.TemplateCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.TemplateCreateResponse.displayName = 'proto.set.TemplateCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.set.TemplateChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.set.TemplateChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.set.TemplateChangeResponse.displayName = 'proto.set.TemplateChangeResponse';
	}

	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.set.SetSchema.repeatedFields_ = [5];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64(),
	templateId: msg.getTemplateId_asB64(),
	name: jspb.Message.getFieldWithDefault(msg, 3, ""),
	description: jspb.Message.getFieldWithDefault(msg, 4, ""),
	membersList: jspb.Message.toObjectList(msg.getMembersList(),
	    proto.set.SetMember.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetSchema}
	 */
	proto.set.SetSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetSchema;
	  return proto.set.SetSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetSchema}
	 */
	proto.set.SetSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTemplateId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 5:
	      var value = new proto.set.SetMember;
	      reader.readMessage(value,proto.set.SetMember.deserializeBinaryFromReader);
	      msg.addMembers(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTemplateId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getMembersList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      5,
	      f,
	      proto.set.SetMember.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.set.SetSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetSchema} returns this
	 */
	proto.set.SetSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes template_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetSchema.prototype.getTemplateId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes template_id = 2;
	 * This is a type-conversion wrapper around `getTemplateId()`
	 * @return {string}
	 */
	proto.set.SetSchema.prototype.getTemplateId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTemplateId()));
	};


	/**
	 * optional bytes template_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTemplateId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetSchema.prototype.getTemplateId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTemplateId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetSchema} returns this
	 */
	proto.set.SetSchema.prototype.setTemplateId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.set.SetSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetSchema} returns this
	 */
	proto.set.SetSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.set.SetSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetSchema} returns this
	 */
	proto.set.SetSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * repeated SetMember members = 5;
	 * @return {!Array<!proto.set.SetMember>}
	 */
	proto.set.SetSchema.prototype.getMembersList = function() {
	  return /** @type{!Array<!proto.set.SetMember>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.set.SetMember, 5));
	};


	/**
	 * @param {!Array<!proto.set.SetMember>} value
	 * @return {!proto.set.SetSchema} returns this
	*/
	proto.set.SetSchema.prototype.setMembersList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 5, value);
	};


	/**
	 * @param {!proto.set.SetMember=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.set.SetMember}
	 */
	proto.set.SetSchema.prototype.addMembers = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.set.SetMember, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.set.SetSchema} returns this
	 */
	proto.set.SetSchema.prototype.clearMembersList = function() {
	  return this.setMembersList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetMember.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetMember.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetMember} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetMember.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	dataIndex: msg.getDataIndex_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetMember}
	 */
	proto.set.SetMember.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetMember;
	  return proto.set.SetMember.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetMember} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetMember}
	 */
	proto.set.SetMember.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDataIndex(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetMember.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetMember.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetMember} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetMember.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getDataIndex_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMember.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.set.SetMember.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMember.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMember} returns this
	 */
	proto.set.SetMember.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMember.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.set.SetMember.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMember.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMember} returns this
	 */
	proto.set.SetMember.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional bytes data_index = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMember.prototype.getDataIndex = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes data_index = 3;
	 * This is a type-conversion wrapper around `getDataIndex()`
	 * @return {string}
	 */
	proto.set.SetMember.prototype.getDataIndex_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDataIndex()));
	};


	/**
	 * optional bytes data_index = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDataIndex()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMember.prototype.getDataIndex_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDataIndex()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMember} returns this
	 */
	proto.set.SetMember.prototype.setDataIndex = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetId.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetId}
	 */
	proto.set.SetId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetId;
	  return proto.set.SetId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetId}
	 */
	proto.set.SetId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.set.SetId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetId} returns this
	 */
	proto.set.SetId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.set.SetIds.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetIds.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetIds.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetIds} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetIds.toObject = function(includeInstance, msg) {
	  var obj = {
	idsList: msg.getIdsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetIds}
	 */
	proto.set.SetIds.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetIds;
	  return proto.set.SetIds.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetIds} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetIds}
	 */
	proto.set.SetIds.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addIds(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetIds.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetIds.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetIds} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetIds.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.set.SetIds.prototype.getIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes ids = 1;
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<string>}
	 */
	proto.set.SetIds.prototype.getIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getIdsList()));
	};


	/**
	 * repeated bytes ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.set.SetIds.prototype.getIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.set.SetIds} returns this
	 */
	proto.set.SetIds.prototype.setIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.set.SetIds} returns this
	 */
	proto.set.SetIds.prototype.addIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.set.SetIds} returns this
	 */
	proto.set.SetIds.prototype.clearIdsList = function() {
	  return this.setIdsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetName.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetName.toObject = function(includeInstance, msg) {
	  var obj = {
	name: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetName}
	 */
	proto.set.SetName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetName;
	  return proto.set.SetName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetName}
	 */
	proto.set.SetName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.set.SetName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetName} returns this
	 */
	proto.set.SetName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetOption.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetOption.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetOption} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetOption.toObject = function(includeInstance, msg) {
	  var f, obj = {
	templateId: msg.getTemplateId_asB64(),
	name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetOption}
	 */
	proto.set.SetOption.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetOption;
	  return proto.set.SetOption.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetOption} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetOption}
	 */
	proto.set.SetOption.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTemplateId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetOption.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetOption.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetOption} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetOption.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes template_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetOption.prototype.getTemplateId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes template_id = 1;
	 * This is a type-conversion wrapper around `getTemplateId()`
	 * @return {string}
	 */
	proto.set.SetOption.prototype.getTemplateId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTemplateId()));
	};


	/**
	 * optional bytes template_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTemplateId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetOption.prototype.getTemplateId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTemplateId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetOption} returns this
	 */
	proto.set.SetOption.prototype.setTemplateId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.set.SetOption} returns this
	 */
	proto.set.SetOption.prototype.clearTemplateId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.SetOption.prototype.hasTemplateId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.set.SetOption.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetOption} returns this
	 */
	proto.set.SetOption.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.set.SetOption} returns this
	 */
	proto.set.SetOption.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.SetOption.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	templateId: msg.getTemplateId_asB64(),
	name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	description: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetUpdate}
	 */
	proto.set.SetUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetUpdate;
	  return proto.set.SetUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetUpdate}
	 */
	proto.set.SetUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTemplateId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.set.SetUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetUpdate} returns this
	 */
	proto.set.SetUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes template_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetUpdate.prototype.getTemplateId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes template_id = 2;
	 * This is a type-conversion wrapper around `getTemplateId()`
	 * @return {string}
	 */
	proto.set.SetUpdate.prototype.getTemplateId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTemplateId()));
	};


	/**
	 * optional bytes template_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTemplateId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetUpdate.prototype.getTemplateId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTemplateId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetUpdate} returns this
	 */
	proto.set.SetUpdate.prototype.setTemplateId = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.set.SetUpdate} returns this
	 */
	proto.set.SetUpdate.prototype.clearTemplateId = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.SetUpdate.prototype.hasTemplateId = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.set.SetUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetUpdate} returns this
	 */
	proto.set.SetUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.set.SetUpdate} returns this
	 */
	proto.set.SetUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.SetUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.set.SetUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetUpdate} returns this
	 */
	proto.set.SetUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.set.SetUpdate} returns this
	 */
	proto.set.SetUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.SetUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 4) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetMemberRequest.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetMemberRequest.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetMemberRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetMemberRequest.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	dataIndex: msg.getDataIndex_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetMemberRequest}
	 */
	proto.set.SetMemberRequest.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetMemberRequest;
	  return proto.set.SetMemberRequest.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetMemberRequest} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetMemberRequest}
	 */
	proto.set.SetMemberRequest.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDataIndex(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberRequest.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetMemberRequest.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetMemberRequest} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetMemberRequest.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getDataIndex_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMemberRequest.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.set.SetMemberRequest.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberRequest.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMemberRequest} returns this
	 */
	proto.set.SetMemberRequest.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes device_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMemberRequest.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id = 2;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.set.SetMemberRequest.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberRequest.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMemberRequest} returns this
	 */
	proto.set.SetMemberRequest.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional bytes model_id = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMemberRequest.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes model_id = 3;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.set.SetMemberRequest.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberRequest.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMemberRequest} returns this
	 */
	proto.set.SetMemberRequest.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};


	/**
	 * optional bytes data_index = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMemberRequest.prototype.getDataIndex = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes data_index = 4;
	 * This is a type-conversion wrapper around `getDataIndex()`
	 * @return {string}
	 */
	proto.set.SetMemberRequest.prototype.getDataIndex_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDataIndex()));
	};


	/**
	 * optional bytes data_index = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDataIndex()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberRequest.prototype.getDataIndex_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDataIndex()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMemberRequest} returns this
	 */
	proto.set.SetMemberRequest.prototype.setDataIndex = function(value) {
	  return jspb.Message.setProto3BytesField(this, 4, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetMemberSwap.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetMemberSwap.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetMemberSwap} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetMemberSwap.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	deviceId1: msg.getDeviceId1_asB64(),
	modelId1: msg.getModelId1_asB64(),
	deviceId2: msg.getDeviceId2_asB64(),
	modelId2: msg.getModelId2_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetMemberSwap}
	 */
	proto.set.SetMemberSwap.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetMemberSwap;
	  return proto.set.SetMemberSwap.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetMemberSwap} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetMemberSwap}
	 */
	proto.set.SetMemberSwap.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId1(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId1(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId2(value);
	      break;
	    case 5:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId2(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberSwap.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetMemberSwap.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetMemberSwap} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetMemberSwap.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getDeviceId1_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getModelId1_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getDeviceId2_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	  f = message.getModelId2_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMemberSwap.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.set.SetMemberSwap.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberSwap.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMemberSwap} returns this
	 */
	proto.set.SetMemberSwap.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes device_id_1 = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMemberSwap.prototype.getDeviceId1 = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id_1 = 2;
	 * This is a type-conversion wrapper around `getDeviceId1()`
	 * @return {string}
	 */
	proto.set.SetMemberSwap.prototype.getDeviceId1_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId1()));
	};


	/**
	 * optional bytes device_id_1 = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId1()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberSwap.prototype.getDeviceId1_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId1()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMemberSwap} returns this
	 */
	proto.set.SetMemberSwap.prototype.setDeviceId1 = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional bytes model_id_1 = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMemberSwap.prototype.getModelId1 = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes model_id_1 = 3;
	 * This is a type-conversion wrapper around `getModelId1()`
	 * @return {string}
	 */
	proto.set.SetMemberSwap.prototype.getModelId1_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId1()));
	};


	/**
	 * optional bytes model_id_1 = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId1()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberSwap.prototype.getModelId1_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId1()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMemberSwap} returns this
	 */
	proto.set.SetMemberSwap.prototype.setModelId1 = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};


	/**
	 * optional bytes device_id_2 = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMemberSwap.prototype.getDeviceId2 = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes device_id_2 = 4;
	 * This is a type-conversion wrapper around `getDeviceId2()`
	 * @return {string}
	 */
	proto.set.SetMemberSwap.prototype.getDeviceId2_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId2()));
	};


	/**
	 * optional bytes device_id_2 = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId2()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberSwap.prototype.getDeviceId2_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId2()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMemberSwap} returns this
	 */
	proto.set.SetMemberSwap.prototype.setDeviceId2 = function(value) {
	  return jspb.Message.setProto3BytesField(this, 4, value);
	};


	/**
	 * optional bytes model_id_2 = 5;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetMemberSwap.prototype.getModelId2 = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * optional bytes model_id_2 = 5;
	 * This is a type-conversion wrapper around `getModelId2()`
	 * @return {string}
	 */
	proto.set.SetMemberSwap.prototype.getModelId2_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId2()));
	};


	/**
	 * optional bytes model_id_2 = 5;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId2()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetMemberSwap.prototype.getModelId2_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId2()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetMemberSwap} returns this
	 */
	proto.set.SetMemberSwap.prototype.setModelId2 = function(value) {
	  return jspb.Message.setProto3BytesField(this, 5, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.set.SetTemplateSchema.repeatedFields_ = [5];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetTemplateSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetTemplateSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetTemplateSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64(),
	name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	description: jspb.Message.getFieldWithDefault(msg, 3, ""),
	membersList: jspb.Message.toObjectList(msg.getMembersList(),
	    proto.set.SetTemplateMember.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetTemplateSchema}
	 */
	proto.set.SetTemplateSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetTemplateSchema;
	  return proto.set.SetTemplateSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetTemplateSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetTemplateSchema}
	 */
	proto.set.SetTemplateSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 5:
	      var value = new proto.set.SetTemplateMember;
	      reader.readMessage(value,proto.set.SetTemplateMember.deserializeBinaryFromReader);
	      msg.addMembers(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetTemplateSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetTemplateSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getMembersList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      5,
	      f,
	      proto.set.SetTemplateMember.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.set.SetTemplateSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateSchema} returns this
	 */
	proto.set.SetTemplateSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.set.SetTemplateSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetTemplateSchema} returns this
	 */
	proto.set.SetTemplateSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string description = 3;
	 * @return {string}
	 */
	proto.set.SetTemplateSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetTemplateSchema} returns this
	 */
	proto.set.SetTemplateSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * repeated SetTemplateMember members = 5;
	 * @return {!Array<!proto.set.SetTemplateMember>}
	 */
	proto.set.SetTemplateSchema.prototype.getMembersList = function() {
	  return /** @type{!Array<!proto.set.SetTemplateMember>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.set.SetTemplateMember, 5));
	};


	/**
	 * @param {!Array<!proto.set.SetTemplateMember>} value
	 * @return {!proto.set.SetTemplateSchema} returns this
	*/
	proto.set.SetTemplateSchema.prototype.setMembersList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 5, value);
	};


	/**
	 * @param {!proto.set.SetTemplateMember=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.set.SetTemplateMember}
	 */
	proto.set.SetTemplateSchema.prototype.addMembers = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.set.SetTemplateMember, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.set.SetTemplateSchema} returns this
	 */
	proto.set.SetTemplateSchema.prototype.clearMembersList = function() {
	  return this.setMembersList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetTemplateMember.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetTemplateMember.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetTemplateMember} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateMember.toObject = function(includeInstance, msg) {
	  var obj = {
	typeId: msg.getTypeId_asB64(),
	modelId: msg.getModelId_asB64(),
	dataIndex: msg.getDataIndex_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetTemplateMember}
	 */
	proto.set.SetTemplateMember.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetTemplateMember;
	  return proto.set.SetTemplateMember.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetTemplateMember} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetTemplateMember}
	 */
	proto.set.SetTemplateMember.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTypeId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDataIndex(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMember.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetTemplateMember.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetTemplateMember} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateMember.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTypeId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getDataIndex_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes type_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateMember.prototype.getTypeId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes type_id = 1;
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {string}
	 */
	proto.set.SetTemplateMember.prototype.getTypeId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTypeId()));
	};


	/**
	 * optional bytes type_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMember.prototype.getTypeId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTypeId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateMember} returns this
	 */
	proto.set.SetTemplateMember.prototype.setTypeId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateMember.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.set.SetTemplateMember.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMember.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateMember} returns this
	 */
	proto.set.SetTemplateMember.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional bytes data_index = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateMember.prototype.getDataIndex = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes data_index = 3;
	 * This is a type-conversion wrapper around `getDataIndex()`
	 * @return {string}
	 */
	proto.set.SetTemplateMember.prototype.getDataIndex_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDataIndex()));
	};


	/**
	 * optional bytes data_index = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDataIndex()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMember.prototype.getDataIndex_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDataIndex()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateMember} returns this
	 */
	proto.set.SetTemplateMember.prototype.setDataIndex = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetTemplateId.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetTemplateId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetTemplateId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetTemplateId}
	 */
	proto.set.SetTemplateId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetTemplateId;
	  return proto.set.SetTemplateId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetTemplateId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetTemplateId}
	 */
	proto.set.SetTemplateId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetTemplateId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetTemplateId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.set.SetTemplateId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateId} returns this
	 */
	proto.set.SetTemplateId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.set.SetTemplateIds.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetTemplateIds.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetTemplateIds.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetTemplateIds} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateIds.toObject = function(includeInstance, msg) {
	  var obj = {
	idsList: msg.getIdsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetTemplateIds}
	 */
	proto.set.SetTemplateIds.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetTemplateIds;
	  return proto.set.SetTemplateIds.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetTemplateIds} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetTemplateIds}
	 */
	proto.set.SetTemplateIds.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addIds(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateIds.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetTemplateIds.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetTemplateIds} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateIds.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.set.SetTemplateIds.prototype.getIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes ids = 1;
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<string>}
	 */
	proto.set.SetTemplateIds.prototype.getIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getIdsList()));
	};


	/**
	 * repeated bytes ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.set.SetTemplateIds.prototype.getIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.set.SetTemplateIds} returns this
	 */
	proto.set.SetTemplateIds.prototype.setIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.set.SetTemplateIds} returns this
	 */
	proto.set.SetTemplateIds.prototype.addIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.set.SetTemplateIds} returns this
	 */
	proto.set.SetTemplateIds.prototype.clearIdsList = function() {
	  return this.setIdsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetTemplateName.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetTemplateName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetTemplateName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateName.toObject = function(includeInstance, msg) {
	  var obj = {
	name: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetTemplateName}
	 */
	proto.set.SetTemplateName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetTemplateName;
	  return proto.set.SetTemplateName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetTemplateName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetTemplateName}
	 */
	proto.set.SetTemplateName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetTemplateName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetTemplateName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.set.SetTemplateName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetTemplateName} returns this
	 */
	proto.set.SetTemplateName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetTemplateOption.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetTemplateOption.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetTemplateOption} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateOption.toObject = function(includeInstance, msg) {
	  var f, obj = {
	name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetTemplateOption}
	 */
	proto.set.SetTemplateOption.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetTemplateOption;
	  return proto.set.SetTemplateOption.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetTemplateOption} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetTemplateOption}
	 */
	proto.set.SetTemplateOption.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateOption.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetTemplateOption.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetTemplateOption} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateOption.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {string} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.set.SetTemplateOption.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetTemplateOption} returns this
	 */
	proto.set.SetTemplateOption.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.set.SetTemplateOption} returns this
	 */
	proto.set.SetTemplateOption.prototype.clearName = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.SetTemplateOption.prototype.hasName = function() {
	  return jspb.Message.getField(this, 1) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetTemplateUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetTemplateUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetTemplateUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: msg.getId_asB64(),
	name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	description: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetTemplateUpdate}
	 */
	proto.set.SetTemplateUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetTemplateUpdate;
	  return proto.set.SetTemplateUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetTemplateUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetTemplateUpdate}
	 */
	proto.set.SetTemplateUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetTemplateUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetTemplateUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.set.SetTemplateUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateUpdate} returns this
	 */
	proto.set.SetTemplateUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.set.SetTemplateUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetTemplateUpdate} returns this
	 */
	proto.set.SetTemplateUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.set.SetTemplateUpdate} returns this
	 */
	proto.set.SetTemplateUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.SetTemplateUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string description = 3;
	 * @return {string}
	 */
	proto.set.SetTemplateUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.set.SetTemplateUpdate} returns this
	 */
	proto.set.SetTemplateUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.set.SetTemplateUpdate} returns this
	 */
	proto.set.SetTemplateUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.SetTemplateUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 3) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetTemplateMemberRequest.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetTemplateMemberRequest.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetTemplateMemberRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateMemberRequest.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	typeId: msg.getTypeId_asB64(),
	modelId: msg.getModelId_asB64(),
	dataIndex: msg.getDataIndex_asB64(),
	templateIndex: jspb.Message.getFieldWithDefault(msg, 5, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetTemplateMemberRequest}
	 */
	proto.set.SetTemplateMemberRequest.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetTemplateMemberRequest;
	  return proto.set.SetTemplateMemberRequest.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetTemplateMemberRequest} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetTemplateMemberRequest}
	 */
	proto.set.SetTemplateMemberRequest.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTypeId(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDataIndex(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setTemplateIndex(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMemberRequest.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetTemplateMemberRequest.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetTemplateMemberRequest} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateMemberRequest.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTypeId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getDataIndex_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	  f = message.getTemplateIndex();
	  if (f !== 0) {
	    writer.writeInt32(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateMemberRequest} returns this
	 */
	proto.set.SetTemplateMemberRequest.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes type_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getTypeId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes type_id = 2;
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {string}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getTypeId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getTypeId()));
	};


	/**
	 * optional bytes type_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTypeId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getTypeId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getTypeId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateMemberRequest} returns this
	 */
	proto.set.SetTemplateMemberRequest.prototype.setTypeId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional bytes model_id = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes model_id = 3;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateMemberRequest} returns this
	 */
	proto.set.SetTemplateMemberRequest.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};


	/**
	 * optional bytes data_index = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getDataIndex = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes data_index = 4;
	 * This is a type-conversion wrapper around `getDataIndex()`
	 * @return {string}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getDataIndex_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDataIndex()));
	};


	/**
	 * optional bytes data_index = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDataIndex()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getDataIndex_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDataIndex()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateMemberRequest} returns this
	 */
	proto.set.SetTemplateMemberRequest.prototype.setDataIndex = function(value) {
	  return jspb.Message.setProto3BytesField(this, 4, value);
	};


	/**
	 * optional int32 template_index = 5;
	 * @return {number}
	 */
	proto.set.SetTemplateMemberRequest.prototype.getTemplateIndex = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.set.SetTemplateMemberRequest} returns this
	 */
	proto.set.SetTemplateMemberRequest.prototype.setTemplateIndex = function(value) {
	  return jspb.Message.setProto3IntField(this, 5, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetTemplateMemberSwap.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetTemplateMemberSwap.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetTemplateMemberSwap} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateMemberSwap.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	templateIndex1: jspb.Message.getFieldWithDefault(msg, 2, 0),
	templateIndex2: jspb.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetTemplateMemberSwap}
	 */
	proto.set.SetTemplateMemberSwap.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetTemplateMemberSwap;
	  return proto.set.SetTemplateMemberSwap.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetTemplateMemberSwap} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetTemplateMemberSwap}
	 */
	proto.set.SetTemplateMemberSwap.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setTemplateIndex1(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setTemplateIndex2(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMemberSwap.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetTemplateMemberSwap.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetTemplateMemberSwap} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetTemplateMemberSwap.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTemplateIndex1();
	  if (f !== 0) {
	    writer.writeInt32(
	      2,
	      f
	    );
	  }
	  f = message.getTemplateIndex2();
	  if (f !== 0) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetTemplateMemberSwap.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.set.SetTemplateMemberSwap.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetTemplateMemberSwap.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetTemplateMemberSwap} returns this
	 */
	proto.set.SetTemplateMemberSwap.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int32 template_index_1 = 2;
	 * @return {number}
	 */
	proto.set.SetTemplateMemberSwap.prototype.getTemplateIndex1 = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.set.SetTemplateMemberSwap} returns this
	 */
	proto.set.SetTemplateMemberSwap.prototype.setTemplateIndex1 = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional int32 template_index_2 = 3;
	 * @return {number}
	 */
	proto.set.SetTemplateMemberSwap.prototype.getTemplateIndex2 = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.set.SetTemplateMemberSwap} returns this
	 */
	proto.set.SetTemplateMemberSwap.prototype.setTemplateIndex2 = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.set.SetSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetReadResponse}
	 */
	proto.set.SetReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetReadResponse;
	  return proto.set.SetReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetReadResponse}
	 */
	proto.set.SetReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.set.SetSchema;
	      reader.readMessage(value,proto.set.SetSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.set.SetSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional SetSchema result = 1;
	 * @return {?proto.set.SetSchema}
	 */
	proto.set.SetReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.set.SetSchema} */ (
	    jspb.Message.getWrapperField(this, proto.set.SetSchema, 1));
	};


	/**
	 * @param {?proto.set.SetSchema|undefined} value
	 * @return {!proto.set.SetReadResponse} returns this
	*/
	proto.set.SetReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.set.SetReadResponse} returns this
	 */
	proto.set.SetReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.SetReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.set.SetListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.set.SetSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetListResponse}
	 */
	proto.set.SetListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetListResponse;
	  return proto.set.SetListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetListResponse}
	 */
	proto.set.SetListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.set.SetSchema;
	      reader.readMessage(value,proto.set.SetSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.set.SetSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated SetSchema results = 1;
	 * @return {!Array<!proto.set.SetSchema>}
	 */
	proto.set.SetListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.set.SetSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.set.SetSchema, 1));
	};


	/**
	 * @param {!Array<!proto.set.SetSchema>} value
	 * @return {!proto.set.SetListResponse} returns this
	*/
	proto.set.SetListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.set.SetSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.set.SetSchema}
	 */
	proto.set.SetListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.set.SetSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.set.SetListResponse} returns this
	 */
	proto.set.SetListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetCreateResponse}
	 */
	proto.set.SetCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetCreateResponse;
	  return proto.set.SetCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetCreateResponse}
	 */
	proto.set.SetCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.SetCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.set.SetCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.set.SetCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.SetCreateResponse} returns this
	 */
	proto.set.SetCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.SetChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.SetChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.SetChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.SetChangeResponse}
	 */
	proto.set.SetChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.SetChangeResponse;
	  return proto.set.SetChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.SetChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.SetChangeResponse}
	 */
	proto.set.SetChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.SetChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.SetChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.SetChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.SetChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.TemplateReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.TemplateReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.TemplateReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.TemplateReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.set.SetTemplateSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.TemplateReadResponse}
	 */
	proto.set.TemplateReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.TemplateReadResponse;
	  return proto.set.TemplateReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.TemplateReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.TemplateReadResponse}
	 */
	proto.set.TemplateReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.set.SetTemplateSchema;
	      reader.readMessage(value,proto.set.SetTemplateSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.TemplateReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.TemplateReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.TemplateReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.TemplateReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.set.SetTemplateSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional SetTemplateSchema result = 1;
	 * @return {?proto.set.SetTemplateSchema}
	 */
	proto.set.TemplateReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.set.SetTemplateSchema} */ (
	    jspb.Message.getWrapperField(this, proto.set.SetTemplateSchema, 1));
	};


	/**
	 * @param {?proto.set.SetTemplateSchema|undefined} value
	 * @return {!proto.set.TemplateReadResponse} returns this
	*/
	proto.set.TemplateReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.set.TemplateReadResponse} returns this
	 */
	proto.set.TemplateReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.set.TemplateReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.set.TemplateListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.TemplateListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.TemplateListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.TemplateListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.TemplateListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.set.SetTemplateSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.TemplateListResponse}
	 */
	proto.set.TemplateListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.TemplateListResponse;
	  return proto.set.TemplateListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.TemplateListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.TemplateListResponse}
	 */
	proto.set.TemplateListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.set.SetTemplateSchema;
	      reader.readMessage(value,proto.set.SetTemplateSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.TemplateListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.TemplateListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.TemplateListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.TemplateListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.set.SetTemplateSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated SetTemplateSchema results = 1;
	 * @return {!Array<!proto.set.SetTemplateSchema>}
	 */
	proto.set.TemplateListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.set.SetTemplateSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.set.SetTemplateSchema, 1));
	};


	/**
	 * @param {!Array<!proto.set.SetTemplateSchema>} value
	 * @return {!proto.set.TemplateListResponse} returns this
	*/
	proto.set.TemplateListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.set.SetTemplateSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.set.SetTemplateSchema}
	 */
	proto.set.TemplateListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.set.SetTemplateSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.set.TemplateListResponse} returns this
	 */
	proto.set.TemplateListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.TemplateCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.TemplateCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.TemplateCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.TemplateCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.TemplateCreateResponse}
	 */
	proto.set.TemplateCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.TemplateCreateResponse;
	  return proto.set.TemplateCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.TemplateCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.TemplateCreateResponse}
	 */
	proto.set.TemplateCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.TemplateCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.TemplateCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.TemplateCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.TemplateCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.set.TemplateCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.set.TemplateCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.set.TemplateCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.set.TemplateCreateResponse} returns this
	 */
	proto.set.TemplateCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.set.TemplateChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.set.TemplateChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.set.TemplateChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.TemplateChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.set.TemplateChangeResponse}
	 */
	proto.set.TemplateChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.set.TemplateChangeResponse;
	  return proto.set.TemplateChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.set.TemplateChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.set.TemplateChangeResponse}
	 */
	proto.set.TemplateChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.set.TemplateChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.set.TemplateChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.set.TemplateChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.set.TemplateChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.set); 
} (set_pb));

/**
 * @fileoverview gRPC-Web generated client stub for set
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_resource_api/set.proto


/* eslint-disable */
// @ts-nocheck



const grpc$4 = {};
grpc$4.web = require$$0$1;

const proto$5 = {};
proto$5.set = set_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$5.set.SetServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$4.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$5.set.SetServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$4.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetId,
 *   !proto.set.SetReadResponse>}
 */
const methodDescriptor_SetService_ReadSet = new grpc$4.web.MethodDescriptor(
  '/set.SetService/ReadSet',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetId,
  proto$5.set.SetReadResponse,
  /**
   * @param {!proto.set.SetId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetReadResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.readSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/ReadSet',
      request,
      metadata || {},
      methodDescriptor_SetService_ReadSet,
      callback);
};


/**
 * @param {!proto.set.SetId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetReadResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.readSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/ReadSet',
      request,
      metadata || {},
      methodDescriptor_SetService_ReadSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetIds,
 *   !proto.set.SetListResponse>}
 */
const methodDescriptor_SetService_ListSetByIds = new grpc$4.web.MethodDescriptor(
  '/set.SetService/ListSetByIds',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetIds,
  proto$5.set.SetListResponse,
  /**
   * @param {!proto.set.SetIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetListResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.listSetByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/ListSetByIds',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetByIds,
      callback);
};


/**
 * @param {!proto.set.SetIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetListResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.listSetByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/ListSetByIds',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateId,
 *   !proto.set.SetListResponse>}
 */
const methodDescriptor_SetService_ListSetByTemplate = new grpc$4.web.MethodDescriptor(
  '/set.SetService/ListSetByTemplate',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateId,
  proto$5.set.SetListResponse,
  /**
   * @param {!proto.set.SetTemplateId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetListResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.listSetByTemplate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/ListSetByTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetByTemplate,
      callback);
};


/**
 * @param {!proto.set.SetTemplateId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetListResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.listSetByTemplate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/ListSetByTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetByTemplate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetName,
 *   !proto.set.SetListResponse>}
 */
const methodDescriptor_SetService_ListSetByName = new grpc$4.web.MethodDescriptor(
  '/set.SetService/ListSetByName',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetName,
  proto$5.set.SetListResponse,
  /**
   * @param {!proto.set.SetName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetListResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.listSetByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/ListSetByName',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetByName,
      callback);
};


/**
 * @param {!proto.set.SetName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetListResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.listSetByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/ListSetByName',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetOption,
 *   !proto.set.SetListResponse>}
 */
const methodDescriptor_SetService_ListSetOption = new grpc$4.web.MethodDescriptor(
  '/set.SetService/ListSetOption',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetOption,
  proto$5.set.SetListResponse,
  /**
   * @param {!proto.set.SetOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetListResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.listSetOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/ListSetOption',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetOption,
      callback);
};


/**
 * @param {!proto.set.SetOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetListResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.listSetOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/ListSetOption',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetSchema,
 *   !proto.set.SetCreateResponse>}
 */
const methodDescriptor_SetService_CreateSet = new grpc$4.web.MethodDescriptor(
  '/set.SetService/CreateSet',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetSchema,
  proto$5.set.SetCreateResponse,
  /**
   * @param {!proto.set.SetSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetCreateResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.createSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/CreateSet',
      request,
      metadata || {},
      methodDescriptor_SetService_CreateSet,
      callback);
};


/**
 * @param {!proto.set.SetSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetCreateResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.createSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/CreateSet',
      request,
      metadata || {},
      methodDescriptor_SetService_CreateSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetUpdate,
 *   !proto.set.SetChangeResponse>}
 */
const methodDescriptor_SetService_UpdateSet = new grpc$4.web.MethodDescriptor(
  '/set.SetService/UpdateSet',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetUpdate,
  proto$5.set.SetChangeResponse,
  /**
   * @param {!proto.set.SetUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.updateSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/UpdateSet',
      request,
      metadata || {},
      methodDescriptor_SetService_UpdateSet,
      callback);
};


/**
 * @param {!proto.set.SetUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.updateSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/UpdateSet',
      request,
      metadata || {},
      methodDescriptor_SetService_UpdateSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetId,
 *   !proto.set.SetChangeResponse>}
 */
const methodDescriptor_SetService_DeleteSet = new grpc$4.web.MethodDescriptor(
  '/set.SetService/DeleteSet',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetId,
  proto$5.set.SetChangeResponse,
  /**
   * @param {!proto.set.SetId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.deleteSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/DeleteSet',
      request,
      metadata || {},
      methodDescriptor_SetService_DeleteSet,
      callback);
};


/**
 * @param {!proto.set.SetId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.deleteSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/DeleteSet',
      request,
      metadata || {},
      methodDescriptor_SetService_DeleteSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetMemberRequest,
 *   !proto.set.SetChangeResponse>}
 */
const methodDescriptor_SetService_AddSetMember = new grpc$4.web.MethodDescriptor(
  '/set.SetService/AddSetMember',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetMemberRequest,
  proto$5.set.SetChangeResponse,
  /**
   * @param {!proto.set.SetMemberRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.addSetMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/AddSetMember',
      request,
      metadata || {},
      methodDescriptor_SetService_AddSetMember,
      callback);
};


/**
 * @param {!proto.set.SetMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.addSetMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/AddSetMember',
      request,
      metadata || {},
      methodDescriptor_SetService_AddSetMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetMemberRequest,
 *   !proto.set.SetChangeResponse>}
 */
const methodDescriptor_SetService_RemoveSetMember = new grpc$4.web.MethodDescriptor(
  '/set.SetService/RemoveSetMember',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetMemberRequest,
  proto$5.set.SetChangeResponse,
  /**
   * @param {!proto.set.SetMemberRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.removeSetMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/RemoveSetMember',
      request,
      metadata || {},
      methodDescriptor_SetService_RemoveSetMember,
      callback);
};


/**
 * @param {!proto.set.SetMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.removeSetMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/RemoveSetMember',
      request,
      metadata || {},
      methodDescriptor_SetService_RemoveSetMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetMemberSwap,
 *   !proto.set.SetChangeResponse>}
 */
const methodDescriptor_SetService_SwapSetMember = new grpc$4.web.MethodDescriptor(
  '/set.SetService/SwapSetMember',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetMemberSwap,
  proto$5.set.SetChangeResponse,
  /**
   * @param {!proto.set.SetMemberSwap} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.SetChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetMemberSwap} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.SetChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.SetChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.swapSetMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/SwapSetMember',
      request,
      metadata || {},
      methodDescriptor_SetService_SwapSetMember,
      callback);
};


/**
 * @param {!proto.set.SetMemberSwap} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.SetChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.swapSetMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/SwapSetMember',
      request,
      metadata || {},
      methodDescriptor_SetService_SwapSetMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateId,
 *   !proto.set.TemplateReadResponse>}
 */
const methodDescriptor_SetService_ReadSetTemplate = new grpc$4.web.MethodDescriptor(
  '/set.SetService/ReadSetTemplate',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateId,
  proto$5.set.TemplateReadResponse,
  /**
   * @param {!proto.set.SetTemplateId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateReadResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.readSetTemplate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/ReadSetTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_ReadSetTemplate,
      callback);
};


/**
 * @param {!proto.set.SetTemplateId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateReadResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.readSetTemplate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/ReadSetTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_ReadSetTemplate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateIds,
 *   !proto.set.TemplateListResponse>}
 */
const methodDescriptor_SetService_ListSetTemplateByIds = new grpc$4.web.MethodDescriptor(
  '/set.SetService/ListSetTemplateByIds',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateIds,
  proto$5.set.TemplateListResponse,
  /**
   * @param {!proto.set.SetTemplateIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateListResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.listSetTemplateByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/ListSetTemplateByIds',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetTemplateByIds,
      callback);
};


/**
 * @param {!proto.set.SetTemplateIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateListResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.listSetTemplateByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/ListSetTemplateByIds',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetTemplateByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateName,
 *   !proto.set.TemplateListResponse>}
 */
const methodDescriptor_SetService_ListSetTemplateByName = new grpc$4.web.MethodDescriptor(
  '/set.SetService/ListSetTemplateByName',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateName,
  proto$5.set.TemplateListResponse,
  /**
   * @param {!proto.set.SetTemplateName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateListResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.listSetTemplateByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/ListSetTemplateByName',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetTemplateByName,
      callback);
};


/**
 * @param {!proto.set.SetTemplateName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateListResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.listSetTemplateByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/ListSetTemplateByName',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetTemplateByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateOption,
 *   !proto.set.TemplateListResponse>}
 */
const methodDescriptor_SetService_ListSetTemplateOption = new grpc$4.web.MethodDescriptor(
  '/set.SetService/ListSetTemplateOption',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateOption,
  proto$5.set.TemplateListResponse,
  /**
   * @param {!proto.set.SetTemplateOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateListResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.listSetTemplateOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/ListSetTemplateOption',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetTemplateOption,
      callback);
};


/**
 * @param {!proto.set.SetTemplateOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateListResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.listSetTemplateOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/ListSetTemplateOption',
      request,
      metadata || {},
      methodDescriptor_SetService_ListSetTemplateOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateSchema,
 *   !proto.set.TemplateCreateResponse>}
 */
const methodDescriptor_SetService_CreateSetTemplate = new grpc$4.web.MethodDescriptor(
  '/set.SetService/CreateSetTemplate',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateSchema,
  proto$5.set.TemplateCreateResponse,
  /**
   * @param {!proto.set.SetTemplateSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateCreateResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.createSetTemplate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/CreateSetTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_CreateSetTemplate,
      callback);
};


/**
 * @param {!proto.set.SetTemplateSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateCreateResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.createSetTemplate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/CreateSetTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_CreateSetTemplate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateUpdate,
 *   !proto.set.TemplateChangeResponse>}
 */
const methodDescriptor_SetService_UpdateSetTemplate = new grpc$4.web.MethodDescriptor(
  '/set.SetService/UpdateSetTemplate',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateUpdate,
  proto$5.set.TemplateChangeResponse,
  /**
   * @param {!proto.set.SetTemplateUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.updateSetTemplate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/UpdateSetTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_UpdateSetTemplate,
      callback);
};


/**
 * @param {!proto.set.SetTemplateUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.updateSetTemplate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/UpdateSetTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_UpdateSetTemplate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateId,
 *   !proto.set.TemplateChangeResponse>}
 */
const methodDescriptor_SetService_DeleteSetTemplate = new grpc$4.web.MethodDescriptor(
  '/set.SetService/DeleteSetTemplate',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateId,
  proto$5.set.TemplateChangeResponse,
  /**
   * @param {!proto.set.SetTemplateId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.deleteSetTemplate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/DeleteSetTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_DeleteSetTemplate,
      callback);
};


/**
 * @param {!proto.set.SetTemplateId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.deleteSetTemplate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/DeleteSetTemplate',
      request,
      metadata || {},
      methodDescriptor_SetService_DeleteSetTemplate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateMemberRequest,
 *   !proto.set.TemplateChangeResponse>}
 */
const methodDescriptor_SetService_AddSetTemplateMember = new grpc$4.web.MethodDescriptor(
  '/set.SetService/AddSetTemplateMember',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateMemberRequest,
  proto$5.set.TemplateChangeResponse,
  /**
   * @param {!proto.set.SetTemplateMemberRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.addSetTemplateMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/AddSetTemplateMember',
      request,
      metadata || {},
      methodDescriptor_SetService_AddSetTemplateMember,
      callback);
};


/**
 * @param {!proto.set.SetTemplateMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.addSetTemplateMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/AddSetTemplateMember',
      request,
      metadata || {},
      methodDescriptor_SetService_AddSetTemplateMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateMemberRequest,
 *   !proto.set.TemplateChangeResponse>}
 */
const methodDescriptor_SetService_RemoveSetTemplateMember = new grpc$4.web.MethodDescriptor(
  '/set.SetService/RemoveSetTemplateMember',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateMemberRequest,
  proto$5.set.TemplateChangeResponse,
  /**
   * @param {!proto.set.SetTemplateMemberRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.removeSetTemplateMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/RemoveSetTemplateMember',
      request,
      metadata || {},
      methodDescriptor_SetService_RemoveSetTemplateMember,
      callback);
};


/**
 * @param {!proto.set.SetTemplateMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.removeSetTemplateMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/RemoveSetTemplateMember',
      request,
      metadata || {},
      methodDescriptor_SetService_RemoveSetTemplateMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.set.SetTemplateMemberSwap,
 *   !proto.set.TemplateChangeResponse>}
 */
const methodDescriptor_SetService_SwapSetTemplateMember = new grpc$4.web.MethodDescriptor(
  '/set.SetService/SwapSetTemplateMember',
  grpc$4.web.MethodType.UNARY,
  proto$5.set.SetTemplateMemberSwap,
  proto$5.set.TemplateChangeResponse,
  /**
   * @param {!proto.set.SetTemplateMemberSwap} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.set.TemplateChangeResponse.deserializeBinary
);


/**
 * @param {!proto.set.SetTemplateMemberSwap} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.set.TemplateChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.set.TemplateChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.set.SetServiceClient.prototype.swapSetTemplateMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/set.SetService/SwapSetTemplateMember',
      request,
      metadata || {},
      methodDescriptor_SetService_SwapSetTemplateMember,
      callback);
};


/**
 * @param {!proto.set.SetTemplateMemberSwap} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.set.TemplateChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.set.SetServicePromiseClient.prototype.swapSetTemplateMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/set.SetService/SwapSetTemplateMember',
      request,
      metadata || {},
      methodDescriptor_SetService_SwapSetTemplateMember);
};


var set_grpc_web_pb = proto$5.set;

var set_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(set_grpc_web_pb);

var data_pb = {};

(function (exports) {
	// source: rmcs_resource_api/data.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	var rmcs_resource_api_common_pb = common_pb;
	goog.object.extend(proto, rmcs_resource_api_common_pb);
	goog.exportSymbol('proto.data.DataChangeResponse', null, global);
	goog.exportSymbol('proto.data.DataCount', null, global);
	goog.exportSymbol('proto.data.DataCountResponse', null, global);
	goog.exportSymbol('proto.data.DataId', null, global);
	goog.exportSymbol('proto.data.DataIdsNumber', null, global);
	goog.exportSymbol('proto.data.DataIdsRange', null, global);
	goog.exportSymbol('proto.data.DataIdsTime', null, global);
	goog.exportSymbol('proto.data.DataListResponse', null, global);
	goog.exportSymbol('proto.data.DataNumber', null, global);
	goog.exportSymbol('proto.data.DataRange', null, global);
	goog.exportSymbol('proto.data.DataReadResponse', null, global);
	goog.exportSymbol('proto.data.DataSchema', null, global);
	goog.exportSymbol('proto.data.DataSetId', null, global);
	goog.exportSymbol('proto.data.DataSetListResponse', null, global);
	goog.exportSymbol('proto.data.DataSetNumber', null, global);
	goog.exportSymbol('proto.data.DataSetRange', null, global);
	goog.exportSymbol('proto.data.DataSetReadResponse', null, global);
	goog.exportSymbol('proto.data.DataSetSchema', null, global);
	goog.exportSymbol('proto.data.DataSetTime', null, global);
	goog.exportSymbol('proto.data.DataTime', null, global);
	goog.exportSymbol('proto.data.TimestampListResponse', null, global);
	goog.exportSymbol('proto.data.TimestampReadResponse', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.DataSchema.repeatedFields_, null);
	};
	goog.inherits(proto.data.DataSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataSchema.displayName = 'proto.data.DataSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataId.displayName = 'proto.data.DataId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataTime.displayName = 'proto.data.DataTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataRange.displayName = 'proto.data.DataRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataNumber = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataNumber, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataNumber.displayName = 'proto.data.DataNumber';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataSetSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.DataSetSchema.repeatedFields_, null);
	};
	goog.inherits(proto.data.DataSetSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataSetSchema.displayName = 'proto.data.DataSetSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataIdsTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.DataIdsTime.repeatedFields_, null);
	};
	goog.inherits(proto.data.DataIdsTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataIdsTime.displayName = 'proto.data.DataIdsTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataIdsRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.DataIdsRange.repeatedFields_, null);
	};
	goog.inherits(proto.data.DataIdsRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataIdsRange.displayName = 'proto.data.DataIdsRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataIdsNumber = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.DataIdsNumber.repeatedFields_, null);
	};
	goog.inherits(proto.data.DataIdsNumber, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataIdsNumber.displayName = 'proto.data.DataIdsNumber';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataSetId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataSetId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataSetId.displayName = 'proto.data.DataSetId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataSetTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataSetTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataSetTime.displayName = 'proto.data.DataSetTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataSetRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataSetRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataSetRange.displayName = 'proto.data.DataSetRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataSetNumber = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataSetNumber, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataSetNumber.displayName = 'proto.data.DataSetNumber';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataCount = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataCount, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataCount.displayName = 'proto.data.DataCount';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataReadResponse.displayName = 'proto.data.DataReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.DataListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.data.DataListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataListResponse.displayName = 'proto.data.DataListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.TimestampReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.TimestampReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.TimestampReadResponse.displayName = 'proto.data.TimestampReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.TimestampListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.TimestampListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.data.TimestampListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.TimestampListResponse.displayName = 'proto.data.TimestampListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataChangeResponse.displayName = 'proto.data.DataChangeResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataCountResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataCountResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataCountResponse.displayName = 'proto.data.DataCountResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataSetReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.data.DataSetReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataSetReadResponse.displayName = 'proto.data.DataSetReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.data.DataSetListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.DataSetListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.data.DataSetListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.data.DataSetListResponse.displayName = 'proto.data.DataSetListResponse';
	}

	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.data.DataSchema.repeatedFields_ = [5];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSchema.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
	dataBytes: msg.getDataBytes_asB64(),
	dataTypeList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataSchema}
	 */
	proto.data.DataSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataSchema;
	  return proto.data.DataSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataSchema}
	 */
	proto.data.DataSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDataBytes(value);
	      break;
	    case 5:
	      var values = /** @type {!Array<!proto.common.DataType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
	      for (var i = 0; i < values.length; i++) {
	        msg.addDataType(values[i]);
	      }
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getDataBytes_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	  f = message.getDataTypeList();
	  if (f.length > 0) {
	    writer.writePackedEnum(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataSchema.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.data.DataSchema.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataSchema.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataSchema} returns this
	 */
	proto.data.DataSchema.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataSchema.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.data.DataSchema.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataSchema.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataSchema} returns this
	 */
	proto.data.DataSchema.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.data.DataSchema.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataSchema} returns this
	 */
	proto.data.DataSchema.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional bytes data_bytes = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataSchema.prototype.getDataBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes data_bytes = 4;
	 * This is a type-conversion wrapper around `getDataBytes()`
	 * @return {string}
	 */
	proto.data.DataSchema.prototype.getDataBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDataBytes()));
	};


	/**
	 * optional bytes data_bytes = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDataBytes()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataSchema.prototype.getDataBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDataBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataSchema} returns this
	 */
	proto.data.DataSchema.prototype.setDataBytes = function(value) {
	  return jspb.Message.setProto3BytesField(this, 4, value);
	};


	/**
	 * repeated common.DataType data_type = 5;
	 * @return {!Array<!proto.common.DataType>}
	 */
	proto.data.DataSchema.prototype.getDataTypeList = function() {
	  return /** @type {!Array<!proto.common.DataType>} */ (jspb.Message.getRepeatedField(this, 5));
	};


	/**
	 * @param {!Array<!proto.common.DataType>} value
	 * @return {!proto.data.DataSchema} returns this
	 */
	proto.data.DataSchema.prototype.setDataTypeList = function(value) {
	  return jspb.Message.setField(this, 5, value || []);
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataSchema} returns this
	 */
	proto.data.DataSchema.prototype.addDataType = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataSchema} returns this
	 */
	proto.data.DataSchema.prototype.clearDataTypeList = function() {
	  return this.setDataTypeList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataId.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataId.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataId}
	 */
	proto.data.DataId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataId;
	  return proto.data.DataId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataId}
	 */
	proto.data.DataId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataId.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.data.DataId.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataId.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataId} returns this
	 */
	proto.data.DataId.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataId.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.data.DataId.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataId.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataId} returns this
	 */
	proto.data.DataId.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.data.DataId.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataId} returns this
	 */
	proto.data.DataId.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataTime.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataTime}
	 */
	proto.data.DataTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataTime;
	  return proto.data.DataTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataTime}
	 */
	proto.data.DataTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataTime.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.data.DataTime.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataTime.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataTime} returns this
	 */
	proto.data.DataTime.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataTime.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.data.DataTime.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataTime.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataTime} returns this
	 */
	proto.data.DataTime.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.data.DataTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataTime} returns this
	 */
	proto.data.DataTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataRange.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	begin: jspb.Message.getFieldWithDefault(msg, 3, 0),
	end: jspb.Message.getFieldWithDefault(msg, 4, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataRange}
	 */
	proto.data.DataRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataRange;
	  return proto.data.DataRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataRange}
	 */
	proto.data.DataRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataRange.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.data.DataRange.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataRange.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataRange} returns this
	 */
	proto.data.DataRange.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataRange.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.data.DataRange.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataRange.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataRange} returns this
	 */
	proto.data.DataRange.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 begin = 3;
	 * @return {number}
	 */
	proto.data.DataRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataRange} returns this
	 */
	proto.data.DataRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int64 end = 4;
	 * @return {number}
	 */
	proto.data.DataRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataRange} returns this
	 */
	proto.data.DataRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataNumber.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataNumber.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataNumber} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataNumber.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
	number: jspb.Message.getFieldWithDefault(msg, 4, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataNumber}
	 */
	proto.data.DataNumber.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataNumber;
	  return proto.data.DataNumber.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataNumber} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataNumber}
	 */
	proto.data.DataNumber.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataNumber.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataNumber.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataNumber} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataNumber.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataNumber.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.data.DataNumber.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataNumber.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataNumber} returns this
	 */
	proto.data.DataNumber.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataNumber.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.data.DataNumber.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataNumber.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataNumber} returns this
	 */
	proto.data.DataNumber.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.data.DataNumber.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataNumber} returns this
	 */
	proto.data.DataNumber.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional uint32 number = 4;
	 * @return {number}
	 */
	proto.data.DataNumber.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataNumber} returns this
	 */
	proto.data.DataNumber.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.data.DataSetSchema.repeatedFields_ = [4];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataSetSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataSetSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataSetSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetSchema.toObject = function(includeInstance, msg) {
	  var f, obj = {
	setId: msg.getSetId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
	dataBytes: msg.getDataBytes_asB64(),
	dataTypeList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataSetSchema}
	 */
	proto.data.DataSetSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataSetSchema;
	  return proto.data.DataSetSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataSetSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataSetSchema}
	 */
	proto.data.DataSetSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDataBytes(value);
	      break;
	    case 4:
	      var values = /** @type {!Array<!proto.common.DataType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
	      for (var i = 0; i < values.length; i++) {
	        msg.addDataType(values[i]);
	      }
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataSetSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataSetSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getDataBytes_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getDataTypeList();
	  if (f.length > 0) {
	    writer.writePackedEnum(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataSetSchema.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.data.DataSetSchema.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetSchema.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataSetSchema} returns this
	 */
	proto.data.DataSetSchema.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 timestamp = 2;
	 * @return {number}
	 */
	proto.data.DataSetSchema.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataSetSchema} returns this
	 */
	proto.data.DataSetSchema.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional bytes data_bytes = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataSetSchema.prototype.getDataBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes data_bytes = 3;
	 * This is a type-conversion wrapper around `getDataBytes()`
	 * @return {string}
	 */
	proto.data.DataSetSchema.prototype.getDataBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDataBytes()));
	};


	/**
	 * optional bytes data_bytes = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDataBytes()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetSchema.prototype.getDataBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDataBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataSetSchema} returns this
	 */
	proto.data.DataSetSchema.prototype.setDataBytes = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};


	/**
	 * repeated common.DataType data_type = 4;
	 * @return {!Array<!proto.common.DataType>}
	 */
	proto.data.DataSetSchema.prototype.getDataTypeList = function() {
	  return /** @type {!Array<!proto.common.DataType>} */ (jspb.Message.getRepeatedField(this, 4));
	};


	/**
	 * @param {!Array<!proto.common.DataType>} value
	 * @return {!proto.data.DataSetSchema} returns this
	 */
	proto.data.DataSetSchema.prototype.setDataTypeList = function(value) {
	  return jspb.Message.setField(this, 4, value || []);
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataSetSchema} returns this
	 */
	proto.data.DataSetSchema.prototype.addDataType = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataSetSchema} returns this
	 */
	proto.data.DataSetSchema.prototype.clearDataTypeList = function() {
	  return this.setDataTypeList([]);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.data.DataIdsTime.repeatedFields_ = [1,2];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataIdsTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataIdsTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataIdsTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataIdsTime.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceIdsList: msg.getDeviceIdsList_asB64(),
	modelIdsList: msg.getModelIdsList_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataIdsTime}
	 */
	proto.data.DataIdsTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataIdsTime;
	  return proto.data.DataIdsTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataIdsTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataIdsTime}
	 */
	proto.data.DataIdsTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addDeviceIds(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addModelIds(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataIdsTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataIdsTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataIdsTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataIdsTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes device_ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.data.DataIdsTime.prototype.getDeviceIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<string>}
	 */
	proto.data.DataIdsTime.prototype.getDeviceIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getDeviceIdsList()));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.data.DataIdsTime.prototype.getDeviceIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getDeviceIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.data.DataIdsTime} returns this
	 */
	proto.data.DataIdsTime.prototype.setDeviceIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataIdsTime} returns this
	 */
	proto.data.DataIdsTime.prototype.addDeviceIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataIdsTime} returns this
	 */
	proto.data.DataIdsTime.prototype.clearDeviceIdsList = function() {
	  return this.setDeviceIdsList([]);
	};


	/**
	 * repeated bytes model_ids = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.data.DataIdsTime.prototype.getModelIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<string>}
	 */
	proto.data.DataIdsTime.prototype.getModelIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getModelIdsList()));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.data.DataIdsTime.prototype.getModelIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getModelIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.data.DataIdsTime} returns this
	 */
	proto.data.DataIdsTime.prototype.setModelIdsList = function(value) {
	  return jspb.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataIdsTime} returns this
	 */
	proto.data.DataIdsTime.prototype.addModelIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataIdsTime} returns this
	 */
	proto.data.DataIdsTime.prototype.clearModelIdsList = function() {
	  return this.setModelIdsList([]);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.data.DataIdsTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataIdsTime} returns this
	 */
	proto.data.DataIdsTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.data.DataIdsRange.repeatedFields_ = [1,2];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataIdsRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataIdsRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataIdsRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataIdsRange.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceIdsList: msg.getDeviceIdsList_asB64(),
	modelIdsList: msg.getModelIdsList_asB64(),
	begin: jspb.Message.getFieldWithDefault(msg, 3, 0),
	end: jspb.Message.getFieldWithDefault(msg, 4, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataIdsRange}
	 */
	proto.data.DataIdsRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataIdsRange;
	  return proto.data.DataIdsRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataIdsRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataIdsRange}
	 */
	proto.data.DataIdsRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addDeviceIds(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addModelIds(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataIdsRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataIdsRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataIdsRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataIdsRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes device_ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.data.DataIdsRange.prototype.getDeviceIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<string>}
	 */
	proto.data.DataIdsRange.prototype.getDeviceIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getDeviceIdsList()));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.data.DataIdsRange.prototype.getDeviceIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getDeviceIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.data.DataIdsRange} returns this
	 */
	proto.data.DataIdsRange.prototype.setDeviceIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataIdsRange} returns this
	 */
	proto.data.DataIdsRange.prototype.addDeviceIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataIdsRange} returns this
	 */
	proto.data.DataIdsRange.prototype.clearDeviceIdsList = function() {
	  return this.setDeviceIdsList([]);
	};


	/**
	 * repeated bytes model_ids = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.data.DataIdsRange.prototype.getModelIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<string>}
	 */
	proto.data.DataIdsRange.prototype.getModelIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getModelIdsList()));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.data.DataIdsRange.prototype.getModelIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getModelIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.data.DataIdsRange} returns this
	 */
	proto.data.DataIdsRange.prototype.setModelIdsList = function(value) {
	  return jspb.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataIdsRange} returns this
	 */
	proto.data.DataIdsRange.prototype.addModelIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataIdsRange} returns this
	 */
	proto.data.DataIdsRange.prototype.clearModelIdsList = function() {
	  return this.setModelIdsList([]);
	};


	/**
	 * optional int64 begin = 3;
	 * @return {number}
	 */
	proto.data.DataIdsRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataIdsRange} returns this
	 */
	proto.data.DataIdsRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int64 end = 4;
	 * @return {number}
	 */
	proto.data.DataIdsRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataIdsRange} returns this
	 */
	proto.data.DataIdsRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.data.DataIdsNumber.repeatedFields_ = [1,2];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataIdsNumber.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataIdsNumber.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataIdsNumber} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataIdsNumber.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceIdsList: msg.getDeviceIdsList_asB64(),
	modelIdsList: msg.getModelIdsList_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
	number: jspb.Message.getFieldWithDefault(msg, 4, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataIdsNumber}
	 */
	proto.data.DataIdsNumber.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataIdsNumber;
	  return proto.data.DataIdsNumber.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataIdsNumber} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataIdsNumber}
	 */
	proto.data.DataIdsNumber.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addDeviceIds(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addModelIds(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataIdsNumber.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataIdsNumber.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataIdsNumber} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataIdsNumber.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes device_ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.data.DataIdsNumber.prototype.getDeviceIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<string>}
	 */
	proto.data.DataIdsNumber.prototype.getDeviceIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getDeviceIdsList()));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.data.DataIdsNumber.prototype.getDeviceIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getDeviceIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.data.DataIdsNumber} returns this
	 */
	proto.data.DataIdsNumber.prototype.setDeviceIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataIdsNumber} returns this
	 */
	proto.data.DataIdsNumber.prototype.addDeviceIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataIdsNumber} returns this
	 */
	proto.data.DataIdsNumber.prototype.clearDeviceIdsList = function() {
	  return this.setDeviceIdsList([]);
	};


	/**
	 * repeated bytes model_ids = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.data.DataIdsNumber.prototype.getModelIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<string>}
	 */
	proto.data.DataIdsNumber.prototype.getModelIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getModelIdsList()));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.data.DataIdsNumber.prototype.getModelIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getModelIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.data.DataIdsNumber} returns this
	 */
	proto.data.DataIdsNumber.prototype.setModelIdsList = function(value) {
	  return jspb.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataIdsNumber} returns this
	 */
	proto.data.DataIdsNumber.prototype.addModelIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataIdsNumber} returns this
	 */
	proto.data.DataIdsNumber.prototype.clearModelIdsList = function() {
	  return this.setModelIdsList([]);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.data.DataIdsNumber.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataIdsNumber} returns this
	 */
	proto.data.DataIdsNumber.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional uint32 number = 4;
	 * @return {number}
	 */
	proto.data.DataIdsNumber.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataIdsNumber} returns this
	 */
	proto.data.DataIdsNumber.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataSetId.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataSetId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataSetId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetId.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataSetId}
	 */
	proto.data.DataSetId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataSetId;
	  return proto.data.DataSetId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataSetId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataSetId}
	 */
	proto.data.DataSetId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataSetId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataSetId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataSetId.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.data.DataSetId.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetId.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataSetId} returns this
	 */
	proto.data.DataSetId.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 timestamp = 2;
	 * @return {number}
	 */
	proto.data.DataSetId.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataSetId} returns this
	 */
	proto.data.DataSetId.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataSetTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataSetTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataSetTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetTime.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataSetTime}
	 */
	proto.data.DataSetTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataSetTime;
	  return proto.data.DataSetTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataSetTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataSetTime}
	 */
	proto.data.DataSetTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataSetTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataSetTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataSetTime.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.data.DataSetTime.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetTime.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataSetTime} returns this
	 */
	proto.data.DataSetTime.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 timestamp = 2;
	 * @return {number}
	 */
	proto.data.DataSetTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataSetTime} returns this
	 */
	proto.data.DataSetTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataSetRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataSetRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataSetRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetRange.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	begin: jspb.Message.getFieldWithDefault(msg, 2, 0),
	end: jspb.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataSetRange}
	 */
	proto.data.DataSetRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataSetRange;
	  return proto.data.DataSetRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataSetRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataSetRange}
	 */
	proto.data.DataSetRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataSetRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataSetRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataSetRange.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.data.DataSetRange.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetRange.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataSetRange} returns this
	 */
	proto.data.DataSetRange.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 begin = 2;
	 * @return {number}
	 */
	proto.data.DataSetRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataSetRange} returns this
	 */
	proto.data.DataSetRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional int64 end = 3;
	 * @return {number}
	 */
	proto.data.DataSetRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataSetRange} returns this
	 */
	proto.data.DataSetRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataSetNumber.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataSetNumber.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataSetNumber} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetNumber.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
	number: jspb.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataSetNumber}
	 */
	proto.data.DataSetNumber.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataSetNumber;
	  return proto.data.DataSetNumber.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataSetNumber} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataSetNumber}
	 */
	proto.data.DataSetNumber.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetNumber.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataSetNumber.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataSetNumber} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetNumber.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataSetNumber.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.data.DataSetNumber.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetNumber.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataSetNumber} returns this
	 */
	proto.data.DataSetNumber.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 timestamp = 2;
	 * @return {number}
	 */
	proto.data.DataSetNumber.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataSetNumber} returns this
	 */
	proto.data.DataSetNumber.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional uint32 number = 3;
	 * @return {number}
	 */
	proto.data.DataSetNumber.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataSetNumber} returns this
	 */
	proto.data.DataSetNumber.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataCount.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataCount.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataCount} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataCount.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestamp: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	begin: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
	end: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataCount}
	 */
	proto.data.DataCount.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataCount;
	  return proto.data.DataCount.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataCount} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataCount}
	 */
	proto.data.DataCount.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataCount.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataCount.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataCount} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataCount.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeInt64(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataCount.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.data.DataCount.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataCount.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataCount} returns this
	 */
	proto.data.DataCount.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.data.DataCount.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.data.DataCount.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.data.DataCount.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.data.DataCount} returns this
	 */
	proto.data.DataCount.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.data.DataCount.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataCount} returns this
	 */
	proto.data.DataCount.prototype.setTimestamp = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.data.DataCount} returns this
	 */
	proto.data.DataCount.prototype.clearTimestamp = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.data.DataCount.prototype.hasTimestamp = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional int64 begin = 4;
	 * @return {number}
	 */
	proto.data.DataCount.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataCount} returns this
	 */
	proto.data.DataCount.prototype.setBegin = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.data.DataCount} returns this
	 */
	proto.data.DataCount.prototype.clearBegin = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.data.DataCount.prototype.hasBegin = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional int64 end = 5;
	 * @return {number}
	 */
	proto.data.DataCount.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataCount} returns this
	 */
	proto.data.DataCount.prototype.setEnd = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.data.DataCount} returns this
	 */
	proto.data.DataCount.prototype.clearEnd = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.data.DataCount.prototype.hasEnd = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.data.DataSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataReadResponse}
	 */
	proto.data.DataReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataReadResponse;
	  return proto.data.DataReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataReadResponse}
	 */
	proto.data.DataReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.data.DataSchema;
	      reader.readMessage(value,proto.data.DataSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.data.DataSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional DataSchema result = 1;
	 * @return {?proto.data.DataSchema}
	 */
	proto.data.DataReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.data.DataSchema} */ (
	    jspb.Message.getWrapperField(this, proto.data.DataSchema, 1));
	};


	/**
	 * @param {?proto.data.DataSchema|undefined} value
	 * @return {!proto.data.DataReadResponse} returns this
	*/
	proto.data.DataReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.data.DataReadResponse} returns this
	 */
	proto.data.DataReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.data.DataReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.data.DataListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.data.DataSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataListResponse}
	 */
	proto.data.DataListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataListResponse;
	  return proto.data.DataListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataListResponse}
	 */
	proto.data.DataListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.data.DataSchema;
	      reader.readMessage(value,proto.data.DataSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.data.DataSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated DataSchema results = 1;
	 * @return {!Array<!proto.data.DataSchema>}
	 */
	proto.data.DataListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.data.DataSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.data.DataSchema, 1));
	};


	/**
	 * @param {!Array<!proto.data.DataSchema>} value
	 * @return {!proto.data.DataListResponse} returns this
	*/
	proto.data.DataListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.data.DataSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataSchema}
	 */
	proto.data.DataListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.data.DataSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataListResponse} returns this
	 */
	proto.data.DataListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.TimestampReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.TimestampReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.TimestampReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.TimestampReadResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.TimestampReadResponse}
	 */
	proto.data.TimestampReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.TimestampReadResponse;
	  return proto.data.TimestampReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.TimestampReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.TimestampReadResponse}
	 */
	proto.data.TimestampReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.TimestampReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.TimestampReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.TimestampReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.TimestampReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int64 timestamp = 1;
	 * @return {number}
	 */
	proto.data.TimestampReadResponse.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.TimestampReadResponse} returns this
	 */
	proto.data.TimestampReadResponse.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.data.TimestampListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.TimestampListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.TimestampListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.TimestampListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.TimestampListResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	timestampsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.TimestampListResponse}
	 */
	proto.data.TimestampListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.TimestampListResponse;
	  return proto.data.TimestampListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.TimestampListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.TimestampListResponse}
	 */
	proto.data.TimestampListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
	      for (var i = 0; i < values.length; i++) {
	        msg.addTimestamps(values[i]);
	      }
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.TimestampListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.TimestampListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.TimestampListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.TimestampListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTimestampsList();
	  if (f.length > 0) {
	    writer.writePackedInt64(
	      1,
	      f
	    );
	  }
	};


	/**
	 * repeated int64 timestamps = 1;
	 * @return {!Array<number>}
	 */
	proto.data.TimestampListResponse.prototype.getTimestampsList = function() {
	  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * @param {!Array<number>} value
	 * @return {!proto.data.TimestampListResponse} returns this
	 */
	proto.data.TimestampListResponse.prototype.setTimestampsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {number} value
	 * @param {number=} opt_index
	 * @return {!proto.data.TimestampListResponse} returns this
	 */
	proto.data.TimestampListResponse.prototype.addTimestamps = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.TimestampListResponse} returns this
	 */
	proto.data.TimestampListResponse.prototype.clearTimestampsList = function() {
	  return this.setTimestampsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataChangeResponse}
	 */
	proto.data.DataChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataChangeResponse;
	  return proto.data.DataChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataChangeResponse}
	 */
	proto.data.DataChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataCountResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataCountResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataCountResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataCountResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	count: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataCountResponse}
	 */
	proto.data.DataCountResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataCountResponse;
	  return proto.data.DataCountResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataCountResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataCountResponse}
	 */
	proto.data.DataCountResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setCount(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataCountResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataCountResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataCountResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataCountResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getCount();
	  if (f !== 0) {
	    writer.writeUint32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional uint32 count = 1;
	 * @return {number}
	 */
	proto.data.DataCountResponse.prototype.getCount = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.data.DataCountResponse} returns this
	 */
	proto.data.DataCountResponse.prototype.setCount = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataSetReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataSetReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataSetReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.data.DataSetSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataSetReadResponse}
	 */
	proto.data.DataSetReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataSetReadResponse;
	  return proto.data.DataSetReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataSetReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataSetReadResponse}
	 */
	proto.data.DataSetReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.data.DataSetSchema;
	      reader.readMessage(value,proto.data.DataSetSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataSetReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataSetReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.data.DataSetSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional DataSetSchema result = 1;
	 * @return {?proto.data.DataSetSchema}
	 */
	proto.data.DataSetReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.data.DataSetSchema} */ (
	    jspb.Message.getWrapperField(this, proto.data.DataSetSchema, 1));
	};


	/**
	 * @param {?proto.data.DataSetSchema|undefined} value
	 * @return {!proto.data.DataSetReadResponse} returns this
	*/
	proto.data.DataSetReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.data.DataSetReadResponse} returns this
	 */
	proto.data.DataSetReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.data.DataSetReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.data.DataSetListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.data.DataSetListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.data.DataSetListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.data.DataSetListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.data.DataSetSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.data.DataSetListResponse}
	 */
	proto.data.DataSetListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.data.DataSetListResponse;
	  return proto.data.DataSetListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.data.DataSetListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.data.DataSetListResponse}
	 */
	proto.data.DataSetListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.data.DataSetSchema;
	      reader.readMessage(value,proto.data.DataSetSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.data.DataSetListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.data.DataSetListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.data.DataSetListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.data.DataSetListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.data.DataSetSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated DataSetSchema results = 1;
	 * @return {!Array<!proto.data.DataSetSchema>}
	 */
	proto.data.DataSetListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.data.DataSetSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.data.DataSetSchema, 1));
	};


	/**
	 * @param {!Array<!proto.data.DataSetSchema>} value
	 * @return {!proto.data.DataSetListResponse} returns this
	*/
	proto.data.DataSetListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.data.DataSetSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.data.DataSetSchema}
	 */
	proto.data.DataSetListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.data.DataSetSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.data.DataSetListResponse} returns this
	 */
	proto.data.DataSetListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};


	goog.object.extend(exports, proto.data); 
} (data_pb));

/**
 * @fileoverview gRPC-Web generated client stub for data
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_resource_api/data.proto


/* eslint-disable */
// @ts-nocheck



const grpc$3 = {};
grpc$3.web = require$$0$1;
const proto$4 = {};
proto$4.data = data_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$4.data.DataServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$3.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$4.data.DataServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$3.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataId,
 *   !proto.data.DataReadResponse>}
 */
const methodDescriptor_DataService_ReadData = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ReadData',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataId,
  proto$4.data.DataReadResponse,
  /**
   * @param {!proto.data.DataId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataReadResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.readData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ReadData',
      request,
      metadata || {},
      methodDescriptor_DataService_ReadData,
      callback);
};


/**
 * @param {!proto.data.DataId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataReadResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.readData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ReadData',
      request,
      metadata || {},
      methodDescriptor_DataService_ReadData);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataTime,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataByLastTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataByLastTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataTime,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataByLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataByLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByLastTime,
      callback);
};


/**
 * @param {!proto.data.DataTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataByLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataByLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataRange,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataByRangeTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataByRangeTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataRange,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataByRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByRangeTime,
      callback);
};


/**
 * @param {!proto.data.DataRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataByRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataNumber,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataByNumberBefore = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataByNumberBefore',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataNumber,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataByNumberBefore =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataByNumberBefore',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByNumberBefore,
      callback);
};


/**
 * @param {!proto.data.DataNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataByNumberBefore =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataByNumberBefore',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByNumberBefore);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataNumber,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataByNumberAfter = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataByNumberAfter',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataNumber,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataByNumberAfter =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataByNumberAfter',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByNumberAfter,
      callback);
};


/**
 * @param {!proto.data.DataNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataByNumberAfter =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataByNumberAfter',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByNumberAfter);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataIdsTime,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataByIdsTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataByIdsTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataIdsTime,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataIdsTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataIdsTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataByIdsTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataByIdsTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsTime,
      callback);
};


/**
 * @param {!proto.data.DataIdsTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataByIdsTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataByIdsTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataIdsTime,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataByIdsLastTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataByIdsLastTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataIdsTime,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataIdsTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataIdsTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataByIdsLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataByIdsLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsLastTime,
      callback);
};


/**
 * @param {!proto.data.DataIdsTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataByIdsLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataByIdsLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataIdsRange,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataByIdsRangeTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataByIdsRangeTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataIdsRange,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataIdsRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataIdsRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataByIdsRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataByIdsRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsRangeTime,
      callback);
};


/**
 * @param {!proto.data.DataIdsRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataByIdsRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataByIdsRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataIdsNumber,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataByIdsNumberBefore = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataByIdsNumberBefore',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataIdsNumber,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataIdsNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataIdsNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataByIdsNumberBefore =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataByIdsNumberBefore',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsNumberBefore,
      callback);
};


/**
 * @param {!proto.data.DataIdsNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataByIdsNumberBefore =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataByIdsNumberBefore',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsNumberBefore);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataIdsNumber,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataByIdsNumberAfter = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataByIdsNumberAfter',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataIdsNumber,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataIdsNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataIdsNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataByIdsNumberAfter =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataByIdsNumberAfter',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsNumberAfter,
      callback);
};


/**
 * @param {!proto.data.DataIdsNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataByIdsNumberAfter =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataByIdsNumberAfter',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataByIdsNumberAfter);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetTime,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataBySetTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataBySetTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetTime,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataSetTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataBySetTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataBySetTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetTime,
      callback);
};


/**
 * @param {!proto.data.DataSetTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataBySetTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataBySetTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetTime,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataBySetLastTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataBySetLastTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetTime,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataSetTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataBySetLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataBySetLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetLastTime,
      callback);
};


/**
 * @param {!proto.data.DataSetTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataBySetLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataBySetLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetRange,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataBySetRangeTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataBySetRangeTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetRange,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataSetRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataBySetRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataBySetRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetRangeTime,
      callback);
};


/**
 * @param {!proto.data.DataSetRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataBySetRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataBySetRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetNumber,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataBySetNumberBefore = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataBySetNumberBefore',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetNumber,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataSetNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataBySetNumberBefore =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataBySetNumberBefore',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetNumberBefore,
      callback);
};


/**
 * @param {!proto.data.DataSetNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataBySetNumberBefore =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataBySetNumberBefore',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetNumberBefore);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetNumber,
 *   !proto.data.DataListResponse>}
 */
const methodDescriptor_DataService_ListDataBySetNumberAfter = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataBySetNumberAfter',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetNumber,
  proto$4.data.DataListResponse,
  /**
   * @param {!proto.data.DataSetNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataBySetNumberAfter =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataBySetNumberAfter',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetNumberAfter,
      callback);
};


/**
 * @param {!proto.data.DataSetNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataBySetNumberAfter =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataBySetNumberAfter',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataBySetNumberAfter);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetId,
 *   !proto.data.DataSetReadResponse>}
 */
const methodDescriptor_DataService_ReadDataSet = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ReadDataSet',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetId,
  proto$4.data.DataSetReadResponse,
  /**
   * @param {!proto.data.DataSetId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataSetReadResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataSetReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataSetReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.readDataSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ReadDataSet',
      request,
      metadata || {},
      methodDescriptor_DataService_ReadDataSet,
      callback);
};


/**
 * @param {!proto.data.DataSetId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataSetReadResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.readDataSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ReadDataSet',
      request,
      metadata || {},
      methodDescriptor_DataService_ReadDataSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetTime,
 *   !proto.data.DataSetListResponse>}
 */
const methodDescriptor_DataService_ListDataSetByLastTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataSetByLastTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetTime,
  proto$4.data.DataSetListResponse,
  /**
   * @param {!proto.data.DataSetTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataSetListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataSetByLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataSetByLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataSetByLastTime,
      callback);
};


/**
 * @param {!proto.data.DataSetTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataSetListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataSetByLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataSetByLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataSetByLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetRange,
 *   !proto.data.DataSetListResponse>}
 */
const methodDescriptor_DataService_ListDataSetByRangeTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataSetByRangeTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetRange,
  proto$4.data.DataSetListResponse,
  /**
   * @param {!proto.data.DataSetRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataSetListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataSetByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataSetByRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataSetByRangeTime,
      callback);
};


/**
 * @param {!proto.data.DataSetRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataSetListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataSetByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataSetByRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataSetByRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetNumber,
 *   !proto.data.DataSetListResponse>}
 */
const methodDescriptor_DataService_ListDataSetByNumberBefore = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataSetByNumberBefore',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetNumber,
  proto$4.data.DataSetListResponse,
  /**
   * @param {!proto.data.DataSetNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataSetListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataSetByNumberBefore =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataSetByNumberBefore',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataSetByNumberBefore,
      callback);
};


/**
 * @param {!proto.data.DataSetNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataSetListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataSetByNumberBefore =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataSetByNumberBefore',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataSetByNumberBefore);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetNumber,
 *   !proto.data.DataSetListResponse>}
 */
const methodDescriptor_DataService_ListDataSetByNumberAfter = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataSetByNumberAfter',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetNumber,
  proto$4.data.DataSetListResponse,
  /**
   * @param {!proto.data.DataSetNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataSetListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataSetByNumberAfter =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataSetByNumberAfter',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataSetByNumberAfter,
      callback);
};


/**
 * @param {!proto.data.DataSetNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataSetListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataSetByNumberAfter =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataSetByNumberAfter',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataSetByNumberAfter);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSchema,
 *   !proto.data.DataChangeResponse>}
 */
const methodDescriptor_DataService_CreateData = new grpc$3.web.MethodDescriptor(
  '/data.DataService/CreateData',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSchema,
  proto$4.data.DataChangeResponse,
  /**
   * @param {!proto.data.DataSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataChangeResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.createData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/CreateData',
      request,
      metadata || {},
      methodDescriptor_DataService_CreateData,
      callback);
};


/**
 * @param {!proto.data.DataSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataChangeResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.createData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/CreateData',
      request,
      metadata || {},
      methodDescriptor_DataService_CreateData);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataId,
 *   !proto.data.DataChangeResponse>}
 */
const methodDescriptor_DataService_DeleteData = new grpc$3.web.MethodDescriptor(
  '/data.DataService/DeleteData',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataId,
  proto$4.data.DataChangeResponse,
  /**
   * @param {!proto.data.DataId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataChangeResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.deleteData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/DeleteData',
      request,
      metadata || {},
      methodDescriptor_DataService_DeleteData,
      callback);
};


/**
 * @param {!proto.data.DataId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataChangeResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.deleteData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/DeleteData',
      request,
      metadata || {},
      methodDescriptor_DataService_DeleteData);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataId,
 *   !proto.data.TimestampReadResponse>}
 */
const methodDescriptor_DataService_ReadDataTimestamp = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ReadDataTimestamp',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataId,
  proto$4.data.TimestampReadResponse,
  /**
   * @param {!proto.data.DataId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.TimestampReadResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.TimestampReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.TimestampReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.readDataTimestamp =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ReadDataTimestamp',
      request,
      metadata || {},
      methodDescriptor_DataService_ReadDataTimestamp,
      callback);
};


/**
 * @param {!proto.data.DataId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.TimestampReadResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.readDataTimestamp =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ReadDataTimestamp',
      request,
      metadata || {},
      methodDescriptor_DataService_ReadDataTimestamp);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataTime,
 *   !proto.data.TimestampListResponse>}
 */
const methodDescriptor_DataService_ListDataTimestampByLastTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataTimestampByLastTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataTime,
  proto$4.data.TimestampListResponse,
  /**
   * @param {!proto.data.DataTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.TimestampListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.TimestampListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.TimestampListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataTimestampByLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataTimestampByLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataTimestampByLastTime,
      callback);
};


/**
 * @param {!proto.data.DataTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.TimestampListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataTimestampByLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataTimestampByLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataTimestampByLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataRange,
 *   !proto.data.TimestampListResponse>}
 */
const methodDescriptor_DataService_ListDataTimestampByRangeTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataTimestampByRangeTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataRange,
  proto$4.data.TimestampListResponse,
  /**
   * @param {!proto.data.DataRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.TimestampListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.TimestampListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.TimestampListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataTimestampByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataTimestampByRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataTimestampByRangeTime,
      callback);
};


/**
 * @param {!proto.data.DataRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.TimestampListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataTimestampByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataTimestampByRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataTimestampByRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetId,
 *   !proto.data.TimestampReadResponse>}
 */
const methodDescriptor_DataService_ReadDataTimestampBySet = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ReadDataTimestampBySet',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetId,
  proto$4.data.TimestampReadResponse,
  /**
   * @param {!proto.data.DataSetId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.TimestampReadResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.TimestampReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.TimestampReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.readDataTimestampBySet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ReadDataTimestampBySet',
      request,
      metadata || {},
      methodDescriptor_DataService_ReadDataTimestampBySet,
      callback);
};


/**
 * @param {!proto.data.DataSetId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.TimestampReadResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.readDataTimestampBySet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ReadDataTimestampBySet',
      request,
      metadata || {},
      methodDescriptor_DataService_ReadDataTimestampBySet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetTime,
 *   !proto.data.TimestampListResponse>}
 */
const methodDescriptor_DataService_ListDataTimestampBySetLastTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataTimestampBySetLastTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetTime,
  proto$4.data.TimestampListResponse,
  /**
   * @param {!proto.data.DataSetTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.TimestampListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.TimestampListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.TimestampListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataTimestampBySetLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataTimestampBySetLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataTimestampBySetLastTime,
      callback);
};


/**
 * @param {!proto.data.DataSetTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.TimestampListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataTimestampBySetLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataTimestampBySetLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataTimestampBySetLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataSetRange,
 *   !proto.data.TimestampListResponse>}
 */
const methodDescriptor_DataService_ListDataTimestampBySetRangeTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/ListDataTimestampBySetRangeTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataSetRange,
  proto$4.data.TimestampListResponse,
  /**
   * @param {!proto.data.DataSetRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.TimestampListResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataSetRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.TimestampListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.TimestampListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.listDataTimestampBySetRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/ListDataTimestampBySetRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataTimestampBySetRangeTime,
      callback);
};


/**
 * @param {!proto.data.DataSetRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.TimestampListResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.listDataTimestampBySetRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/ListDataTimestampBySetRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_ListDataTimestampBySetRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataCount,
 *   !proto.data.DataCountResponse>}
 */
const methodDescriptor_DataService_CountData = new grpc$3.web.MethodDescriptor(
  '/data.DataService/CountData',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataCount,
  proto$4.data.DataCountResponse,
  /**
   * @param {!proto.data.DataCount} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataCountResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataCount} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataCountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataCountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.countData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/CountData',
      request,
      metadata || {},
      methodDescriptor_DataService_CountData,
      callback);
};


/**
 * @param {!proto.data.DataCount} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataCountResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.countData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/CountData',
      request,
      metadata || {},
      methodDescriptor_DataService_CountData);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataCount,
 *   !proto.data.DataCountResponse>}
 */
const methodDescriptor_DataService_CountDataByLastTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/CountDataByLastTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataCount,
  proto$4.data.DataCountResponse,
  /**
   * @param {!proto.data.DataCount} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataCountResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataCount} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataCountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataCountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.countDataByLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/CountDataByLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_CountDataByLastTime,
      callback);
};


/**
 * @param {!proto.data.DataCount} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataCountResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.countDataByLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/CountDataByLastTime',
      request,
      metadata || {},
      methodDescriptor_DataService_CountDataByLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.data.DataCount,
 *   !proto.data.DataCountResponse>}
 */
const methodDescriptor_DataService_CountDataByRangeTime = new grpc$3.web.MethodDescriptor(
  '/data.DataService/CountDataByRangeTime',
  grpc$3.web.MethodType.UNARY,
  proto$4.data.DataCount,
  proto$4.data.DataCountResponse,
  /**
   * @param {!proto.data.DataCount} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.data.DataCountResponse.deserializeBinary
);


/**
 * @param {!proto.data.DataCount} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.data.DataCountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.data.DataCountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.data.DataServiceClient.prototype.countDataByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/data.DataService/CountDataByRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_CountDataByRangeTime,
      callback);
};


/**
 * @param {!proto.data.DataCount} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.data.DataCountResponse>}
 *     Promise that resolves to the response
 */
proto$4.data.DataServicePromiseClient.prototype.countDataByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/data.DataService/CountDataByRangeTime',
      request,
      metadata || {},
      methodDescriptor_DataService_CountDataByRangeTime);
};


var data_grpc_web_pb = proto$4.data;

var data_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(data_grpc_web_pb);

var buffer_pb = {};

(function (exports) {
	// source: rmcs_resource_api/buffer.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	var rmcs_resource_api_common_pb = common_pb;
	goog.object.extend(proto, rmcs_resource_api_common_pb);
	goog.exportSymbol('proto.buffer.BufferChangeResponse', null, global);
	goog.exportSymbol('proto.buffer.BufferCount', null, global);
	goog.exportSymbol('proto.buffer.BufferCountResponse', null, global);
	goog.exportSymbol('proto.buffer.BufferCreateResponse', null, global);
	goog.exportSymbol('proto.buffer.BufferId', null, global);
	goog.exportSymbol('proto.buffer.BufferIdsNumber', null, global);
	goog.exportSymbol('proto.buffer.BufferIdsRange', null, global);
	goog.exportSymbol('proto.buffer.BufferIdsTime', null, global);
	goog.exportSymbol('proto.buffer.BufferListResponse', null, global);
	goog.exportSymbol('proto.buffer.BufferNumber', null, global);
	goog.exportSymbol('proto.buffer.BufferRange', null, global);
	goog.exportSymbol('proto.buffer.BufferReadResponse', null, global);
	goog.exportSymbol('proto.buffer.BufferSchema', null, global);
	goog.exportSymbol('proto.buffer.BufferSelector', null, global);
	goog.exportSymbol('proto.buffer.BufferSetNumber', null, global);
	goog.exportSymbol('proto.buffer.BufferSetRange', null, global);
	goog.exportSymbol('proto.buffer.BufferSetTime', null, global);
	goog.exportSymbol('proto.buffer.BufferTime', null, global);
	goog.exportSymbol('proto.buffer.BufferUpdate', null, global);
	goog.exportSymbol('proto.buffer.BuffersIdsSelector', null, global);
	goog.exportSymbol('proto.buffer.BuffersSelector', null, global);
	goog.exportSymbol('proto.buffer.BuffersSetSelector', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.buffer.BufferSchema.repeatedFields_, null);
	};
	goog.inherits(proto.buffer.BufferSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferSchema.displayName = 'proto.buffer.BufferSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferId.displayName = 'proto.buffer.BufferId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferTime.displayName = 'proto.buffer.BufferTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferRange.displayName = 'proto.buffer.BufferRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferNumber = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferNumber, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferNumber.displayName = 'proto.buffer.BufferNumber';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferSelector = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferSelector, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferSelector.displayName = 'proto.buffer.BufferSelector';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BuffersSelector = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BuffersSelector, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BuffersSelector.displayName = 'proto.buffer.BuffersSelector';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferIdsTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.buffer.BufferIdsTime.repeatedFields_, null);
	};
	goog.inherits(proto.buffer.BufferIdsTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferIdsTime.displayName = 'proto.buffer.BufferIdsTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferIdsRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.buffer.BufferIdsRange.repeatedFields_, null);
	};
	goog.inherits(proto.buffer.BufferIdsRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferIdsRange.displayName = 'proto.buffer.BufferIdsRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferIdsNumber = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.buffer.BufferIdsNumber.repeatedFields_, null);
	};
	goog.inherits(proto.buffer.BufferIdsNumber, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferIdsNumber.displayName = 'proto.buffer.BufferIdsNumber';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BuffersIdsSelector = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.buffer.BuffersIdsSelector.repeatedFields_, null);
	};
	goog.inherits(proto.buffer.BuffersIdsSelector, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BuffersIdsSelector.displayName = 'proto.buffer.BuffersIdsSelector';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferSetTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferSetTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferSetTime.displayName = 'proto.buffer.BufferSetTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferSetRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferSetRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferSetRange.displayName = 'proto.buffer.BufferSetRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferSetNumber = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferSetNumber, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferSetNumber.displayName = 'proto.buffer.BufferSetNumber';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BuffersSetSelector = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BuffersSetSelector, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BuffersSetSelector.displayName = 'proto.buffer.BuffersSetSelector';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.buffer.BufferUpdate.repeatedFields_, null);
	};
	goog.inherits(proto.buffer.BufferUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferUpdate.displayName = 'proto.buffer.BufferUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferCount = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferCount, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferCount.displayName = 'proto.buffer.BufferCount';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferReadResponse.displayName = 'proto.buffer.BufferReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.buffer.BufferListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.buffer.BufferListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferListResponse.displayName = 'proto.buffer.BufferListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferCreateResponse.displayName = 'proto.buffer.BufferCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferChangeResponse.displayName = 'proto.buffer.BufferChangeResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.buffer.BufferCountResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.buffer.BufferCountResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.buffer.BufferCountResponse.displayName = 'proto.buffer.BufferCountResponse';
	}

	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.buffer.BufferSchema.repeatedFields_ = [6];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSchema.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0),
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
	dataBytes: msg.getDataBytes_asB64(),
	dataTypeList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
	status: jspb.Message.getFieldWithDefault(msg, 7, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferSchema}
	 */
	proto.buffer.BufferSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferSchema;
	  return proto.buffer.BufferSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferSchema}
	 */
	proto.buffer.BufferSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 5:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDataBytes(value);
	      break;
	    case 6:
	      var values = /** @type {!Array<!proto.common.DataType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
	      for (var i = 0; i < values.length; i++) {
	        msg.addDataType(values[i]);
	      }
	      break;
	    case 7:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = message.getDataBytes_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      5,
	      f
	    );
	  }
	  f = message.getDataTypeList();
	  if (f.length > 0) {
	    writer.writePackedEnum(
	      6,
	      f
	    );
	  }
	  f = message.getStatus();
	  if (f !== 0) {
	    writer.writeInt32(
	      7,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.buffer.BufferSchema.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSchema} returns this
	 */
	proto.buffer.BufferSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes device_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferSchema.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id = 2;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.buffer.BufferSchema.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSchema.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferSchema} returns this
	 */
	proto.buffer.BufferSchema.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional bytes model_id = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferSchema.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes model_id = 3;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.buffer.BufferSchema.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSchema.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferSchema} returns this
	 */
	proto.buffer.BufferSchema.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};


	/**
	 * optional int64 timestamp = 4;
	 * @return {number}
	 */
	proto.buffer.BufferSchema.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSchema} returns this
	 */
	proto.buffer.BufferSchema.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};


	/**
	 * optional bytes data_bytes = 5;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferSchema.prototype.getDataBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * optional bytes data_bytes = 5;
	 * This is a type-conversion wrapper around `getDataBytes()`
	 * @return {string}
	 */
	proto.buffer.BufferSchema.prototype.getDataBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDataBytes()));
	};


	/**
	 * optional bytes data_bytes = 5;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDataBytes()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSchema.prototype.getDataBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDataBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferSchema} returns this
	 */
	proto.buffer.BufferSchema.prototype.setDataBytes = function(value) {
	  return jspb.Message.setProto3BytesField(this, 5, value);
	};


	/**
	 * repeated common.DataType data_type = 6;
	 * @return {!Array<!proto.common.DataType>}
	 */
	proto.buffer.BufferSchema.prototype.getDataTypeList = function() {
	  return /** @type {!Array<!proto.common.DataType>} */ (jspb.Message.getRepeatedField(this, 6));
	};


	/**
	 * @param {!Array<!proto.common.DataType>} value
	 * @return {!proto.buffer.BufferSchema} returns this
	 */
	proto.buffer.BufferSchema.prototype.setDataTypeList = function(value) {
	  return jspb.Message.setField(this, 6, value || []);
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BufferSchema} returns this
	 */
	proto.buffer.BufferSchema.prototype.addDataType = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BufferSchema} returns this
	 */
	proto.buffer.BufferSchema.prototype.clearDataTypeList = function() {
	  return this.setDataTypeList([]);
	};


	/**
	 * optional int32 status = 7;
	 * @return {number}
	 */
	proto.buffer.BufferSchema.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSchema} returns this
	 */
	proto.buffer.BufferSchema.prototype.setStatus = function(value) {
	  return jspb.Message.setProto3IntField(this, 7, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferId.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferId}
	 */
	proto.buffer.BufferId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferId;
	  return proto.buffer.BufferId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferId}
	 */
	proto.buffer.BufferId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.buffer.BufferId.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferId} returns this
	 */
	proto.buffer.BufferId.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferTime.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
	status: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferTime}
	 */
	proto.buffer.BufferTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferTime;
	  return proto.buffer.BufferTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferTime}
	 */
	proto.buffer.BufferTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferTime.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.buffer.BufferTime.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferTime.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferTime} returns this
	 */
	proto.buffer.BufferTime.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferTime.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.buffer.BufferTime.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferTime.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferTime} returns this
	 */
	proto.buffer.BufferTime.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.buffer.BufferTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferTime} returns this
	 */
	proto.buffer.BufferTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int32 status = 4;
	 * @return {number}
	 */
	proto.buffer.BufferTime.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferTime} returns this
	 */
	proto.buffer.BufferTime.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferTime} returns this
	 */
	proto.buffer.BufferTime.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferTime.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 4) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferRange.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	begin: jspb.Message.getFieldWithDefault(msg, 3, 0),
	end: jspb.Message.getFieldWithDefault(msg, 4, 0),
	status: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferRange}
	 */
	proto.buffer.BufferRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferRange;
	  return proto.buffer.BufferRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferRange}
	 */
	proto.buffer.BufferRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeInt32(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferRange.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.buffer.BufferRange.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferRange.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferRange} returns this
	 */
	proto.buffer.BufferRange.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferRange.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.buffer.BufferRange.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferRange.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferRange} returns this
	 */
	proto.buffer.BufferRange.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 begin = 3;
	 * @return {number}
	 */
	proto.buffer.BufferRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferRange} returns this
	 */
	proto.buffer.BufferRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int64 end = 4;
	 * @return {number}
	 */
	proto.buffer.BufferRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferRange} returns this
	 */
	proto.buffer.BufferRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};


	/**
	 * optional int32 status = 5;
	 * @return {number}
	 */
	proto.buffer.BufferRange.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferRange} returns this
	 */
	proto.buffer.BufferRange.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferRange} returns this
	 */
	proto.buffer.BufferRange.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferRange.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferNumber.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferNumber.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferNumber} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferNumber.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
	number: jspb.Message.getFieldWithDefault(msg, 4, 0),
	status: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferNumber}
	 */
	proto.buffer.BufferNumber.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferNumber;
	  return proto.buffer.BufferNumber.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferNumber} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferNumber}
	 */
	proto.buffer.BufferNumber.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferNumber.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferNumber.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferNumber} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferNumber.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      4,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeInt32(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferNumber.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.buffer.BufferNumber.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferNumber.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferNumber} returns this
	 */
	proto.buffer.BufferNumber.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferNumber.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.buffer.BufferNumber.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferNumber.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferNumber} returns this
	 */
	proto.buffer.BufferNumber.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.buffer.BufferNumber.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferNumber} returns this
	 */
	proto.buffer.BufferNumber.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional uint32 number = 4;
	 * @return {number}
	 */
	proto.buffer.BufferNumber.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferNumber} returns this
	 */
	proto.buffer.BufferNumber.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};


	/**
	 * optional int32 status = 5;
	 * @return {number}
	 */
	proto.buffer.BufferNumber.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferNumber} returns this
	 */
	proto.buffer.BufferNumber.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferNumber} returns this
	 */
	proto.buffer.BufferNumber.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferNumber.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferSelector.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferSelector.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferSelector} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSelector.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferSelector}
	 */
	proto.buffer.BufferSelector.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferSelector;
	  return proto.buffer.BufferSelector.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferSelector} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferSelector}
	 */
	proto.buffer.BufferSelector.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSelector.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferSelector.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferSelector} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSelector.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferSelector.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.buffer.BufferSelector.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSelector.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferSelector} returns this
	 */
	proto.buffer.BufferSelector.prototype.setDeviceId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferSelector} returns this
	 */
	proto.buffer.BufferSelector.prototype.clearDeviceId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferSelector.prototype.hasDeviceId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferSelector.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.buffer.BufferSelector.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSelector.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferSelector} returns this
	 */
	proto.buffer.BufferSelector.prototype.setModelId = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferSelector} returns this
	 */
	proto.buffer.BufferSelector.prototype.clearModelId = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferSelector.prototype.hasModelId = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional int32 status = 3;
	 * @return {number}
	 */
	proto.buffer.BufferSelector.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSelector} returns this
	 */
	proto.buffer.BufferSelector.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferSelector} returns this
	 */
	proto.buffer.BufferSelector.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferSelector.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 3) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BuffersSelector.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BuffersSelector.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BuffersSelector} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BuffersSelector.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	number: jspb.Message.getFieldWithDefault(msg, 4, 0),
	offset: jspb.Message.getFieldWithDefault(msg, 5, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BuffersSelector}
	 */
	proto.buffer.BuffersSelector.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BuffersSelector;
	  return proto.buffer.BuffersSelector.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BuffersSelector} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BuffersSelector}
	 */
	proto.buffer.BuffersSelector.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setOffset(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BuffersSelector.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BuffersSelector.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BuffersSelector} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BuffersSelector.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      4,
	      f
	    );
	  }
	  f = message.getOffset();
	  if (f !== 0) {
	    writer.writeUint32(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BuffersSelector.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.buffer.BuffersSelector.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BuffersSelector.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BuffersSelector} returns this
	 */
	proto.buffer.BuffersSelector.prototype.setDeviceId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BuffersSelector} returns this
	 */
	proto.buffer.BuffersSelector.prototype.clearDeviceId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BuffersSelector.prototype.hasDeviceId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BuffersSelector.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.buffer.BuffersSelector.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BuffersSelector.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BuffersSelector} returns this
	 */
	proto.buffer.BuffersSelector.prototype.setModelId = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BuffersSelector} returns this
	 */
	proto.buffer.BuffersSelector.prototype.clearModelId = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BuffersSelector.prototype.hasModelId = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional int32 status = 3;
	 * @return {number}
	 */
	proto.buffer.BuffersSelector.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BuffersSelector} returns this
	 */
	proto.buffer.BuffersSelector.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BuffersSelector} returns this
	 */
	proto.buffer.BuffersSelector.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BuffersSelector.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional uint32 number = 4;
	 * @return {number}
	 */
	proto.buffer.BuffersSelector.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BuffersSelector} returns this
	 */
	proto.buffer.BuffersSelector.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};


	/**
	 * optional uint32 offset = 5;
	 * @return {number}
	 */
	proto.buffer.BuffersSelector.prototype.getOffset = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BuffersSelector} returns this
	 */
	proto.buffer.BuffersSelector.prototype.setOffset = function(value) {
	  return jspb.Message.setProto3IntField(this, 5, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.buffer.BufferIdsTime.repeatedFields_ = [1,2];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferIdsTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferIdsTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferIdsTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferIdsTime.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceIdsList: msg.getDeviceIdsList_asB64(),
	modelIdsList: msg.getModelIdsList_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
	status: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferIdsTime}
	 */
	proto.buffer.BufferIdsTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferIdsTime;
	  return proto.buffer.BufferIdsTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferIdsTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferIdsTime}
	 */
	proto.buffer.BufferIdsTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addDeviceIds(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addModelIds(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferIdsTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferIdsTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferIdsTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferIdsTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes device_ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.buffer.BufferIdsTime.prototype.getDeviceIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<string>}
	 */
	proto.buffer.BufferIdsTime.prototype.getDeviceIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getDeviceIdsList()));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.buffer.BufferIdsTime.prototype.getDeviceIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getDeviceIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.buffer.BufferIdsTime} returns this
	 */
	proto.buffer.BufferIdsTime.prototype.setDeviceIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BufferIdsTime} returns this
	 */
	proto.buffer.BufferIdsTime.prototype.addDeviceIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BufferIdsTime} returns this
	 */
	proto.buffer.BufferIdsTime.prototype.clearDeviceIdsList = function() {
	  return this.setDeviceIdsList([]);
	};


	/**
	 * repeated bytes model_ids = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.buffer.BufferIdsTime.prototype.getModelIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<string>}
	 */
	proto.buffer.BufferIdsTime.prototype.getModelIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getModelIdsList()));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.buffer.BufferIdsTime.prototype.getModelIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getModelIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.buffer.BufferIdsTime} returns this
	 */
	proto.buffer.BufferIdsTime.prototype.setModelIdsList = function(value) {
	  return jspb.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BufferIdsTime} returns this
	 */
	proto.buffer.BufferIdsTime.prototype.addModelIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BufferIdsTime} returns this
	 */
	proto.buffer.BufferIdsTime.prototype.clearModelIdsList = function() {
	  return this.setModelIdsList([]);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.buffer.BufferIdsTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferIdsTime} returns this
	 */
	proto.buffer.BufferIdsTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int32 status = 4;
	 * @return {number}
	 */
	proto.buffer.BufferIdsTime.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferIdsTime} returns this
	 */
	proto.buffer.BufferIdsTime.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferIdsTime} returns this
	 */
	proto.buffer.BufferIdsTime.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferIdsTime.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 4) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.buffer.BufferIdsRange.repeatedFields_ = [1,2];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferIdsRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferIdsRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferIdsRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferIdsRange.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceIdsList: msg.getDeviceIdsList_asB64(),
	modelIdsList: msg.getModelIdsList_asB64(),
	begin: jspb.Message.getFieldWithDefault(msg, 3, 0),
	end: jspb.Message.getFieldWithDefault(msg, 4, 0),
	status: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferIdsRange}
	 */
	proto.buffer.BufferIdsRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferIdsRange;
	  return proto.buffer.BufferIdsRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferIdsRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferIdsRange}
	 */
	proto.buffer.BufferIdsRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addDeviceIds(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addModelIds(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferIdsRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferIdsRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferIdsRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferIdsRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeInt32(
	      5,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes device_ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.buffer.BufferIdsRange.prototype.getDeviceIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<string>}
	 */
	proto.buffer.BufferIdsRange.prototype.getDeviceIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getDeviceIdsList()));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.buffer.BufferIdsRange.prototype.getDeviceIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getDeviceIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.setDeviceIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.addDeviceIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.clearDeviceIdsList = function() {
	  return this.setDeviceIdsList([]);
	};


	/**
	 * repeated bytes model_ids = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.buffer.BufferIdsRange.prototype.getModelIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<string>}
	 */
	proto.buffer.BufferIdsRange.prototype.getModelIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getModelIdsList()));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.buffer.BufferIdsRange.prototype.getModelIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getModelIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.setModelIdsList = function(value) {
	  return jspb.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.addModelIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.clearModelIdsList = function() {
	  return this.setModelIdsList([]);
	};


	/**
	 * optional int64 begin = 3;
	 * @return {number}
	 */
	proto.buffer.BufferIdsRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int64 end = 4;
	 * @return {number}
	 */
	proto.buffer.BufferIdsRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};


	/**
	 * optional int32 status = 5;
	 * @return {number}
	 */
	proto.buffer.BufferIdsRange.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferIdsRange} returns this
	 */
	proto.buffer.BufferIdsRange.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferIdsRange.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 5) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.buffer.BufferIdsNumber.repeatedFields_ = [1,2];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferIdsNumber.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferIdsNumber.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferIdsNumber} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferIdsNumber.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceIdsList: msg.getDeviceIdsList_asB64(),
	modelIdsList: msg.getModelIdsList_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
	number: jspb.Message.getFieldWithDefault(msg, 4, 0),
	status: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferIdsNumber}
	 */
	proto.buffer.BufferIdsNumber.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferIdsNumber;
	  return proto.buffer.BufferIdsNumber.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferIdsNumber} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferIdsNumber}
	 */
	proto.buffer.BufferIdsNumber.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addDeviceIds(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addModelIds(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferIdsNumber.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferIdsNumber.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferIdsNumber} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferIdsNumber.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      4,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeInt32(
	      5,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes device_ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.buffer.BufferIdsNumber.prototype.getDeviceIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<string>}
	 */
	proto.buffer.BufferIdsNumber.prototype.getDeviceIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getDeviceIdsList()));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.buffer.BufferIdsNumber.prototype.getDeviceIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getDeviceIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.setDeviceIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.addDeviceIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.clearDeviceIdsList = function() {
	  return this.setDeviceIdsList([]);
	};


	/**
	 * repeated bytes model_ids = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.buffer.BufferIdsNumber.prototype.getModelIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<string>}
	 */
	proto.buffer.BufferIdsNumber.prototype.getModelIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getModelIdsList()));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.buffer.BufferIdsNumber.prototype.getModelIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getModelIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.setModelIdsList = function(value) {
	  return jspb.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.addModelIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.clearModelIdsList = function() {
	  return this.setModelIdsList([]);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.buffer.BufferIdsNumber.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional uint32 number = 4;
	 * @return {number}
	 */
	proto.buffer.BufferIdsNumber.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};


	/**
	 * optional int32 status = 5;
	 * @return {number}
	 */
	proto.buffer.BufferIdsNumber.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferIdsNumber} returns this
	 */
	proto.buffer.BufferIdsNumber.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferIdsNumber.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 5) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.buffer.BuffersIdsSelector.repeatedFields_ = [1,2];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BuffersIdsSelector.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BuffersIdsSelector.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BuffersIdsSelector} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BuffersIdsSelector.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceIdsList: msg.getDeviceIdsList_asB64(),
	modelIdsList: msg.getModelIdsList_asB64(),
	status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	number: jspb.Message.getFieldWithDefault(msg, 4, 0),
	offset: jspb.Message.getFieldWithDefault(msg, 5, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BuffersIdsSelector}
	 */
	proto.buffer.BuffersIdsSelector.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BuffersIdsSelector;
	  return proto.buffer.BuffersIdsSelector.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BuffersIdsSelector} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BuffersIdsSelector}
	 */
	proto.buffer.BuffersIdsSelector.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addDeviceIds(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addModelIds(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setOffset(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BuffersIdsSelector.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BuffersIdsSelector.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BuffersIdsSelector} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BuffersIdsSelector.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      4,
	      f
	    );
	  }
	  f = message.getOffset();
	  if (f !== 0) {
	    writer.writeUint32(
	      5,
	      f
	    );
	  }
	};


	/**
	 * repeated bytes device_ids = 1;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.buffer.BuffersIdsSelector.prototype.getDeviceIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<string>}
	 */
	proto.buffer.BuffersIdsSelector.prototype.getDeviceIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getDeviceIdsList()));
	};


	/**
	 * repeated bytes device_ids = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.buffer.BuffersIdsSelector.prototype.getDeviceIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getDeviceIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.setDeviceIdsList = function(value) {
	  return jspb.Message.setField(this, 1, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.addDeviceIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.clearDeviceIdsList = function() {
	  return this.setDeviceIdsList([]);
	};


	/**
	 * repeated bytes model_ids = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.buffer.BuffersIdsSelector.prototype.getModelIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<string>}
	 */
	proto.buffer.BuffersIdsSelector.prototype.getModelIdsList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getModelIdsList()));
	};


	/**
	 * repeated bytes model_ids = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelIdsList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.buffer.BuffersIdsSelector.prototype.getModelIdsList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getModelIdsList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.setModelIdsList = function(value) {
	  return jspb.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.addModelIds = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.clearModelIdsList = function() {
	  return this.setModelIdsList([]);
	};


	/**
	 * optional int32 status = 3;
	 * @return {number}
	 */
	proto.buffer.BuffersIdsSelector.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BuffersIdsSelector.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional uint32 number = 4;
	 * @return {number}
	 */
	proto.buffer.BuffersIdsSelector.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};


	/**
	 * optional uint32 offset = 5;
	 * @return {number}
	 */
	proto.buffer.BuffersIdsSelector.prototype.getOffset = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BuffersIdsSelector} returns this
	 */
	proto.buffer.BuffersIdsSelector.prototype.setOffset = function(value) {
	  return jspb.Message.setProto3IntField(this, 5, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferSetTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferSetTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferSetTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSetTime.toObject = function(includeInstance, msg) {
	  var f, obj = {
	setId: msg.getSetId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
	status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferSetTime}
	 */
	proto.buffer.BufferSetTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferSetTime;
	  return proto.buffer.BufferSetTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferSetTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferSetTime}
	 */
	proto.buffer.BufferSetTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSetTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferSetTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferSetTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSetTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferSetTime.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.buffer.BufferSetTime.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSetTime.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferSetTime} returns this
	 */
	proto.buffer.BufferSetTime.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 timestamp = 2;
	 * @return {number}
	 */
	proto.buffer.BufferSetTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSetTime} returns this
	 */
	proto.buffer.BufferSetTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional int32 status = 3;
	 * @return {number}
	 */
	proto.buffer.BufferSetTime.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSetTime} returns this
	 */
	proto.buffer.BufferSetTime.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferSetTime} returns this
	 */
	proto.buffer.BufferSetTime.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferSetTime.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 3) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferSetRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferSetRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferSetRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSetRange.toObject = function(includeInstance, msg) {
	  var f, obj = {
	setId: msg.getSetId_asB64(),
	begin: jspb.Message.getFieldWithDefault(msg, 2, 0),
	end: jspb.Message.getFieldWithDefault(msg, 3, 0),
	status: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferSetRange}
	 */
	proto.buffer.BufferSetRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferSetRange;
	  return proto.buffer.BufferSetRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferSetRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferSetRange}
	 */
	proto.buffer.BufferSetRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSetRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferSetRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferSetRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSetRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferSetRange.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.buffer.BufferSetRange.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSetRange.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferSetRange} returns this
	 */
	proto.buffer.BufferSetRange.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 begin = 2;
	 * @return {number}
	 */
	proto.buffer.BufferSetRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSetRange} returns this
	 */
	proto.buffer.BufferSetRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional int64 end = 3;
	 * @return {number}
	 */
	proto.buffer.BufferSetRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSetRange} returns this
	 */
	proto.buffer.BufferSetRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int32 status = 4;
	 * @return {number}
	 */
	proto.buffer.BufferSetRange.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSetRange} returns this
	 */
	proto.buffer.BufferSetRange.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferSetRange} returns this
	 */
	proto.buffer.BufferSetRange.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferSetRange.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 4) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferSetNumber.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferSetNumber.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferSetNumber} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSetNumber.toObject = function(includeInstance, msg) {
	  var f, obj = {
	setId: msg.getSetId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
	number: jspb.Message.getFieldWithDefault(msg, 3, 0),
	status: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferSetNumber}
	 */
	proto.buffer.BufferSetNumber.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferSetNumber;
	  return proto.buffer.BufferSetNumber.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferSetNumber} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferSetNumber}
	 */
	proto.buffer.BufferSetNumber.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSetNumber.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferSetNumber.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferSetNumber} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferSetNumber.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferSetNumber.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.buffer.BufferSetNumber.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferSetNumber.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferSetNumber} returns this
	 */
	proto.buffer.BufferSetNumber.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 timestamp = 2;
	 * @return {number}
	 */
	proto.buffer.BufferSetNumber.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSetNumber} returns this
	 */
	proto.buffer.BufferSetNumber.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional uint32 number = 3;
	 * @return {number}
	 */
	proto.buffer.BufferSetNumber.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSetNumber} returns this
	 */
	proto.buffer.BufferSetNumber.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int32 status = 4;
	 * @return {number}
	 */
	proto.buffer.BufferSetNumber.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferSetNumber} returns this
	 */
	proto.buffer.BufferSetNumber.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferSetNumber} returns this
	 */
	proto.buffer.BufferSetNumber.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferSetNumber.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 4) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BuffersSetSelector.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BuffersSetSelector.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BuffersSetSelector} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BuffersSetSelector.toObject = function(includeInstance, msg) {
	  var f, obj = {
	setId: msg.getSetId_asB64(),
	status: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	number: jspb.Message.getFieldWithDefault(msg, 3, 0),
	offset: jspb.Message.getFieldWithDefault(msg, 4, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BuffersSetSelector}
	 */
	proto.buffer.BuffersSetSelector.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BuffersSetSelector;
	  return proto.buffer.BuffersSetSelector.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BuffersSetSelector} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BuffersSetSelector}
	 */
	proto.buffer.BuffersSetSelector.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setOffset(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BuffersSetSelector.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BuffersSetSelector.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BuffersSetSelector} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BuffersSetSelector.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeInt32(
	      2,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      3,
	      f
	    );
	  }
	  f = message.getOffset();
	  if (f !== 0) {
	    writer.writeUint32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BuffersSetSelector.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.buffer.BuffersSetSelector.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BuffersSetSelector.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BuffersSetSelector} returns this
	 */
	proto.buffer.BuffersSetSelector.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int32 status = 2;
	 * @return {number}
	 */
	proto.buffer.BuffersSetSelector.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BuffersSetSelector} returns this
	 */
	proto.buffer.BuffersSetSelector.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BuffersSetSelector} returns this
	 */
	proto.buffer.BuffersSetSelector.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BuffersSetSelector.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional uint32 number = 3;
	 * @return {number}
	 */
	proto.buffer.BuffersSetSelector.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BuffersSetSelector} returns this
	 */
	proto.buffer.BuffersSetSelector.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional uint32 offset = 4;
	 * @return {number}
	 */
	proto.buffer.BuffersSetSelector.prototype.getOffset = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BuffersSetSelector} returns this
	 */
	proto.buffer.BuffersSetSelector.prototype.setOffset = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.buffer.BufferUpdate.repeatedFields_ = [3];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0),
	dataBytes: msg.getDataBytes_asB64(),
	dataTypeList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
	status: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferUpdate}
	 */
	proto.buffer.BufferUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferUpdate;
	  return proto.buffer.BufferUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferUpdate}
	 */
	proto.buffer.BufferUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDataBytes(value);
	      break;
	    case 3:
	      var values = /** @type {!Array<!proto.common.DataType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
	      for (var i = 0; i < values.length; i++) {
	        msg.addDataType(values[i]);
	      }
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getDataTypeList();
	  if (f.length > 0) {
	    writer.writePackedEnum(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.buffer.BufferUpdate.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferUpdate} returns this
	 */
	proto.buffer.BufferUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes data_bytes = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferUpdate.prototype.getDataBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes data_bytes = 2;
	 * This is a type-conversion wrapper around `getDataBytes()`
	 * @return {string}
	 */
	proto.buffer.BufferUpdate.prototype.getDataBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDataBytes()));
	};


	/**
	 * optional bytes data_bytes = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDataBytes()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferUpdate.prototype.getDataBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDataBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferUpdate} returns this
	 */
	proto.buffer.BufferUpdate.prototype.setDataBytes = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferUpdate} returns this
	 */
	proto.buffer.BufferUpdate.prototype.clearDataBytes = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferUpdate.prototype.hasDataBytes = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * repeated common.DataType data_type = 3;
	 * @return {!Array<!proto.common.DataType>}
	 */
	proto.buffer.BufferUpdate.prototype.getDataTypeList = function() {
	  return /** @type {!Array<!proto.common.DataType>} */ (jspb.Message.getRepeatedField(this, 3));
	};


	/**
	 * @param {!Array<!proto.common.DataType>} value
	 * @return {!proto.buffer.BufferUpdate} returns this
	 */
	proto.buffer.BufferUpdate.prototype.setDataTypeList = function(value) {
	  return jspb.Message.setField(this, 3, value || []);
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BufferUpdate} returns this
	 */
	proto.buffer.BufferUpdate.prototype.addDataType = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BufferUpdate} returns this
	 */
	proto.buffer.BufferUpdate.prototype.clearDataTypeList = function() {
	  return this.setDataTypeList([]);
	};


	/**
	 * optional int32 status = 4;
	 * @return {number}
	 */
	proto.buffer.BufferUpdate.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferUpdate} returns this
	 */
	proto.buffer.BufferUpdate.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferUpdate} returns this
	 */
	proto.buffer.BufferUpdate.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferUpdate.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 4) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferCount.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferCount.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferCount} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferCount.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferCount}
	 */
	proto.buffer.BufferCount.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferCount;
	  return proto.buffer.BufferCount.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferCount} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferCount}
	 */
	proto.buffer.BufferCount.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferCount.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferCount.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferCount} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferCount.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferCount.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.buffer.BufferCount.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferCount.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferCount} returns this
	 */
	proto.buffer.BufferCount.prototype.setDeviceId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferCount} returns this
	 */
	proto.buffer.BufferCount.prototype.clearDeviceId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferCount.prototype.hasDeviceId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.buffer.BufferCount.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.buffer.BufferCount.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferCount.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.buffer.BufferCount} returns this
	 */
	proto.buffer.BufferCount.prototype.setModelId = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferCount} returns this
	 */
	proto.buffer.BufferCount.prototype.clearModelId = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferCount.prototype.hasModelId = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional int32 status = 3;
	 * @return {number}
	 */
	proto.buffer.BufferCount.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferCount} returns this
	 */
	proto.buffer.BufferCount.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.buffer.BufferCount} returns this
	 */
	proto.buffer.BufferCount.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferCount.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 3) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.buffer.BufferSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferReadResponse}
	 */
	proto.buffer.BufferReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferReadResponse;
	  return proto.buffer.BufferReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferReadResponse}
	 */
	proto.buffer.BufferReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.buffer.BufferSchema;
	      reader.readMessage(value,proto.buffer.BufferSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.buffer.BufferSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional BufferSchema result = 1;
	 * @return {?proto.buffer.BufferSchema}
	 */
	proto.buffer.BufferReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.buffer.BufferSchema} */ (
	    jspb.Message.getWrapperField(this, proto.buffer.BufferSchema, 1));
	};


	/**
	 * @param {?proto.buffer.BufferSchema|undefined} value
	 * @return {!proto.buffer.BufferReadResponse} returns this
	*/
	proto.buffer.BufferReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.buffer.BufferReadResponse} returns this
	 */
	proto.buffer.BufferReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.buffer.BufferReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.buffer.BufferListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.buffer.BufferSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferListResponse}
	 */
	proto.buffer.BufferListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferListResponse;
	  return proto.buffer.BufferListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferListResponse}
	 */
	proto.buffer.BufferListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.buffer.BufferSchema;
	      reader.readMessage(value,proto.buffer.BufferSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.buffer.BufferSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated BufferSchema results = 1;
	 * @return {!Array<!proto.buffer.BufferSchema>}
	 */
	proto.buffer.BufferListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.buffer.BufferSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.buffer.BufferSchema, 1));
	};


	/**
	 * @param {!Array<!proto.buffer.BufferSchema>} value
	 * @return {!proto.buffer.BufferListResponse} returns this
	*/
	proto.buffer.BufferListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.buffer.BufferSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.buffer.BufferSchema}
	 */
	proto.buffer.BufferListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.buffer.BufferSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.buffer.BufferListResponse} returns this
	 */
	proto.buffer.BufferListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferCreateResponse}
	 */
	proto.buffer.BufferCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferCreateResponse;
	  return proto.buffer.BufferCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferCreateResponse}
	 */
	proto.buffer.BufferCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.buffer.BufferCreateResponse.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferCreateResponse} returns this
	 */
	proto.buffer.BufferCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferChangeResponse}
	 */
	proto.buffer.BufferChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferChangeResponse;
	  return proto.buffer.BufferChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferChangeResponse}
	 */
	proto.buffer.BufferChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.buffer.BufferCountResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.buffer.BufferCountResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.buffer.BufferCountResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferCountResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	count: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.buffer.BufferCountResponse}
	 */
	proto.buffer.BufferCountResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.buffer.BufferCountResponse;
	  return proto.buffer.BufferCountResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.buffer.BufferCountResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.buffer.BufferCountResponse}
	 */
	proto.buffer.BufferCountResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setCount(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.buffer.BufferCountResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.buffer.BufferCountResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.buffer.BufferCountResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.buffer.BufferCountResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getCount();
	  if (f !== 0) {
	    writer.writeUint32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional uint32 count = 1;
	 * @return {number}
	 */
	proto.buffer.BufferCountResponse.prototype.getCount = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.buffer.BufferCountResponse} returns this
	 */
	proto.buffer.BufferCountResponse.prototype.setCount = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	goog.object.extend(exports, proto.buffer); 
} (buffer_pb));

/**
 * @fileoverview gRPC-Web generated client stub for buffer
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_resource_api/buffer.proto


/* eslint-disable */
// @ts-nocheck



const grpc$2 = {};
grpc$2.web = require$$0$1;
const proto$3 = {};
proto$3.buffer = buffer_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$3.buffer.BufferServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$2.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$3.buffer.BufferServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$2.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferId,
 *   !proto.buffer.BufferReadResponse>}
 */
const methodDescriptor_BufferService_ReadBuffer = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ReadBuffer',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferId,
  proto$3.buffer.BufferReadResponse,
  /**
   * @param {!proto.buffer.BufferId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferReadResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.readBuffer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ReadBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_ReadBuffer,
      callback);
};


/**
 * @param {!proto.buffer.BufferId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferReadResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.readBuffer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ReadBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_ReadBuffer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferTime,
 *   !proto.buffer.BufferReadResponse>}
 */
const methodDescriptor_BufferService_ReadBufferByTime = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ReadBufferByTime',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferTime,
  proto$3.buffer.BufferReadResponse,
  /**
   * @param {!proto.buffer.BufferTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferReadResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.readBufferByTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ReadBufferByTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ReadBufferByTime,
      callback);
};


/**
 * @param {!proto.buffer.BufferTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferReadResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.readBufferByTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ReadBufferByTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ReadBufferByTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferTime,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferByLastTime = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferByLastTime',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferTime,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferByLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByLastTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByLastTime,
      callback);
};


/**
 * @param {!proto.buffer.BufferTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferByLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByLastTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferRange,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferByRangeTime = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferByRangeTime',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferRange,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByRangeTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByRangeTime,
      callback);
};


/**
 * @param {!proto.buffer.BufferRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByRangeTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferNumber,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferByNumberBefore = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferByNumberBefore',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferNumber,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferByNumberBefore =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByNumberBefore',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByNumberBefore,
      callback);
};


/**
 * @param {!proto.buffer.BufferNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferByNumberBefore =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByNumberBefore',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByNumberBefore);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferNumber,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferByNumberAfter = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferByNumberAfter',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferNumber,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferByNumberAfter =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByNumberAfter',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByNumberAfter,
      callback);
};


/**
 * @param {!proto.buffer.BufferNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferByNumberAfter =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByNumberAfter',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByNumberAfter);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferSelector,
 *   !proto.buffer.BufferReadResponse>}
 */
const methodDescriptor_BufferService_ReadBufferFirst = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ReadBufferFirst',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferSelector,
  proto$3.buffer.BufferReadResponse,
  /**
   * @param {!proto.buffer.BufferSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferReadResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.readBufferFirst =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ReadBufferFirst',
      request,
      metadata || {},
      methodDescriptor_BufferService_ReadBufferFirst,
      callback);
};


/**
 * @param {!proto.buffer.BufferSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferReadResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.readBufferFirst =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ReadBufferFirst',
      request,
      metadata || {},
      methodDescriptor_BufferService_ReadBufferFirst);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferSelector,
 *   !proto.buffer.BufferReadResponse>}
 */
const methodDescriptor_BufferService_ReadBufferLast = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ReadBufferLast',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferSelector,
  proto$3.buffer.BufferReadResponse,
  /**
   * @param {!proto.buffer.BufferSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferReadResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.readBufferLast =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ReadBufferLast',
      request,
      metadata || {},
      methodDescriptor_BufferService_ReadBufferLast,
      callback);
};


/**
 * @param {!proto.buffer.BufferSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferReadResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.readBufferLast =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ReadBufferLast',
      request,
      metadata || {},
      methodDescriptor_BufferService_ReadBufferLast);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferFirst = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferFirst',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferFirst =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirst',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirst,
      callback);
};


/**
 * @param {!proto.buffer.BuffersSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferFirst =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirst',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirst);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferFirstOffset = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferFirstOffset',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferFirstOffset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstOffset',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstOffset,
      callback);
};


/**
 * @param {!proto.buffer.BuffersSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferFirstOffset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstOffset',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstOffset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferLast = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferLast',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferLast =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLast',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLast,
      callback);
};


/**
 * @param {!proto.buffer.BuffersSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferLast =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLast',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLast);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferLastOffset = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferLastOffset',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferLastOffset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastOffset',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastOffset,
      callback);
};


/**
 * @param {!proto.buffer.BuffersSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferLastOffset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastOffset',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastOffset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferIdsTime,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferByIdsTime = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferByIdsTime',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferIdsTime,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferIdsTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferIdsTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferByIdsTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsTime,
      callback);
};


/**
 * @param {!proto.buffer.BufferIdsTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferByIdsTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferIdsTime,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferByIdsLastTime = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferByIdsLastTime',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferIdsTime,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferIdsTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferIdsTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferByIdsLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsLastTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsLastTime,
      callback);
};


/**
 * @param {!proto.buffer.BufferIdsTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferByIdsLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsLastTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferIdsRange,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferByIdsRangeTime = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferByIdsRangeTime',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferIdsRange,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferIdsRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferIdsRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferByIdsRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsRangeTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsRangeTime,
      callback);
};


/**
 * @param {!proto.buffer.BufferIdsRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferByIdsRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsRangeTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferIdsNumber,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferByIdsNumberBefore = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferByIdsNumberBefore',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferIdsNumber,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferIdsNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferIdsNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferByIdsNumberBefore =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsNumberBefore',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsNumberBefore,
      callback);
};


/**
 * @param {!proto.buffer.BufferIdsNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferByIdsNumberBefore =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsNumberBefore',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsNumberBefore);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferIdsNumber,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferByIdsNumberAfter = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferByIdsNumberAfter',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferIdsNumber,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferIdsNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferIdsNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferByIdsNumberAfter =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsNumberAfter',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsNumberAfter,
      callback);
};


/**
 * @param {!proto.buffer.BufferIdsNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferByIdsNumberAfter =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferByIdsNumberAfter',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferByIdsNumberAfter);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersIdsSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferFirstByIds = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferFirstByIds',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersIdsSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersIdsSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersIdsSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferFirstByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstByIds',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstByIds,
      callback);
};


/**
 * @param {!proto.buffer.BuffersIdsSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferFirstByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstByIds',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersIdsSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferFirstOffsetByIds = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferFirstOffsetByIds',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersIdsSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersIdsSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersIdsSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferFirstOffsetByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstOffsetByIds',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstOffsetByIds,
      callback);
};


/**
 * @param {!proto.buffer.BuffersIdsSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferFirstOffsetByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstOffsetByIds',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstOffsetByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersIdsSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferLastByIds = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferLastByIds',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersIdsSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersIdsSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersIdsSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferLastByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastByIds',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastByIds,
      callback);
};


/**
 * @param {!proto.buffer.BuffersIdsSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferLastByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastByIds',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersIdsSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferLastOffsetByIds = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferLastOffsetByIds',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersIdsSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersIdsSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersIdsSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferLastOffsetByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastOffsetByIds',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastOffsetByIds,
      callback);
};


/**
 * @param {!proto.buffer.BuffersIdsSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferLastOffsetByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastOffsetByIds',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastOffsetByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferSetTime,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferBySetTime = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferBySetTime',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferSetTime,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferSetTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferSetTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferBySetTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetTime,
      callback);
};


/**
 * @param {!proto.buffer.BufferSetTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferBySetTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferSetTime,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferBySetLastTime = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferBySetLastTime',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferSetTime,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferSetTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferSetTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferBySetLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetLastTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetLastTime,
      callback);
};


/**
 * @param {!proto.buffer.BufferSetTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferBySetLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetLastTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferSetRange,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferBySetRangeTime = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferBySetRangeTime',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferSetRange,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferSetRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferSetRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferBySetRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetRangeTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetRangeTime,
      callback);
};


/**
 * @param {!proto.buffer.BufferSetRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferBySetRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetRangeTime',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferSetNumber,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferBySetNumberBefore = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferBySetNumberBefore',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferSetNumber,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferSetNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferSetNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferBySetNumberBefore =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetNumberBefore',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetNumberBefore,
      callback);
};


/**
 * @param {!proto.buffer.BufferSetNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferBySetNumberBefore =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetNumberBefore',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetNumberBefore);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferSetNumber,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferBySetNumberAfter = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferBySetNumberAfter',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferSetNumber,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BufferSetNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferSetNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferBySetNumberAfter =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetNumberAfter',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetNumberAfter,
      callback);
};


/**
 * @param {!proto.buffer.BufferSetNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferBySetNumberAfter =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferBySetNumberAfter',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferBySetNumberAfter);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersSetSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferFirstBySet = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferFirstBySet',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersSetSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersSetSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersSetSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferFirstBySet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstBySet',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstBySet,
      callback);
};


/**
 * @param {!proto.buffer.BuffersSetSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferFirstBySet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstBySet',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstBySet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersSetSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferFirstOffsetBySet = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferFirstOffsetBySet',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersSetSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersSetSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersSetSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferFirstOffsetBySet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstOffsetBySet',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstOffsetBySet,
      callback);
};


/**
 * @param {!proto.buffer.BuffersSetSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferFirstOffsetBySet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferFirstOffsetBySet',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferFirstOffsetBySet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersSetSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferLastBySet = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferLastBySet',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersSetSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersSetSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersSetSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferLastBySet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastBySet',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastBySet,
      callback);
};


/**
 * @param {!proto.buffer.BuffersSetSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferLastBySet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastBySet',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastBySet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BuffersSetSelector,
 *   !proto.buffer.BufferListResponse>}
 */
const methodDescriptor_BufferService_ListBufferLastOffsetBySet = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/ListBufferLastOffsetBySet',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BuffersSetSelector,
  proto$3.buffer.BufferListResponse,
  /**
   * @param {!proto.buffer.BuffersSetSelector} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferListResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BuffersSetSelector} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.listBufferLastOffsetBySet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastOffsetBySet',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastOffsetBySet,
      callback);
};


/**
 * @param {!proto.buffer.BuffersSetSelector} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferListResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.listBufferLastOffsetBySet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/ListBufferLastOffsetBySet',
      request,
      metadata || {},
      methodDescriptor_BufferService_ListBufferLastOffsetBySet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferSchema,
 *   !proto.buffer.BufferCreateResponse>}
 */
const methodDescriptor_BufferService_CreateBuffer = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/CreateBuffer',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferSchema,
  proto$3.buffer.BufferCreateResponse,
  /**
   * @param {!proto.buffer.BufferSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferCreateResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.createBuffer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/CreateBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_CreateBuffer,
      callback);
};


/**
 * @param {!proto.buffer.BufferSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferCreateResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.createBuffer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/CreateBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_CreateBuffer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferUpdate,
 *   !proto.buffer.BufferChangeResponse>}
 */
const methodDescriptor_BufferService_UpdateBuffer = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/UpdateBuffer',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferUpdate,
  proto$3.buffer.BufferChangeResponse,
  /**
   * @param {!proto.buffer.BufferUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferChangeResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.updateBuffer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/UpdateBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_UpdateBuffer,
      callback);
};


/**
 * @param {!proto.buffer.BufferUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferChangeResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.updateBuffer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/UpdateBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_UpdateBuffer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferId,
 *   !proto.buffer.BufferChangeResponse>}
 */
const methodDescriptor_BufferService_DeleteBuffer = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/DeleteBuffer',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferId,
  proto$3.buffer.BufferChangeResponse,
  /**
   * @param {!proto.buffer.BufferId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferChangeResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.deleteBuffer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/DeleteBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_DeleteBuffer,
      callback);
};


/**
 * @param {!proto.buffer.BufferId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferChangeResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.deleteBuffer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/DeleteBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_DeleteBuffer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.buffer.BufferCount,
 *   !proto.buffer.BufferCountResponse>}
 */
const methodDescriptor_BufferService_CountBuffer = new grpc$2.web.MethodDescriptor(
  '/buffer.BufferService/CountBuffer',
  grpc$2.web.MethodType.UNARY,
  proto$3.buffer.BufferCount,
  proto$3.buffer.BufferCountResponse,
  /**
   * @param {!proto.buffer.BufferCount} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.buffer.BufferCountResponse.deserializeBinary
);


/**
 * @param {!proto.buffer.BufferCount} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.buffer.BufferCountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.buffer.BufferCountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.buffer.BufferServiceClient.prototype.countBuffer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/buffer.BufferService/CountBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_CountBuffer,
      callback);
};


/**
 * @param {!proto.buffer.BufferCount} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.buffer.BufferCountResponse>}
 *     Promise that resolves to the response
 */
proto$3.buffer.BufferServicePromiseClient.prototype.countBuffer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/buffer.BufferService/CountBuffer',
      request,
      metadata || {},
      methodDescriptor_BufferService_CountBuffer);
};


var buffer_grpc_web_pb = proto$3.buffer;

var buffer_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(buffer_grpc_web_pb);

var slice_pb = {};

(function (exports) {
	// source: rmcs_resource_api/slice.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.slice.SliceChangeResponse', null, global);
	goog.exportSymbol('proto.slice.SliceCreateResponse', null, global);
	goog.exportSymbol('proto.slice.SliceId', null, global);
	goog.exportSymbol('proto.slice.SliceListResponse', null, global);
	goog.exportSymbol('proto.slice.SliceNameRange', null, global);
	goog.exportSymbol('proto.slice.SliceNameTime', null, global);
	goog.exportSymbol('proto.slice.SliceOption', null, global);
	goog.exportSymbol('proto.slice.SliceRange', null, global);
	goog.exportSymbol('proto.slice.SliceReadResponse', null, global);
	goog.exportSymbol('proto.slice.SliceSchema', null, global);
	goog.exportSymbol('proto.slice.SliceSetListResponse', null, global);
	goog.exportSymbol('proto.slice.SliceSetOption', null, global);
	goog.exportSymbol('proto.slice.SliceSetRange', null, global);
	goog.exportSymbol('proto.slice.SliceSetReadResponse', null, global);
	goog.exportSymbol('proto.slice.SliceSetSchema', null, global);
	goog.exportSymbol('proto.slice.SliceSetTime', null, global);
	goog.exportSymbol('proto.slice.SliceTime', null, global);
	goog.exportSymbol('proto.slice.SliceUpdate', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceSchema.displayName = 'proto.slice.SliceSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceId.displayName = 'proto.slice.SliceId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceTime.displayName = 'proto.slice.SliceTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceRange.displayName = 'proto.slice.SliceRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceNameTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceNameTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceNameTime.displayName = 'proto.slice.SliceNameTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceNameRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceNameRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceNameRange.displayName = 'proto.slice.SliceNameRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceOption = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceOption, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceOption.displayName = 'proto.slice.SliceOption';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceUpdate.displayName = 'proto.slice.SliceUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceSetSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceSetSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceSetSchema.displayName = 'proto.slice.SliceSetSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceSetTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceSetTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceSetTime.displayName = 'proto.slice.SliceSetTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceSetRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceSetRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceSetRange.displayName = 'proto.slice.SliceSetRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceSetOption = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceSetOption, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceSetOption.displayName = 'proto.slice.SliceSetOption';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceReadResponse.displayName = 'proto.slice.SliceReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.slice.SliceListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.slice.SliceListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceListResponse.displayName = 'proto.slice.SliceListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceCreateResponse.displayName = 'proto.slice.SliceCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceChangeResponse.displayName = 'proto.slice.SliceChangeResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceSetReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.slice.SliceSetReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceSetReadResponse.displayName = 'proto.slice.SliceSetReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.slice.SliceSetListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.slice.SliceSetListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.slice.SliceSetListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.slice.SliceSetListResponse.displayName = 'proto.slice.SliceSetListResponse';
	}



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0),
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestampBegin: jspb.Message.getFieldWithDefault(msg, 4, 0),
	timestampEnd: jspb.Message.getFieldWithDefault(msg, 5, 0),
	name: jspb.Message.getFieldWithDefault(msg, 6, ""),
	description: jspb.Message.getFieldWithDefault(msg, 7, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceSchema}
	 */
	proto.slice.SliceSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceSchema;
	  return proto.slice.SliceSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceSchema}
	 */
	proto.slice.SliceSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestampBegin(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestampEnd(value);
	      break;
	    case 6:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 7:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getTimestampBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = message.getTimestampEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      5,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      6,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      7,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.slice.SliceSchema.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSchema} returns this
	 */
	proto.slice.SliceSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes device_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceSchema.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id = 2;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.slice.SliceSchema.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSchema.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceSchema} returns this
	 */
	proto.slice.SliceSchema.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional bytes model_id = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceSchema.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes model_id = 3;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.slice.SliceSchema.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSchema.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceSchema} returns this
	 */
	proto.slice.SliceSchema.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};


	/**
	 * optional int64 timestamp_begin = 4;
	 * @return {number}
	 */
	proto.slice.SliceSchema.prototype.getTimestampBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSchema} returns this
	 */
	proto.slice.SliceSchema.prototype.setTimestampBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};


	/**
	 * optional int64 timestamp_end = 5;
	 * @return {number}
	 */
	proto.slice.SliceSchema.prototype.getTimestampEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSchema} returns this
	 */
	proto.slice.SliceSchema.prototype.setTimestampEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 5, value);
	};


	/**
	 * optional string name = 6;
	 * @return {string}
	 */
	proto.slice.SliceSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceSchema} returns this
	 */
	proto.slice.SliceSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 6, value);
	};


	/**
	 * optional string description = 7;
	 * @return {string}
	 */
	proto.slice.SliceSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceSchema} returns this
	 */
	proto.slice.SliceSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 7, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceId.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceId.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceId}
	 */
	proto.slice.SliceId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceId;
	  return proto.slice.SliceId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceId}
	 */
	proto.slice.SliceId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.slice.SliceId.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceId} returns this
	 */
	proto.slice.SliceId.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceTime.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceTime}
	 */
	proto.slice.SliceTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceTime;
	  return proto.slice.SliceTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceTime}
	 */
	proto.slice.SliceTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceTime.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.slice.SliceTime.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceTime.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceTime} returns this
	 */
	proto.slice.SliceTime.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceTime.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.slice.SliceTime.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceTime.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceTime} returns this
	 */
	proto.slice.SliceTime.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.slice.SliceTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceTime} returns this
	 */
	proto.slice.SliceTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceRange.toObject = function(includeInstance, msg) {
	  var obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	begin: jspb.Message.getFieldWithDefault(msg, 3, 0),
	end: jspb.Message.getFieldWithDefault(msg, 4, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceRange}
	 */
	proto.slice.SliceRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceRange;
	  return proto.slice.SliceRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceRange}
	 */
	proto.slice.SliceRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getModelId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceRange.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.slice.SliceRange.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceRange.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceRange} returns this
	 */
	proto.slice.SliceRange.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceRange.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.slice.SliceRange.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceRange.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceRange} returns this
	 */
	proto.slice.SliceRange.prototype.setModelId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 begin = 3;
	 * @return {number}
	 */
	proto.slice.SliceRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceRange} returns this
	 */
	proto.slice.SliceRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int64 end = 4;
	 * @return {number}
	 */
	proto.slice.SliceRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceRange} returns this
	 */
	proto.slice.SliceRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceNameTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceNameTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceNameTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceNameTime.toObject = function(includeInstance, msg) {
	  var obj = {
	name: jspb.Message.getFieldWithDefault(msg, 1, ""),
	timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceNameTime}
	 */
	proto.slice.SliceNameTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceNameTime;
	  return proto.slice.SliceNameTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceNameTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceNameTime}
	 */
	proto.slice.SliceNameTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceNameTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceNameTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceNameTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceNameTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.slice.SliceNameTime.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceNameTime} returns this
	 */
	proto.slice.SliceNameTime.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional int64 timestamp = 2;
	 * @return {number}
	 */
	proto.slice.SliceNameTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceNameTime} returns this
	 */
	proto.slice.SliceNameTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceNameRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceNameRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceNameRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceNameRange.toObject = function(includeInstance, msg) {
	  var obj = {
	name: jspb.Message.getFieldWithDefault(msg, 1, ""),
	begin: jspb.Message.getFieldWithDefault(msg, 2, 0),
	end: jspb.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceNameRange}
	 */
	proto.slice.SliceNameRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceNameRange;
	  return proto.slice.SliceNameRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceNameRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceNameRange}
	 */
	proto.slice.SliceNameRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceNameRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceNameRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceNameRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceNameRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.slice.SliceNameRange.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceNameRange} returns this
	 */
	proto.slice.SliceNameRange.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional int64 begin = 2;
	 * @return {number}
	 */
	proto.slice.SliceNameRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceNameRange} returns this
	 */
	proto.slice.SliceNameRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional int64 end = 3;
	 * @return {number}
	 */
	proto.slice.SliceNameRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceNameRange} returns this
	 */
	proto.slice.SliceNameRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceOption.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceOption.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceOption} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceOption.toObject = function(includeInstance, msg) {
	  var f, obj = {
	deviceId: msg.getDeviceId_asB64(),
	modelId: msg.getModelId_asB64(),
	name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	begin: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
	end: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceOption}
	 */
	proto.slice.SliceOption.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceOption;
	  return proto.slice.SliceOption.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceOption} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceOption}
	 */
	proto.slice.SliceOption.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setModelId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceOption.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceOption.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceOption} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceOption.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeInt64(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes device_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceOption.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes device_id = 1;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.slice.SliceOption.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceOption.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.setDeviceId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.clearDeviceId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceOption.prototype.hasDeviceId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes model_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceOption.prototype.getModelId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes model_id = 2;
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {string}
	 */
	proto.slice.SliceOption.prototype.getModelId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getModelId()));
	};


	/**
	 * optional bytes model_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getModelId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceOption.prototype.getModelId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getModelId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.setModelId = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.clearModelId = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceOption.prototype.hasModelId = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.slice.SliceOption.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.clearName = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceOption.prototype.hasName = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional int64 begin = 4;
	 * @return {number}
	 */
	proto.slice.SliceOption.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.setBegin = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.clearBegin = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceOption.prototype.hasBegin = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional int64 end = 5;
	 * @return {number}
	 */
	proto.slice.SliceOption.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.setEnd = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceOption} returns this
	 */
	proto.slice.SliceOption.prototype.clearEnd = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceOption.prototype.hasEnd = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0),
	timestampBegin: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	timestampEnd: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	name: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
	description: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceUpdate}
	 */
	proto.slice.SliceUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceUpdate;
	  return proto.slice.SliceUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceUpdate}
	 */
	proto.slice.SliceUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestampBegin(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestampEnd(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.slice.SliceUpdate.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceUpdate} returns this
	 */
	proto.slice.SliceUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional int64 timestamp_begin = 2;
	 * @return {number}
	 */
	proto.slice.SliceUpdate.prototype.getTimestampBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceUpdate} returns this
	 */
	proto.slice.SliceUpdate.prototype.setTimestampBegin = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceUpdate} returns this
	 */
	proto.slice.SliceUpdate.prototype.clearTimestampBegin = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceUpdate.prototype.hasTimestampBegin = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional int64 timestamp_end = 3;
	 * @return {number}
	 */
	proto.slice.SliceUpdate.prototype.getTimestampEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceUpdate} returns this
	 */
	proto.slice.SliceUpdate.prototype.setTimestampEnd = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceUpdate} returns this
	 */
	proto.slice.SliceUpdate.prototype.clearTimestampEnd = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceUpdate.prototype.hasTimestampEnd = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional string name = 4;
	 * @return {string}
	 */
	proto.slice.SliceUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceUpdate} returns this
	 */
	proto.slice.SliceUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceUpdate} returns this
	 */
	proto.slice.SliceUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional string description = 5;
	 * @return {string}
	 */
	proto.slice.SliceUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceUpdate} returns this
	 */
	proto.slice.SliceUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceUpdate} returns this
	 */
	proto.slice.SliceUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceSetSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceSetSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceSetSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0),
	setId: msg.getSetId_asB64(),
	timestampBegin: jspb.Message.getFieldWithDefault(msg, 3, 0),
	timestampEnd: jspb.Message.getFieldWithDefault(msg, 4, 0),
	name: jspb.Message.getFieldWithDefault(msg, 5, ""),
	description: jspb.Message.getFieldWithDefault(msg, 6, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceSetSchema}
	 */
	proto.slice.SliceSetSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceSetSchema;
	  return proto.slice.SliceSetSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceSetSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceSetSchema}
	 */
	proto.slice.SliceSetSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestampBegin(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestampEnd(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 6:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceSetSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceSetSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestampBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getTimestampEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      6,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.slice.SliceSetSchema.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSetSchema} returns this
	 */
	proto.slice.SliceSetSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes set_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceSetSchema.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes set_id = 2;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.slice.SliceSetSchema.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetSchema.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceSetSchema} returns this
	 */
	proto.slice.SliceSetSchema.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int64 timestamp_begin = 3;
	 * @return {number}
	 */
	proto.slice.SliceSetSchema.prototype.getTimestampBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSetSchema} returns this
	 */
	proto.slice.SliceSetSchema.prototype.setTimestampBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional int64 timestamp_end = 4;
	 * @return {number}
	 */
	proto.slice.SliceSetSchema.prototype.getTimestampEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSetSchema} returns this
	 */
	proto.slice.SliceSetSchema.prototype.setTimestampEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};


	/**
	 * optional string name = 5;
	 * @return {string}
	 */
	proto.slice.SliceSetSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceSetSchema} returns this
	 */
	proto.slice.SliceSetSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 5, value);
	};


	/**
	 * optional string description = 6;
	 * @return {string}
	 */
	proto.slice.SliceSetSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceSetSchema} returns this
	 */
	proto.slice.SliceSetSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 6, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceSetTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceSetTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceSetTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetTime.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceSetTime}
	 */
	proto.slice.SliceSetTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceSetTime;
	  return proto.slice.SliceSetTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceSetTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceSetTime}
	 */
	proto.slice.SliceSetTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceSetTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceSetTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceSetTime.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.slice.SliceSetTime.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetTime.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceSetTime} returns this
	 */
	proto.slice.SliceSetTime.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 timestamp = 2;
	 * @return {number}
	 */
	proto.slice.SliceSetTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSetTime} returns this
	 */
	proto.slice.SliceSetTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceSetRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceSetRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceSetRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetRange.toObject = function(includeInstance, msg) {
	  var obj = {
	setId: msg.getSetId_asB64(),
	begin: jspb.Message.getFieldWithDefault(msg, 2, 0),
	end: jspb.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceSetRange}
	 */
	proto.slice.SliceSetRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceSetRange;
	  return proto.slice.SliceSetRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceSetRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceSetRange}
	 */
	proto.slice.SliceSetRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceSetRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceSetRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getSetId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceSetRange.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.slice.SliceSetRange.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetRange.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceSetRange} returns this
	 */
	proto.slice.SliceSetRange.prototype.setSetId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 begin = 2;
	 * @return {number}
	 */
	proto.slice.SliceSetRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSetRange} returns this
	 */
	proto.slice.SliceSetRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional int64 end = 3;
	 * @return {number}
	 */
	proto.slice.SliceSetRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSetRange} returns this
	 */
	proto.slice.SliceSetRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceSetOption.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceSetOption.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceSetOption} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetOption.toObject = function(includeInstance, msg) {
	  var f, obj = {
	setId: msg.getSetId_asB64(),
	name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
	begin: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	end: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceSetOption}
	 */
	proto.slice.SliceSetOption.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceSetOption;
	  return proto.slice.SliceSetOption.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceSetOption} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceSetOption}
	 */
	proto.slice.SliceSetOption.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSetId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetOption.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceSetOption.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceSetOption} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetOption.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes set_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.slice.SliceSetOption.prototype.getSetId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes set_id = 1;
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {string}
	 */
	proto.slice.SliceSetOption.prototype.getSetId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getSetId()));
	};


	/**
	 * optional bytes set_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSetId()`
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetOption.prototype.getSetId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getSetId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.slice.SliceSetOption} returns this
	 */
	proto.slice.SliceSetOption.prototype.setSetId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceSetOption} returns this
	 */
	proto.slice.SliceSetOption.prototype.clearSetId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceSetOption.prototype.hasSetId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.slice.SliceSetOption.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.slice.SliceSetOption} returns this
	 */
	proto.slice.SliceSetOption.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceSetOption} returns this
	 */
	proto.slice.SliceSetOption.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceSetOption.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional int64 begin = 3;
	 * @return {number}
	 */
	proto.slice.SliceSetOption.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSetOption} returns this
	 */
	proto.slice.SliceSetOption.prototype.setBegin = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceSetOption} returns this
	 */
	proto.slice.SliceSetOption.prototype.clearBegin = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceSetOption.prototype.hasBegin = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional int64 end = 4;
	 * @return {number}
	 */
	proto.slice.SliceSetOption.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceSetOption} returns this
	 */
	proto.slice.SliceSetOption.prototype.setEnd = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.slice.SliceSetOption} returns this
	 */
	proto.slice.SliceSetOption.prototype.clearEnd = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceSetOption.prototype.hasEnd = function() {
	  return jspb.Message.getField(this, 4) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.slice.SliceSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceReadResponse}
	 */
	proto.slice.SliceReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceReadResponse;
	  return proto.slice.SliceReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceReadResponse}
	 */
	proto.slice.SliceReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.slice.SliceSchema;
	      reader.readMessage(value,proto.slice.SliceSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.slice.SliceSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional SliceSchema result = 1;
	 * @return {?proto.slice.SliceSchema}
	 */
	proto.slice.SliceReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.slice.SliceSchema} */ (
	    jspb.Message.getWrapperField(this, proto.slice.SliceSchema, 1));
	};


	/**
	 * @param {?proto.slice.SliceSchema|undefined} value
	 * @return {!proto.slice.SliceReadResponse} returns this
	*/
	proto.slice.SliceReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.slice.SliceReadResponse} returns this
	 */
	proto.slice.SliceReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.slice.SliceListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.slice.SliceSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceListResponse}
	 */
	proto.slice.SliceListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceListResponse;
	  return proto.slice.SliceListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceListResponse}
	 */
	proto.slice.SliceListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.slice.SliceSchema;
	      reader.readMessage(value,proto.slice.SliceSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.slice.SliceSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated SliceSchema results = 1;
	 * @return {!Array<!proto.slice.SliceSchema>}
	 */
	proto.slice.SliceListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.slice.SliceSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.slice.SliceSchema, 1));
	};


	/**
	 * @param {!Array<!proto.slice.SliceSchema>} value
	 * @return {!proto.slice.SliceListResponse} returns this
	*/
	proto.slice.SliceListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.slice.SliceSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.slice.SliceSchema}
	 */
	proto.slice.SliceListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.slice.SliceSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.slice.SliceListResponse} returns this
	 */
	proto.slice.SliceListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	id: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceCreateResponse}
	 */
	proto.slice.SliceCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceCreateResponse;
	  return proto.slice.SliceCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceCreateResponse}
	 */
	proto.slice.SliceCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int32 id = 1;
	 * @return {number}
	 */
	proto.slice.SliceCreateResponse.prototype.getId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.slice.SliceCreateResponse} returns this
	 */
	proto.slice.SliceCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceChangeResponse}
	 */
	proto.slice.SliceChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceChangeResponse;
	  return proto.slice.SliceChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceChangeResponse}
	 */
	proto.slice.SliceChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceSetReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceSetReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceSetReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.slice.SliceSetSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceSetReadResponse}
	 */
	proto.slice.SliceSetReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceSetReadResponse;
	  return proto.slice.SliceSetReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceSetReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceSetReadResponse}
	 */
	proto.slice.SliceSetReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.slice.SliceSetSchema;
	      reader.readMessage(value,proto.slice.SliceSetSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceSetReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceSetReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.slice.SliceSetSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional SliceSetSchema result = 1;
	 * @return {?proto.slice.SliceSetSchema}
	 */
	proto.slice.SliceSetReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.slice.SliceSetSchema} */ (
	    jspb.Message.getWrapperField(this, proto.slice.SliceSetSchema, 1));
	};


	/**
	 * @param {?proto.slice.SliceSetSchema|undefined} value
	 * @return {!proto.slice.SliceSetReadResponse} returns this
	*/
	proto.slice.SliceSetReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.slice.SliceSetReadResponse} returns this
	 */
	proto.slice.SliceSetReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.slice.SliceSetReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.slice.SliceSetListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.slice.SliceSetListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.slice.SliceSetListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.slice.SliceSetListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.slice.SliceSetSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.slice.SliceSetListResponse}
	 */
	proto.slice.SliceSetListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.slice.SliceSetListResponse;
	  return proto.slice.SliceSetListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.slice.SliceSetListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.slice.SliceSetListResponse}
	 */
	proto.slice.SliceSetListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.slice.SliceSetSchema;
	      reader.readMessage(value,proto.slice.SliceSetSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.slice.SliceSetListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.slice.SliceSetListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.slice.SliceSetListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.slice.SliceSetListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.slice.SliceSetSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated SliceSetSchema results = 1;
	 * @return {!Array<!proto.slice.SliceSetSchema>}
	 */
	proto.slice.SliceSetListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.slice.SliceSetSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.slice.SliceSetSchema, 1));
	};


	/**
	 * @param {!Array<!proto.slice.SliceSetSchema>} value
	 * @return {!proto.slice.SliceSetListResponse} returns this
	*/
	proto.slice.SliceSetListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.slice.SliceSetSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.slice.SliceSetSchema}
	 */
	proto.slice.SliceSetListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.slice.SliceSetSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.slice.SliceSetListResponse} returns this
	 */
	proto.slice.SliceSetListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};


	goog.object.extend(exports, proto.slice); 
} (slice_pb));

/**
 * @fileoverview gRPC-Web generated client stub for slice
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_resource_api/slice.proto


/* eslint-disable */
// @ts-nocheck



const grpc$1 = {};
grpc$1.web = require$$0$1;

const proto$2 = {};
proto$2.slice = slice_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$2.slice.SliceServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$1.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$2.slice.SliceServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$1.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceReadResponse>}
 */
const methodDescriptor_SliceService_ReadSlice = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ReadSlice',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceId,
  proto$2.slice.SliceReadResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceReadResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.readSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ReadSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceReadResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.readSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ReadSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceTime,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByTime = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByTime',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceTime,
  proto$2.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceByTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByTime,
      callback);
};


/**
 * @param {!proto.slice.SliceTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceByTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceRange,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByRangeTime = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByRangeTime',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceRange,
  proto$2.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByRangeTime,
      callback);
};


/**
 * @param {!proto.slice.SliceRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceNameTime,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByNameTime = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByNameTime',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceNameTime,
  proto$2.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceNameTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceNameTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceByNameTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByNameTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByNameTime,
      callback);
};


/**
 * @param {!proto.slice.SliceNameTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceByNameTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByNameTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByNameTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceNameRange,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByNameRangeTime = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByNameRangeTime',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceNameRange,
  proto$2.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceNameRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceNameRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceByNameRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByNameRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByNameRangeTime,
      callback);
};


/**
 * @param {!proto.slice.SliceNameRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceByNameRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByNameRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByNameRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceOption,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceOption = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceOption',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceOption,
  proto$2.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceOption',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceOption,
      callback);
};


/**
 * @param {!proto.slice.SliceOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceOption',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSchema,
 *   !proto.slice.SliceCreateResponse>}
 */
const methodDescriptor_SliceService_CreateSlice = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/CreateSlice',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceSchema,
  proto$2.slice.SliceCreateResponse,
  /**
   * @param {!proto.slice.SliceSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceCreateResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.createSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/CreateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceCreateResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.createSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/CreateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceUpdate,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_UpdateSlice = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/UpdateSlice',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceUpdate,
  proto$2.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.updateSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/UpdateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.updateSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/UpdateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_DeleteSlice = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/DeleteSlice',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceId,
  proto$2.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.deleteSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/DeleteSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.deleteSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/DeleteSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceSetReadResponse>}
 */
const methodDescriptor_SliceService_ReadSliceSet = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ReadSliceSet',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceId,
  proto$2.slice.SliceSetReadResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceSetReadResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.readSliceSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ReadSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSliceSet,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetReadResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.readSliceSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ReadSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSliceSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSetTime,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetByTime = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetByTime',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceSetTime,
  proto$2.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceSetTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSetTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceSetByTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByTime,
      callback);
};


/**
 * @param {!proto.slice.SliceSetTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceSetByTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSetRange,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetByRangeTime = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetByRangeTime',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceSetRange,
  proto$2.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceSetRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSetRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceSetByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByRangeTime,
      callback);
};


/**
 * @param {!proto.slice.SliceSetRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceSetByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceNameTime,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetByNameTime = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetByNameTime',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceNameTime,
  proto$2.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceNameTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceNameTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceSetByNameTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByNameTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByNameTime,
      callback);
};


/**
 * @param {!proto.slice.SliceNameTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceSetByNameTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByNameTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByNameTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceNameRange,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetByNameRangeTime = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetByNameRangeTime',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceNameRange,
  proto$2.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceNameRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceNameRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceSetByNameRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByNameRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByNameRangeTime,
      callback);
};


/**
 * @param {!proto.slice.SliceNameRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceSetByNameRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByNameRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByNameRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSetOption,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetOption = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetOption',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceSetOption,
  proto$2.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceSetOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSetOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.listSliceSetOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetOption',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetOption,
      callback);
};


/**
 * @param {!proto.slice.SliceSetOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.listSliceSetOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetOption',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSetSchema,
 *   !proto.slice.SliceCreateResponse>}
 */
const methodDescriptor_SliceService_CreateSliceSet = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/CreateSliceSet',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceSetSchema,
  proto$2.slice.SliceCreateResponse,
  /**
   * @param {!proto.slice.SliceSetSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceCreateResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSetSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.createSliceSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/CreateSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSliceSet,
      callback);
};


/**
 * @param {!proto.slice.SliceSetSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceCreateResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.createSliceSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/CreateSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSliceSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceUpdate,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_UpdateSliceSet = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/UpdateSliceSet',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceUpdate,
  proto$2.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.updateSliceSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/UpdateSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSliceSet,
      callback);
};


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.updateSliceSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/UpdateSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSliceSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_DeleteSliceSet = new grpc$1.web.MethodDescriptor(
  '/slice.SliceService/DeleteSliceSet',
  grpc$1.web.MethodType.UNARY,
  proto$2.slice.SliceId,
  proto$2.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.slice.SliceServiceClient.prototype.deleteSliceSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/DeleteSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSliceSet,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto$2.slice.SliceServicePromiseClient.prototype.deleteSliceSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/DeleteSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSliceSet);
};


var slice_grpc_web_pb = proto$2.slice;

var slice_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(slice_grpc_web_pb);

var log_pb = {};

(function (exports) {
	// source: rmcs_resource_api/log.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	var rmcs_resource_api_common_pb = common_pb;
	goog.object.extend(proto, rmcs_resource_api_common_pb);
	goog.exportSymbol('proto.log.LogChangeResponse', null, global);
	goog.exportSymbol('proto.log.LogId', null, global);
	goog.exportSymbol('proto.log.LogListResponse', null, global);
	goog.exportSymbol('proto.log.LogRange', null, global);
	goog.exportSymbol('proto.log.LogReadResponse', null, global);
	goog.exportSymbol('proto.log.LogSchema', null, global);
	goog.exportSymbol('proto.log.LogTime', null, global);
	goog.exportSymbol('proto.log.LogUpdate', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.log.LogSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.log.LogSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.log.LogSchema.displayName = 'proto.log.LogSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.log.LogId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.log.LogId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.log.LogId.displayName = 'proto.log.LogId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.log.LogTime = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.log.LogTime, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.log.LogTime.displayName = 'proto.log.LogTime';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.log.LogRange = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.log.LogRange, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.log.LogRange.displayName = 'proto.log.LogRange';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.log.LogUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.log.LogUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.log.LogUpdate.displayName = 'proto.log.LogUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.log.LogReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.log.LogReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.log.LogReadResponse.displayName = 'proto.log.LogReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.log.LogListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.log.LogListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.log.LogListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.log.LogListResponse.displayName = 'proto.log.LogListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.log.LogChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.log.LogChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.log.LogChangeResponse.displayName = 'proto.log.LogChangeResponse';
	}



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.log.LogSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.log.LogSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.log.LogSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
	deviceId: msg.getDeviceId_asB64(),
	status: jspb.Message.getFieldWithDefault(msg, 3, 0),
	logBytes: msg.getLogBytes_asB64(),
	logType: jspb.Message.getFieldWithDefault(msg, 5, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.log.LogSchema}
	 */
	proto.log.LogSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.log.LogSchema;
	  return proto.log.LogSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.log.LogSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.log.LogSchema}
	 */
	proto.log.LogSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setLogBytes(value);
	      break;
	    case 5:
	      var value = /** @type {!proto.common.DataType} */ (reader.readEnum());
	      msg.setLogType(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.log.LogSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.log.LogSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.log.LogSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getStatus();
	  if (f !== 0) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	  f = message.getLogBytes_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	  f = message.getLogType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional int64 timestamp = 1;
	 * @return {number}
	 */
	proto.log.LogSchema.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogSchema} returns this
	 */
	proto.log.LogSchema.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes device_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.log.LogSchema.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id = 2;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.log.LogSchema.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.log.LogSchema.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.log.LogSchema} returns this
	 */
	proto.log.LogSchema.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int32 status = 3;
	 * @return {number}
	 */
	proto.log.LogSchema.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogSchema} returns this
	 */
	proto.log.LogSchema.prototype.setStatus = function(value) {
	  return jspb.Message.setProto3IntField(this, 3, value);
	};


	/**
	 * optional bytes log_bytes = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.log.LogSchema.prototype.getLogBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes log_bytes = 4;
	 * This is a type-conversion wrapper around `getLogBytes()`
	 * @return {string}
	 */
	proto.log.LogSchema.prototype.getLogBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getLogBytes()));
	};


	/**
	 * optional bytes log_bytes = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getLogBytes()`
	 * @return {!Uint8Array}
	 */
	proto.log.LogSchema.prototype.getLogBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getLogBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.log.LogSchema} returns this
	 */
	proto.log.LogSchema.prototype.setLogBytes = function(value) {
	  return jspb.Message.setProto3BytesField(this, 4, value);
	};


	/**
	 * optional common.DataType log_type = 5;
	 * @return {!proto.common.DataType}
	 */
	proto.log.LogSchema.prototype.getLogType = function() {
	  return /** @type {!proto.common.DataType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @return {!proto.log.LogSchema} returns this
	 */
	proto.log.LogSchema.prototype.setLogType = function(value) {
	  return jspb.Message.setProto3EnumField(this, 5, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.log.LogId.prototype.toObject = function(opt_includeInstance) {
	  return proto.log.LogId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.log.LogId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogId.toObject = function(includeInstance, msg) {
	  var obj = {
	timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
	deviceId: msg.getDeviceId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.log.LogId}
	 */
	proto.log.LogId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.log.LogId;
	  return proto.log.LogId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.log.LogId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.log.LogId}
	 */
	proto.log.LogId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.log.LogId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.log.LogId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.log.LogId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional int64 timestamp = 1;
	 * @return {number}
	 */
	proto.log.LogId.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogId} returns this
	 */
	proto.log.LogId.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes device_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.log.LogId.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id = 2;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.log.LogId.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.log.LogId.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.log.LogId} returns this
	 */
	proto.log.LogId.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.log.LogTime.prototype.toObject = function(opt_includeInstance) {
	  return proto.log.LogTime.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.log.LogTime} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogTime.toObject = function(includeInstance, msg) {
	  var f, obj = {
	timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
	deviceId: msg.getDeviceId_asB64(),
	status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.log.LogTime}
	 */
	proto.log.LogTime.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.log.LogTime;
	  return proto.log.LogTime.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.log.LogTime} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.log.LogTime}
	 */
	proto.log.LogTime.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.log.LogTime.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.log.LogTime.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.log.LogTime} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogTime.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional int64 timestamp = 1;
	 * @return {number}
	 */
	proto.log.LogTime.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogTime} returns this
	 */
	proto.log.LogTime.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes device_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.log.LogTime.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id = 2;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.log.LogTime.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.log.LogTime.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.log.LogTime} returns this
	 */
	proto.log.LogTime.prototype.setDeviceId = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.log.LogTime} returns this
	 */
	proto.log.LogTime.prototype.clearDeviceId = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.log.LogTime.prototype.hasDeviceId = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional int32 status = 3;
	 * @return {number}
	 */
	proto.log.LogTime.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogTime} returns this
	 */
	proto.log.LogTime.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.log.LogTime} returns this
	 */
	proto.log.LogTime.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.log.LogTime.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 3) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.log.LogRange.prototype.toObject = function(opt_includeInstance) {
	  return proto.log.LogRange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.log.LogRange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogRange.toObject = function(includeInstance, msg) {
	  var f, obj = {
	begin: jspb.Message.getFieldWithDefault(msg, 1, 0),
	end: jspb.Message.getFieldWithDefault(msg, 2, 0),
	deviceId: msg.getDeviceId_asB64(),
	status: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.log.LogRange}
	 */
	proto.log.LogRange.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.log.LogRange;
	  return proto.log.LogRange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.log.LogRange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.log.LogRange}
	 */
	proto.log.LogRange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBegin(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnd(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.log.LogRange.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.log.LogRange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.log.LogRange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogRange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getBegin();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getEnd();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional int64 begin = 1;
	 * @return {number}
	 */
	proto.log.LogRange.prototype.getBegin = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogRange} returns this
	 */
	proto.log.LogRange.prototype.setBegin = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional int64 end = 2;
	 * @return {number}
	 */
	proto.log.LogRange.prototype.getEnd = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogRange} returns this
	 */
	proto.log.LogRange.prototype.setEnd = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional bytes device_id = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.log.LogRange.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes device_id = 3;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.log.LogRange.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.log.LogRange.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.log.LogRange} returns this
	 */
	proto.log.LogRange.prototype.setDeviceId = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.log.LogRange} returns this
	 */
	proto.log.LogRange.prototype.clearDeviceId = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.log.LogRange.prototype.hasDeviceId = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional int32 status = 4;
	 * @return {number}
	 */
	proto.log.LogRange.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogRange} returns this
	 */
	proto.log.LogRange.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.log.LogRange} returns this
	 */
	proto.log.LogRange.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.log.LogRange.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 4) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.log.LogUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.log.LogUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.log.LogUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogUpdate.toObject = function(includeInstance, msg) {
	  var f, obj = {
	timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
	deviceId: msg.getDeviceId_asB64(),
	status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
	logBytes: msg.getLogBytes_asB64(),
	logType: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.log.LogUpdate}
	 */
	proto.log.LogUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.log.LogUpdate;
	  return proto.log.LogUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.log.LogUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.log.LogUpdate}
	 */
	proto.log.LogUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setDeviceId(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setStatus(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setLogBytes(value);
	      break;
	    case 5:
	      var value = /** @type {!proto.common.DataType} */ (reader.readEnum());
	      msg.setLogType(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.log.LogUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.log.LogUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.log.LogUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getDeviceId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	  f = /** @type {!proto.common.DataType} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeEnum(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional int64 timestamp = 1;
	 * @return {number}
	 */
	proto.log.LogUpdate.prototype.getTimestamp = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogUpdate} returns this
	 */
	proto.log.LogUpdate.prototype.setTimestamp = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes device_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.log.LogUpdate.prototype.getDeviceId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes device_id = 2;
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {string}
	 */
	proto.log.LogUpdate.prototype.getDeviceId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getDeviceId()));
	};


	/**
	 * optional bytes device_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDeviceId()`
	 * @return {!Uint8Array}
	 */
	proto.log.LogUpdate.prototype.getDeviceId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getDeviceId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.log.LogUpdate} returns this
	 */
	proto.log.LogUpdate.prototype.setDeviceId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional int32 status = 3;
	 * @return {number}
	 */
	proto.log.LogUpdate.prototype.getStatus = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.log.LogUpdate} returns this
	 */
	proto.log.LogUpdate.prototype.setStatus = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.log.LogUpdate} returns this
	 */
	proto.log.LogUpdate.prototype.clearStatus = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.log.LogUpdate.prototype.hasStatus = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional bytes log_bytes = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.log.LogUpdate.prototype.getLogBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes log_bytes = 4;
	 * This is a type-conversion wrapper around `getLogBytes()`
	 * @return {string}
	 */
	proto.log.LogUpdate.prototype.getLogBytes_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getLogBytes()));
	};


	/**
	 * optional bytes log_bytes = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getLogBytes()`
	 * @return {!Uint8Array}
	 */
	proto.log.LogUpdate.prototype.getLogBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getLogBytes()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.log.LogUpdate} returns this
	 */
	proto.log.LogUpdate.prototype.setLogBytes = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.log.LogUpdate} returns this
	 */
	proto.log.LogUpdate.prototype.clearLogBytes = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.log.LogUpdate.prototype.hasLogBytes = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional common.DataType log_type = 5;
	 * @return {!proto.common.DataType}
	 */
	proto.log.LogUpdate.prototype.getLogType = function() {
	  return /** @type {!proto.common.DataType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {!proto.common.DataType} value
	 * @return {!proto.log.LogUpdate} returns this
	 */
	proto.log.LogUpdate.prototype.setLogType = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.log.LogUpdate} returns this
	 */
	proto.log.LogUpdate.prototype.clearLogType = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.log.LogUpdate.prototype.hasLogType = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.log.LogReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.log.LogReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.log.LogReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	result: (f = msg.getResult()) && proto.log.LogSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.log.LogReadResponse}
	 */
	proto.log.LogReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.log.LogReadResponse;
	  return proto.log.LogReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.log.LogReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.log.LogReadResponse}
	 */
	proto.log.LogReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.log.LogSchema;
	      reader.readMessage(value,proto.log.LogSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.log.LogReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.log.LogReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.log.LogReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.log.LogSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional LogSchema result = 1;
	 * @return {?proto.log.LogSchema}
	 */
	proto.log.LogReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.log.LogSchema} */ (
	    jspb.Message.getWrapperField(this, proto.log.LogSchema, 1));
	};


	/**
	 * @param {?proto.log.LogSchema|undefined} value
	 * @return {!proto.log.LogReadResponse} returns this
	*/
	proto.log.LogReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.log.LogReadResponse} returns this
	 */
	proto.log.LogReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.log.LogReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.log.LogListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.log.LogListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.log.LogListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.log.LogListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.log.LogSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.log.LogListResponse}
	 */
	proto.log.LogListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.log.LogListResponse;
	  return proto.log.LogListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.log.LogListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.log.LogListResponse}
	 */
	proto.log.LogListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.log.LogSchema;
	      reader.readMessage(value,proto.log.LogSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.log.LogListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.log.LogListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.log.LogListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.log.LogSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated LogSchema results = 1;
	 * @return {!Array<!proto.log.LogSchema>}
	 */
	proto.log.LogListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.log.LogSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.log.LogSchema, 1));
	};


	/**
	 * @param {!Array<!proto.log.LogSchema>} value
	 * @return {!proto.log.LogListResponse} returns this
	*/
	proto.log.LogListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.log.LogSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.log.LogSchema}
	 */
	proto.log.LogListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.log.LogSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.log.LogListResponse} returns this
	 */
	proto.log.LogListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.log.LogChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.log.LogChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.log.LogChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.log.LogChangeResponse}
	 */
	proto.log.LogChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.log.LogChangeResponse;
	  return proto.log.LogChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.log.LogChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.log.LogChangeResponse}
	 */
	proto.log.LogChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.log.LogChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.log.LogChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.log.LogChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.log.LogChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.log); 
} (log_pb));

/**
 * @fileoverview gRPC-Web generated client stub for log
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_resource_api/log.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require$$0$1;
const proto$1 = {};
proto$1.log = log_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$1.log.LogServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$1.log.LogServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.log.LogId,
 *   !proto.log.LogReadResponse>}
 */
const methodDescriptor_LogService_ReadLog = new grpc.web.MethodDescriptor(
  '/log.LogService/ReadLog',
  grpc.web.MethodType.UNARY,
  proto$1.log.LogId,
  proto$1.log.LogReadResponse,
  /**
   * @param {!proto.log.LogId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.log.LogReadResponse.deserializeBinary
);


/**
 * @param {!proto.log.LogId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.log.LogReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.log.LogReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.log.LogServiceClient.prototype.readLog =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/log.LogService/ReadLog',
      request,
      metadata || {},
      methodDescriptor_LogService_ReadLog,
      callback);
};


/**
 * @param {!proto.log.LogId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.log.LogReadResponse>}
 *     Promise that resolves to the response
 */
proto$1.log.LogServicePromiseClient.prototype.readLog =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/log.LogService/ReadLog',
      request,
      metadata || {},
      methodDescriptor_LogService_ReadLog);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.log.LogTime,
 *   !proto.log.LogListResponse>}
 */
const methodDescriptor_LogService_ListLogByTime = new grpc.web.MethodDescriptor(
  '/log.LogService/ListLogByTime',
  grpc.web.MethodType.UNARY,
  proto$1.log.LogTime,
  proto$1.log.LogListResponse,
  /**
   * @param {!proto.log.LogTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.log.LogListResponse.deserializeBinary
);


/**
 * @param {!proto.log.LogTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.log.LogListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.log.LogListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.log.LogServiceClient.prototype.listLogByTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/log.LogService/ListLogByTime',
      request,
      metadata || {},
      methodDescriptor_LogService_ListLogByTime,
      callback);
};


/**
 * @param {!proto.log.LogTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.log.LogListResponse>}
 *     Promise that resolves to the response
 */
proto$1.log.LogServicePromiseClient.prototype.listLogByTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/log.LogService/ListLogByTime',
      request,
      metadata || {},
      methodDescriptor_LogService_ListLogByTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.log.LogTime,
 *   !proto.log.LogListResponse>}
 */
const methodDescriptor_LogService_ListLogByLastTime = new grpc.web.MethodDescriptor(
  '/log.LogService/ListLogByLastTime',
  grpc.web.MethodType.UNARY,
  proto$1.log.LogTime,
  proto$1.log.LogListResponse,
  /**
   * @param {!proto.log.LogTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.log.LogListResponse.deserializeBinary
);


/**
 * @param {!proto.log.LogTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.log.LogListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.log.LogListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.log.LogServiceClient.prototype.listLogByLastTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/log.LogService/ListLogByLastTime',
      request,
      metadata || {},
      methodDescriptor_LogService_ListLogByLastTime,
      callback);
};


/**
 * @param {!proto.log.LogTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.log.LogListResponse>}
 *     Promise that resolves to the response
 */
proto$1.log.LogServicePromiseClient.prototype.listLogByLastTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/log.LogService/ListLogByLastTime',
      request,
      metadata || {},
      methodDescriptor_LogService_ListLogByLastTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.log.LogRange,
 *   !proto.log.LogListResponse>}
 */
const methodDescriptor_LogService_ListLogByRangeTime = new grpc.web.MethodDescriptor(
  '/log.LogService/ListLogByRangeTime',
  grpc.web.MethodType.UNARY,
  proto$1.log.LogRange,
  proto$1.log.LogListResponse,
  /**
   * @param {!proto.log.LogRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.log.LogListResponse.deserializeBinary
);


/**
 * @param {!proto.log.LogRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.log.LogListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.log.LogListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.log.LogServiceClient.prototype.listLogByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/log.LogService/ListLogByRangeTime',
      request,
      metadata || {},
      methodDescriptor_LogService_ListLogByRangeTime,
      callback);
};


/**
 * @param {!proto.log.LogRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.log.LogListResponse>}
 *     Promise that resolves to the response
 */
proto$1.log.LogServicePromiseClient.prototype.listLogByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/log.LogService/ListLogByRangeTime',
      request,
      metadata || {},
      methodDescriptor_LogService_ListLogByRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.log.LogSchema,
 *   !proto.log.LogChangeResponse>}
 */
const methodDescriptor_LogService_CreateLog = new grpc.web.MethodDescriptor(
  '/log.LogService/CreateLog',
  grpc.web.MethodType.UNARY,
  proto$1.log.LogSchema,
  proto$1.log.LogChangeResponse,
  /**
   * @param {!proto.log.LogSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.log.LogChangeResponse.deserializeBinary
);


/**
 * @param {!proto.log.LogSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.log.LogChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.log.LogChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.log.LogServiceClient.prototype.createLog =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/log.LogService/CreateLog',
      request,
      metadata || {},
      methodDescriptor_LogService_CreateLog,
      callback);
};


/**
 * @param {!proto.log.LogSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.log.LogChangeResponse>}
 *     Promise that resolves to the response
 */
proto$1.log.LogServicePromiseClient.prototype.createLog =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/log.LogService/CreateLog',
      request,
      metadata || {},
      methodDescriptor_LogService_CreateLog);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.log.LogUpdate,
 *   !proto.log.LogChangeResponse>}
 */
const methodDescriptor_LogService_UpdateLog = new grpc.web.MethodDescriptor(
  '/log.LogService/UpdateLog',
  grpc.web.MethodType.UNARY,
  proto$1.log.LogUpdate,
  proto$1.log.LogChangeResponse,
  /**
   * @param {!proto.log.LogUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.log.LogChangeResponse.deserializeBinary
);


/**
 * @param {!proto.log.LogUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.log.LogChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.log.LogChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.log.LogServiceClient.prototype.updateLog =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/log.LogService/UpdateLog',
      request,
      metadata || {},
      methodDescriptor_LogService_UpdateLog,
      callback);
};


/**
 * @param {!proto.log.LogUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.log.LogChangeResponse>}
 *     Promise that resolves to the response
 */
proto$1.log.LogServicePromiseClient.prototype.updateLog =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/log.LogService/UpdateLog',
      request,
      metadata || {},
      methodDescriptor_LogService_UpdateLog);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.log.LogId,
 *   !proto.log.LogChangeResponse>}
 */
const methodDescriptor_LogService_DeleteLog = new grpc.web.MethodDescriptor(
  '/log.LogService/DeleteLog',
  grpc.web.MethodType.UNARY,
  proto$1.log.LogId,
  proto$1.log.LogChangeResponse,
  /**
   * @param {!proto.log.LogId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.log.LogChangeResponse.deserializeBinary
);


/**
 * @param {!proto.log.LogId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.log.LogChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.log.LogChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.log.LogServiceClient.prototype.deleteLog =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/log.LogService/DeleteLog',
      request,
      metadata || {},
      methodDescriptor_LogService_DeleteLog,
      callback);
};


/**
 * @param {!proto.log.LogId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.log.LogChangeResponse>}
 *     Promise that resolves to the response
 */
proto$1.log.LogServicePromiseClient.prototype.deleteLog =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/log.LogService/DeleteLog',
      request,
      metadata || {},
      methodDescriptor_LogService_DeleteLog);
};


var log_grpc_web_pb = proto$1.log;

var log_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(log_grpc_web_pb);

export { buffer_grpc_web_pb$1 as pb_buffer, data_grpc_web_pb$1 as pb_data, device_grpc_web_pb$1 as pb_device, group_grpc_web_pb$1 as pb_group, log_grpc_web_pb$1 as pb_log, model_grpc_web_pb$1 as pb_model, set_grpc_web_pb$1 as pb_set, slice_grpc_web_pb$1 as pb_slice };
