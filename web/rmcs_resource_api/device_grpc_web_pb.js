/**
 * @fileoverview gRPC-Web generated client stub for device
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.30.1
// source: rmcs_resource_api/device.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.device = require('./device_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.device.DeviceServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.device.DeviceServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceId,
 *   !proto.device.DeviceReadResponse>}
 */
const methodDescriptor_DeviceService_ReadDevice = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ReadDevice',
  grpc.web.MethodType.UNARY,
  proto.device.DeviceId,
  proto.device.DeviceReadResponse,
  /**
   * @param {!proto.device.DeviceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.readDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDevice,
      callback);
};


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceReadResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.readDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.SerialNumber,
 *   !proto.device.DeviceReadResponse>}
 */
const methodDescriptor_DeviceService_ReadDeviceBySn = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ReadDeviceBySn',
  grpc.web.MethodType.UNARY,
  proto.device.SerialNumber,
  proto.device.DeviceReadResponse,
  /**
   * @param {!proto.device.SerialNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.SerialNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.readDeviceBySn =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadDeviceBySn',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDeviceBySn,
      callback);
};


/**
 * @param {!proto.device.SerialNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceReadResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.readDeviceBySn =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadDeviceBySn',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDeviceBySn);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceIds,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceByIds = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceByIds',
  grpc.web.MethodType.UNARY,
  proto.device.DeviceIds,
  proto.device.DeviceListResponse,
  /**
   * @param {!proto.device.DeviceIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listDeviceByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByIds,
      callback);
};


/**
 * @param {!proto.device.DeviceIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listDeviceByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayId,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceByGateway = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceByGateway',
  grpc.web.MethodType.UNARY,
  proto.device.GatewayId,
  proto.device.DeviceListResponse,
  /**
   * @param {!proto.device.GatewayId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listDeviceByGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByGateway,
      callback);
};


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listDeviceByGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeId,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceByType = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceByType',
  grpc.web.MethodType.UNARY,
  proto.device.TypeId,
  proto.device.DeviceListResponse,
  /**
   * @param {!proto.device.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listDeviceByType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByType,
      callback);
};


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listDeviceByType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceName,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceByName = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceByName',
  grpc.web.MethodType.UNARY,
  proto.device.DeviceName,
  proto.device.DeviceListResponse,
  /**
   * @param {!proto.device.DeviceName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listDeviceByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByName,
      callback);
};


/**
 * @param {!proto.device.DeviceName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listDeviceByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceOption,
 *   !proto.device.DeviceListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceOption = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceOption',
  grpc.web.MethodType.UNARY,
  proto.device.DeviceOption,
  proto.device.DeviceListResponse,
  /**
   * @param {!proto.device.DeviceOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listDeviceOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceOption,
      callback);
};


/**
 * @param {!proto.device.DeviceOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listDeviceOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceSchema,
 *   !proto.device.DeviceCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateDevice = new grpc.web.MethodDescriptor(
  '/device.DeviceService/CreateDevice',
  grpc.web.MethodType.UNARY,
  proto.device.DeviceSchema,
  proto.device.DeviceCreateResponse,
  /**
   * @param {!proto.device.DeviceSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.createDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateDevice,
      callback);
};


/**
 * @param {!proto.device.DeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceCreateResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.createDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceUpdate,
 *   !proto.device.DeviceChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateDevice = new grpc.web.MethodDescriptor(
  '/device.DeviceService/UpdateDevice',
  grpc.web.MethodType.UNARY,
  proto.device.DeviceUpdate,
  proto.device.DeviceChangeResponse,
  /**
   * @param {!proto.device.DeviceUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.updateDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateDevice,
      callback);
};


/**
 * @param {!proto.device.DeviceUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.updateDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceId,
 *   !proto.device.DeviceChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteDevice = new grpc.web.MethodDescriptor(
  '/device.DeviceService/DeleteDevice',
  grpc.web.MethodType.UNARY,
  proto.device.DeviceId,
  proto.device.DeviceChangeResponse,
  /**
   * @param {!proto.device.DeviceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.DeviceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.DeviceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.DeviceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.deleteDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteDevice,
      callback);
};


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.DeviceChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.deleteDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteDevice',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayId,
 *   !proto.device.GatewayReadResponse>}
 */
const methodDescriptor_DeviceService_ReadGateway = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ReadGateway',
  grpc.web.MethodType.UNARY,
  proto.device.GatewayId,
  proto.device.GatewayReadResponse,
  /**
   * @param {!proto.device.GatewayId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.GatewayReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.readGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGateway,
      callback);
};


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayReadResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.readGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.SerialNumber,
 *   !proto.device.GatewayReadResponse>}
 */
const methodDescriptor_DeviceService_ReadGatewayBySn = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ReadGatewayBySn',
  grpc.web.MethodType.UNARY,
  proto.device.SerialNumber,
  proto.device.GatewayReadResponse,
  /**
   * @param {!proto.device.SerialNumber} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.GatewayReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.SerialNumber} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.readGatewayBySn =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadGatewayBySn',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGatewayBySn,
      callback);
};


/**
 * @param {!proto.device.SerialNumber} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayReadResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.readGatewayBySn =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadGatewayBySn',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGatewayBySn);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayIds,
 *   !proto.device.GatewayListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayByIds = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayByIds',
  grpc.web.MethodType.UNARY,
  proto.device.GatewayIds,
  proto.device.GatewayListResponse,
  /**
   * @param {!proto.device.GatewayIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.GatewayListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listGatewayByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByIds,
      callback);
};


/**
 * @param {!proto.device.GatewayIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listGatewayByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeId,
 *   !proto.device.GatewayListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayByType = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayByType',
  grpc.web.MethodType.UNARY,
  proto.device.TypeId,
  proto.device.GatewayListResponse,
  /**
   * @param {!proto.device.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.GatewayListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listGatewayByType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByType,
      callback);
};


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listGatewayByType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayName,
 *   !proto.device.GatewayListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayByName = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayByName',
  grpc.web.MethodType.UNARY,
  proto.device.GatewayName,
  proto.device.GatewayListResponse,
  /**
   * @param {!proto.device.GatewayName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.GatewayListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listGatewayByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByName,
      callback);
};


/**
 * @param {!proto.device.GatewayName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listGatewayByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayOption,
 *   !proto.device.GatewayListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayOption = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayOption',
  grpc.web.MethodType.UNARY,
  proto.device.GatewayOption,
  proto.device.GatewayListResponse,
  /**
   * @param {!proto.device.GatewayOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.GatewayListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listGatewayOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayOption,
      callback);
};


/**
 * @param {!proto.device.GatewayOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listGatewayOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewaySchema,
 *   !proto.device.GatewayCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateGateway = new grpc.web.MethodDescriptor(
  '/device.DeviceService/CreateGateway',
  grpc.web.MethodType.UNARY,
  proto.device.GatewaySchema,
  proto.device.GatewayCreateResponse,
  /**
   * @param {!proto.device.GatewaySchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.GatewayCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewaySchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.createGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateGateway,
      callback);
};


/**
 * @param {!proto.device.GatewaySchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayCreateResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.createGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayUpdate,
 *   !proto.device.GatewayChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateGateway = new grpc.web.MethodDescriptor(
  '/device.DeviceService/UpdateGateway',
  grpc.web.MethodType.UNARY,
  proto.device.GatewayUpdate,
  proto.device.GatewayChangeResponse,
  /**
   * @param {!proto.device.GatewayUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.GatewayChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.updateGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateGateway,
      callback);
};


/**
 * @param {!proto.device.GatewayUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.updateGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayId,
 *   !proto.device.GatewayChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteGateway = new grpc.web.MethodDescriptor(
  '/device.DeviceService/DeleteGateway',
  grpc.web.MethodType.UNARY,
  proto.device.GatewayId,
  proto.device.GatewayChangeResponse,
  /**
   * @param {!proto.device.GatewayId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.GatewayChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.GatewayChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.GatewayChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.deleteGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteGateway,
      callback);
};


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.GatewayChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.deleteGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteGateway',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigId,
 *   !proto.device.ConfigReadResponse>}
 */
const methodDescriptor_DeviceService_ReadDeviceConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ReadDeviceConfig',
  grpc.web.MethodType.UNARY,
  proto.device.ConfigId,
  proto.device.ConfigReadResponse,
  /**
   * @param {!proto.device.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.readDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigReadResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.readDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.DeviceId,
 *   !proto.device.ConfigListResponse>}
 */
const methodDescriptor_DeviceService_ListDeviceConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListDeviceConfig',
  grpc.web.MethodType.UNARY,
  proto.device.DeviceId,
  proto.device.ConfigListResponse,
  /**
   * @param {!proto.device.DeviceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigListResponse.deserializeBinary
);


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.DeviceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigSchema,
 *   !proto.device.ConfigCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateDeviceConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/CreateDeviceConfig',
  grpc.web.MethodType.UNARY,
  proto.device.ConfigSchema,
  proto.device.ConfigCreateResponse,
  /**
   * @param {!proto.device.ConfigSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.createDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigCreateResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.createDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigUpdate,
 *   !proto.device.ConfigChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateDeviceConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/UpdateDeviceConfig',
  grpc.web.MethodType.UNARY,
  proto.device.ConfigUpdate,
  proto.device.ConfigChangeResponse,
  /**
   * @param {!proto.device.ConfigUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.updateDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.updateDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigId,
 *   !proto.device.ConfigChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteDeviceConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/DeleteDeviceConfig',
  grpc.web.MethodType.UNARY,
  proto.device.ConfigId,
  proto.device.ConfigChangeResponse,
  /**
   * @param {!proto.device.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.deleteDeviceConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteDeviceConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.deleteDeviceConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteDeviceConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteDeviceConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigId,
 *   !proto.device.ConfigReadResponse>}
 */
const methodDescriptor_DeviceService_ReadGatewayConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ReadGatewayConfig',
  grpc.web.MethodType.UNARY,
  proto.device.ConfigId,
  proto.device.ConfigReadResponse,
  /**
   * @param {!proto.device.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.readGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigReadResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.readGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.GatewayId,
 *   !proto.device.ConfigListResponse>}
 */
const methodDescriptor_DeviceService_ListGatewayConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListGatewayConfig',
  grpc.web.MethodType.UNARY,
  proto.device.GatewayId,
  proto.device.ConfigListResponse,
  /**
   * @param {!proto.device.GatewayId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigListResponse.deserializeBinary
);


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.GatewayId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigSchema,
 *   !proto.device.ConfigCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateGatewayConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/CreateGatewayConfig',
  grpc.web.MethodType.UNARY,
  proto.device.ConfigSchema,
  proto.device.ConfigCreateResponse,
  /**
   * @param {!proto.device.ConfigSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.createGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigCreateResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.createGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigUpdate,
 *   !proto.device.ConfigChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateGatewayConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/UpdateGatewayConfig',
  grpc.web.MethodType.UNARY,
  proto.device.ConfigUpdate,
  proto.device.ConfigChangeResponse,
  /**
   * @param {!proto.device.ConfigUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.updateGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.updateGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.ConfigId,
 *   !proto.device.ConfigChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteGatewayConfig = new grpc.web.MethodDescriptor(
  '/device.DeviceService/DeleteGatewayConfig',
  grpc.web.MethodType.UNARY,
  proto.device.ConfigId,
  proto.device.ConfigChangeResponse,
  /**
   * @param {!proto.device.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.deleteGatewayConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteGatewayConfig,
      callback);
};


/**
 * @param {!proto.device.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.deleteGatewayConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteGatewayConfig',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteGatewayConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeId,
 *   !proto.device.TypeReadResponse>}
 */
const methodDescriptor_DeviceService_ReadType = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ReadType',
  grpc.web.MethodType.UNARY,
  proto.device.TypeId,
  proto.device.TypeReadResponse,
  /**
   * @param {!proto.device.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.TypeReadResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.readType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ReadType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadType,
      callback);
};


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeReadResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.readType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ReadType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ReadType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeIds,
 *   !proto.device.TypeListResponse>}
 */
const methodDescriptor_DeviceService_ListTypeByIds = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListTypeByIds',
  grpc.web.MethodType.UNARY,
  proto.device.TypeIds,
  proto.device.TypeListResponse,
  /**
   * @param {!proto.device.TypeIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.TypeListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listTypeByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListTypeByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeByIds,
      callback);
};


/**
 * @param {!proto.device.TypeIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listTypeByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListTypeByIds',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeName,
 *   !proto.device.TypeListResponse>}
 */
const methodDescriptor_DeviceService_ListTypeByName = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListTypeByName',
  grpc.web.MethodType.UNARY,
  proto.device.TypeName,
  proto.device.TypeListResponse,
  /**
   * @param {!proto.device.TypeName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.TypeListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listTypeByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListTypeByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeByName,
      callback);
};


/**
 * @param {!proto.device.TypeName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listTypeByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListTypeByName',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeOption,
 *   !proto.device.TypeListResponse>}
 */
const methodDescriptor_DeviceService_ListTypeOption = new grpc.web.MethodDescriptor(
  '/device.DeviceService/ListTypeOption',
  grpc.web.MethodType.UNARY,
  proto.device.TypeOption,
  proto.device.TypeListResponse,
  /**
   * @param {!proto.device.TypeOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.TypeListResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.listTypeOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/ListTypeOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeOption,
      callback);
};


/**
 * @param {!proto.device.TypeOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeListResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.listTypeOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/ListTypeOption',
      request,
      metadata || {},
      methodDescriptor_DeviceService_ListTypeOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeSchema,
 *   !proto.device.TypeCreateResponse>}
 */
const methodDescriptor_DeviceService_CreateType = new grpc.web.MethodDescriptor(
  '/device.DeviceService/CreateType',
  grpc.web.MethodType.UNARY,
  proto.device.TypeSchema,
  proto.device.TypeCreateResponse,
  /**
   * @param {!proto.device.TypeSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.TypeCreateResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.createType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/CreateType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateType,
      callback);
};


/**
 * @param {!proto.device.TypeSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeCreateResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.createType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/CreateType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_CreateType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeUpdate,
 *   !proto.device.TypeChangeResponse>}
 */
const methodDescriptor_DeviceService_UpdateType = new grpc.web.MethodDescriptor(
  '/device.DeviceService/UpdateType',
  grpc.web.MethodType.UNARY,
  proto.device.TypeUpdate,
  proto.device.TypeChangeResponse,
  /**
   * @param {!proto.device.TypeUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.TypeChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.updateType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/UpdateType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateType,
      callback);
};


/**
 * @param {!proto.device.TypeUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.updateType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/UpdateType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_UpdateType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeId,
 *   !proto.device.TypeChangeResponse>}
 */
const methodDescriptor_DeviceService_DeleteType = new grpc.web.MethodDescriptor(
  '/device.DeviceService/DeleteType',
  grpc.web.MethodType.UNARY,
  proto.device.TypeId,
  proto.device.TypeChangeResponse,
  /**
   * @param {!proto.device.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.TypeChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.deleteType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/DeleteType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteType,
      callback);
};


/**
 * @param {!proto.device.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.deleteType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/DeleteType',
      request,
      metadata || {},
      methodDescriptor_DeviceService_DeleteType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeModel,
 *   !proto.device.TypeChangeResponse>}
 */
const methodDescriptor_DeviceService_AddTypeModel = new grpc.web.MethodDescriptor(
  '/device.DeviceService/AddTypeModel',
  grpc.web.MethodType.UNARY,
  proto.device.TypeModel,
  proto.device.TypeChangeResponse,
  /**
   * @param {!proto.device.TypeModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.TypeChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.addTypeModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/AddTypeModel',
      request,
      metadata || {},
      methodDescriptor_DeviceService_AddTypeModel,
      callback);
};


/**
 * @param {!proto.device.TypeModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.addTypeModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/AddTypeModel',
      request,
      metadata || {},
      methodDescriptor_DeviceService_AddTypeModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.device.TypeModel,
 *   !proto.device.TypeChangeResponse>}
 */
const methodDescriptor_DeviceService_RemoveTypeModel = new grpc.web.MethodDescriptor(
  '/device.DeviceService/RemoveTypeModel',
  grpc.web.MethodType.UNARY,
  proto.device.TypeModel,
  proto.device.TypeChangeResponse,
  /**
   * @param {!proto.device.TypeModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.device.TypeChangeResponse.deserializeBinary
);


/**
 * @param {!proto.device.TypeModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.device.TypeChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.device.TypeChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.device.DeviceServiceClient.prototype.removeTypeModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/device.DeviceService/RemoveTypeModel',
      request,
      metadata || {},
      methodDescriptor_DeviceService_RemoveTypeModel,
      callback);
};


/**
 * @param {!proto.device.TypeModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.device.TypeChangeResponse>}
 *     Promise that resolves to the response
 */
proto.device.DeviceServicePromiseClient.prototype.removeTypeModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/device.DeviceService/RemoveTypeModel',
      request,
      metadata || {},
      methodDescriptor_DeviceService_RemoveTypeModel);
};


module.exports = proto.device;

