/**
 * @fileoverview gRPC-Web generated client stub for model
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: rmcs_resource_api/model.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var rmcs_resource_api_common_pb = require('../rmcs_resource_api/common_pb.js')
const proto = {};
proto.model = require('./model_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.model.ModelServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.model.ModelServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelId,
 *   !proto.model.ModelReadResponse>}
 */
const methodDescriptor_ModelService_ReadModel = new grpc.web.MethodDescriptor(
  '/model.ModelService/ReadModel',
  grpc.web.MethodType.UNARY,
  proto.model.ModelId,
  proto.model.ModelReadResponse,
  /**
   * @param {!proto.model.ModelId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ModelReadResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.readModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ReadModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_ReadModel,
      callback);
};


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelReadResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.readModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ReadModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_ReadModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelIds,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelByIds = new grpc.web.MethodDescriptor(
  '/model.ModelService/ListModelByIds',
  grpc.web.MethodType.UNARY,
  proto.model.ModelIds,
  proto.model.ModelListResponse,
  /**
   * @param {!proto.model.ModelIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.listModelByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelByIds',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByIds,
      callback);
};


/**
 * @param {!proto.model.ModelIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.listModelByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelByIds',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelName,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelByName = new grpc.web.MethodDescriptor(
  '/model.ModelService/ListModelByName',
  grpc.web.MethodType.UNARY,
  proto.model.ModelName,
  proto.model.ModelListResponse,
  /**
   * @param {!proto.model.ModelName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.listModelByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelByName',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByName,
      callback);
};


/**
 * @param {!proto.model.ModelName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.listModelByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelByName',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelCategory,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelByCategory = new grpc.web.MethodDescriptor(
  '/model.ModelService/ListModelByCategory',
  grpc.web.MethodType.UNARY,
  proto.model.ModelCategory,
  proto.model.ModelListResponse,
  /**
   * @param {!proto.model.ModelCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.listModelByCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelByCategory',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByCategory,
      callback);
};


/**
 * @param {!proto.model.ModelCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.listModelByCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelByCategory',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelNameCategory,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelByNameCategory = new grpc.web.MethodDescriptor(
  '/model.ModelService/ListModelByNameCategory',
  grpc.web.MethodType.UNARY,
  proto.model.ModelNameCategory,
  proto.model.ModelListResponse,
  /**
   * @param {!proto.model.ModelNameCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelNameCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.listModelByNameCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelByNameCategory',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByNameCategory,
      callback);
};


/**
 * @param {!proto.model.ModelNameCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.listModelByNameCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelByNameCategory',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByNameCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.TypeId,
 *   !proto.model.ModelListResponse>}
 */
const methodDescriptor_ModelService_ListModelByType = new grpc.web.MethodDescriptor(
  '/model.ModelService/ListModelByType',
  grpc.web.MethodType.UNARY,
  proto.model.TypeId,
  proto.model.ModelListResponse,
  /**
   * @param {!proto.model.TypeId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ModelListResponse.deserializeBinary
);


/**
 * @param {!proto.model.TypeId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.listModelByType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelByType',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByType,
      callback);
};


/**
 * @param {!proto.model.TypeId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelListResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.listModelByType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelByType',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelByType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelSchema,
 *   !proto.model.ModelCreateResponse>}
 */
const methodDescriptor_ModelService_CreateModel = new grpc.web.MethodDescriptor(
  '/model.ModelService/CreateModel',
  grpc.web.MethodType.UNARY,
  proto.model.ModelSchema,
  proto.model.ModelCreateResponse,
  /**
   * @param {!proto.model.ModelSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ModelCreateResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.createModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/CreateModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_CreateModel,
      callback);
};


/**
 * @param {!proto.model.ModelSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelCreateResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.createModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/CreateModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_CreateModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelUpdate,
 *   !proto.model.ModelChangeResponse>}
 */
const methodDescriptor_ModelService_UpdateModel = new grpc.web.MethodDescriptor(
  '/model.ModelService/UpdateModel',
  grpc.web.MethodType.UNARY,
  proto.model.ModelUpdate,
  proto.model.ModelChangeResponse,
  /**
   * @param {!proto.model.ModelUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ModelChangeResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.updateModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/UpdateModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_UpdateModel,
      callback);
};


/**
 * @param {!proto.model.ModelUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelChangeResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.updateModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/UpdateModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_UpdateModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelId,
 *   !proto.model.ModelChangeResponse>}
 */
const methodDescriptor_ModelService_DeleteModel = new grpc.web.MethodDescriptor(
  '/model.ModelService/DeleteModel',
  grpc.web.MethodType.UNARY,
  proto.model.ModelId,
  proto.model.ModelChangeResponse,
  /**
   * @param {!proto.model.ModelId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ModelChangeResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ModelChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ModelChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.deleteModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/DeleteModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_DeleteModel,
      callback);
};


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ModelChangeResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.deleteModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/DeleteModel',
      request,
      metadata || {},
      methodDescriptor_ModelService_DeleteModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ConfigId,
 *   !proto.model.ConfigReadResponse>}
 */
const methodDescriptor_ModelService_ReadModelConfig = new grpc.web.MethodDescriptor(
  '/model.ModelService/ReadModelConfig',
  grpc.web.MethodType.UNARY,
  proto.model.ConfigId,
  proto.model.ConfigReadResponse,
  /**
   * @param {!proto.model.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ConfigReadResponse.deserializeBinary
);


/**
 * @param {!proto.model.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.readModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ReadModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_ReadModelConfig,
      callback);
};


/**
 * @param {!proto.model.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigReadResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.readModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ReadModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_ReadModelConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ModelId,
 *   !proto.model.ConfigListResponse>}
 */
const methodDescriptor_ModelService_ListModelConfig = new grpc.web.MethodDescriptor(
  '/model.ModelService/ListModelConfig',
  grpc.web.MethodType.UNARY,
  proto.model.ModelId,
  proto.model.ConfigListResponse,
  /**
   * @param {!proto.model.ModelId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ConfigListResponse.deserializeBinary
);


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.listModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/ListModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelConfig,
      callback);
};


/**
 * @param {!proto.model.ModelId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigListResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.listModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/ListModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_ListModelConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ConfigSchema,
 *   !proto.model.ConfigCreateResponse>}
 */
const methodDescriptor_ModelService_CreateModelConfig = new grpc.web.MethodDescriptor(
  '/model.ModelService/CreateModelConfig',
  grpc.web.MethodType.UNARY,
  proto.model.ConfigSchema,
  proto.model.ConfigCreateResponse,
  /**
   * @param {!proto.model.ConfigSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ConfigCreateResponse.deserializeBinary
);


/**
 * @param {!proto.model.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.createModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/CreateModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_CreateModelConfig,
      callback);
};


/**
 * @param {!proto.model.ConfigSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigCreateResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.createModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/CreateModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_CreateModelConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ConfigUpdate,
 *   !proto.model.ConfigChangeResponse>}
 */
const methodDescriptor_ModelService_UpdateModelConfig = new grpc.web.MethodDescriptor(
  '/model.ModelService/UpdateModelConfig',
  grpc.web.MethodType.UNARY,
  proto.model.ConfigUpdate,
  proto.model.ConfigChangeResponse,
  /**
   * @param {!proto.model.ConfigUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.model.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.updateModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/UpdateModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_UpdateModelConfig,
      callback);
};


/**
 * @param {!proto.model.ConfigUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.updateModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/UpdateModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_UpdateModelConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.model.ConfigId,
 *   !proto.model.ConfigChangeResponse>}
 */
const methodDescriptor_ModelService_DeleteModelConfig = new grpc.web.MethodDescriptor(
  '/model.ModelService/DeleteModelConfig',
  grpc.web.MethodType.UNARY,
  proto.model.ConfigId,
  proto.model.ConfigChangeResponse,
  /**
   * @param {!proto.model.ConfigId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.model.ConfigChangeResponse.deserializeBinary
);


/**
 * @param {!proto.model.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.model.ConfigChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.model.ConfigChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.model.ModelServiceClient.prototype.deleteModelConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/model.ModelService/DeleteModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_DeleteModelConfig,
      callback);
};


/**
 * @param {!proto.model.ConfigId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.model.ConfigChangeResponse>}
 *     Promise that resolves to the response
 */
proto.model.ModelServicePromiseClient.prototype.deleteModelConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/model.ModelService/DeleteModelConfig',
      request,
      metadata || {},
      methodDescriptor_ModelService_DeleteModelConfig);
};


module.exports = proto.model;

