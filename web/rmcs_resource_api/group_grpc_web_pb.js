/**
 * @fileoverview gRPC-Web generated client stub for group
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: rmcs_resource_api/group.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.group = require('./group_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.group.GroupServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.group.GroupServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupModelReadResponse>}
 */
const methodDescriptor_GroupService_ReadGroupModel = new grpc.web.MethodDescriptor(
  '/group.GroupService/ReadGroupModel',
  grpc.web.MethodType.UNARY,
  proto.group.GroupId,
  proto.group.GroupModelReadResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupModelReadResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupModelReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupModelReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.readGroupModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ReadGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupModel,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupModelReadResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.readGroupModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ReadGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupName,
 *   !proto.group.GroupModelListResponse>}
 */
const methodDescriptor_GroupService_ListGroupModelByName = new grpc.web.MethodDescriptor(
  '/group.GroupService/ListGroupModelByName',
  grpc.web.MethodType.UNARY,
  proto.group.GroupName,
  proto.group.GroupModelListResponse,
  /**
   * @param {!proto.group.GroupName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupModelListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.listGroupModelByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByName,
      callback);
};


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupModelListResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.listGroupModelByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupCategory,
 *   !proto.group.GroupModelListResponse>}
 */
const methodDescriptor_GroupService_ListGroupModelByCategory = new grpc.web.MethodDescriptor(
  '/group.GroupService/ListGroupModelByCategory',
  grpc.web.MethodType.UNARY,
  proto.group.GroupCategory,
  proto.group.GroupModelListResponse,
  /**
   * @param {!proto.group.GroupCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupModelListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.listGroupModelByCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByCategory,
      callback);
};


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupModelListResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.listGroupModelByCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupNameCategory,
 *   !proto.group.GroupModelListResponse>}
 */
const methodDescriptor_GroupService_ListGroupModelByNameCategory = new grpc.web.MethodDescriptor(
  '/group.GroupService/ListGroupModelByNameCategory',
  grpc.web.MethodType.UNARY,
  proto.group.GroupNameCategory,
  proto.group.GroupModelListResponse,
  /**
   * @param {!proto.group.GroupNameCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupModelListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupNameCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupModelListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupModelListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.listGroupModelByNameCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByNameCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByNameCategory,
      callback);
};


/**
 * @param {!proto.group.GroupNameCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupModelListResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.listGroupModelByNameCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupModelByNameCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupModelByNameCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupModelSchema,
 *   !proto.group.GroupCreateResponse>}
 */
const methodDescriptor_GroupService_CreateGroupModel = new grpc.web.MethodDescriptor(
  '/group.GroupService/CreateGroupModel',
  grpc.web.MethodType.UNARY,
  proto.group.GroupModelSchema,
  proto.group.GroupCreateResponse,
  /**
   * @param {!proto.group.GroupModelSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupCreateResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupModelSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.createGroupModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/CreateGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupModel,
      callback);
};


/**
 * @param {!proto.group.GroupModelSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupCreateResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.createGroupModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/CreateGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupUpdate,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_UpdateGroupModel = new grpc.web.MethodDescriptor(
  '/group.GroupService/UpdateGroupModel',
  grpc.web.MethodType.UNARY,
  proto.group.GroupUpdate,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.updateGroupModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/UpdateGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupModel,
      callback);
};


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.updateGroupModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/UpdateGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_DeleteGroupModel = new grpc.web.MethodDescriptor(
  '/group.GroupService/DeleteGroupModel',
  grpc.web.MethodType.UNARY,
  proto.group.GroupId,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.deleteGroupModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/DeleteGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupModel,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.deleteGroupModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/DeleteGroupModel',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupModel,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_AddGroupModelMember = new grpc.web.MethodDescriptor(
  '/group.GroupService/AddGroupModelMember',
  grpc.web.MethodType.UNARY,
  proto.group.GroupModel,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.addGroupModelMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/AddGroupModelMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupModelMember,
      callback);
};


/**
 * @param {!proto.group.GroupModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.addGroupModelMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/AddGroupModelMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupModelMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupModel,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_RemoveGroupModelMember = new grpc.web.MethodDescriptor(
  '/group.GroupService/RemoveGroupModelMember',
  grpc.web.MethodType.UNARY,
  proto.group.GroupModel,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.removeGroupModelMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/RemoveGroupModelMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupModelMember,
      callback);
};


/**
 * @param {!proto.group.GroupModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.removeGroupModelMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/RemoveGroupModelMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupModelMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupDeviceReadResponse>}
 */
const methodDescriptor_GroupService_ReadGroupDevice = new grpc.web.MethodDescriptor(
  '/group.GroupService/ReadGroupDevice',
  grpc.web.MethodType.UNARY,
  proto.group.GroupId,
  proto.group.GroupDeviceReadResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupDeviceReadResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.readGroupDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ReadGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupDevice,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceReadResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.readGroupDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ReadGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupName,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupDeviceByName = new grpc.web.MethodDescriptor(
  '/group.GroupService/ListGroupDeviceByName',
  grpc.web.MethodType.UNARY,
  proto.group.GroupName,
  proto.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.listGroupDeviceByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByName,
      callback);
};


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.listGroupDeviceByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupCategory,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupDeviceByCategory = new grpc.web.MethodDescriptor(
  '/group.GroupService/ListGroupDeviceByCategory',
  grpc.web.MethodType.UNARY,
  proto.group.GroupCategory,
  proto.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.listGroupDeviceByCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByCategory,
      callback);
};


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.listGroupDeviceByCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupNameCategory,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupDeviceByNameCategory = new grpc.web.MethodDescriptor(
  '/group.GroupService/ListGroupDeviceByNameCategory',
  grpc.web.MethodType.UNARY,
  proto.group.GroupNameCategory,
  proto.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupNameCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupNameCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.listGroupDeviceByNameCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByNameCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByNameCategory,
      callback);
};


/**
 * @param {!proto.group.GroupNameCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.listGroupDeviceByNameCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupDeviceByNameCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupDeviceByNameCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDeviceSchema,
 *   !proto.group.GroupCreateResponse>}
 */
const methodDescriptor_GroupService_CreateGroupDevice = new grpc.web.MethodDescriptor(
  '/group.GroupService/CreateGroupDevice',
  grpc.web.MethodType.UNARY,
  proto.group.GroupDeviceSchema,
  proto.group.GroupCreateResponse,
  /**
   * @param {!proto.group.GroupDeviceSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupCreateResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.createGroupDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/CreateGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupDevice,
      callback);
};


/**
 * @param {!proto.group.GroupDeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupCreateResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.createGroupDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/CreateGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupUpdate,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_UpdateGroupDevice = new grpc.web.MethodDescriptor(
  '/group.GroupService/UpdateGroupDevice',
  grpc.web.MethodType.UNARY,
  proto.group.GroupUpdate,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.updateGroupDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/UpdateGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupDevice,
      callback);
};


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.updateGroupDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/UpdateGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_DeleteGroupDevice = new grpc.web.MethodDescriptor(
  '/group.GroupService/DeleteGroupDevice',
  grpc.web.MethodType.UNARY,
  proto.group.GroupId,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.deleteGroupDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/DeleteGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupDevice,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.deleteGroupDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/DeleteGroupDevice',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDevice,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_AddGroupDeviceMember = new grpc.web.MethodDescriptor(
  '/group.GroupService/AddGroupDeviceMember',
  grpc.web.MethodType.UNARY,
  proto.group.GroupDevice,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupDevice} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.addGroupDeviceMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/AddGroupDeviceMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupDeviceMember,
      callback);
};


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.addGroupDeviceMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/AddGroupDeviceMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupDeviceMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDevice,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_RemoveGroupDeviceMember = new grpc.web.MethodDescriptor(
  '/group.GroupService/RemoveGroupDeviceMember',
  grpc.web.MethodType.UNARY,
  proto.group.GroupDevice,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupDevice} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.removeGroupDeviceMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/RemoveGroupDeviceMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupDeviceMember,
      callback);
};


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.removeGroupDeviceMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/RemoveGroupDeviceMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupDeviceMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupDeviceReadResponse>}
 */
const methodDescriptor_GroupService_ReadGroupGateway = new grpc.web.MethodDescriptor(
  '/group.GroupService/ReadGroupGateway',
  grpc.web.MethodType.UNARY,
  proto.group.GroupId,
  proto.group.GroupDeviceReadResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupDeviceReadResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.readGroupGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ReadGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupGateway,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceReadResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.readGroupGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ReadGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_ReadGroupGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupName,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupGatewayByName = new grpc.web.MethodDescriptor(
  '/group.GroupService/ListGroupGatewayByName',
  grpc.web.MethodType.UNARY,
  proto.group.GroupName,
  proto.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.listGroupGatewayByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByName,
      callback);
};


/**
 * @param {!proto.group.GroupName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.listGroupGatewayByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByName',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupCategory,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupGatewayByCategory = new grpc.web.MethodDescriptor(
  '/group.GroupService/ListGroupGatewayByCategory',
  grpc.web.MethodType.UNARY,
  proto.group.GroupCategory,
  proto.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.listGroupGatewayByCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByCategory,
      callback);
};


/**
 * @param {!proto.group.GroupCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.listGroupGatewayByCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupNameCategory,
 *   !proto.group.GroupDeviceListResponse>}
 */
const methodDescriptor_GroupService_ListGroupGatewayByNameCategory = new grpc.web.MethodDescriptor(
  '/group.GroupService/ListGroupGatewayByNameCategory',
  grpc.web.MethodType.UNARY,
  proto.group.GroupNameCategory,
  proto.group.GroupDeviceListResponse,
  /**
   * @param {!proto.group.GroupNameCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupNameCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.listGroupGatewayByNameCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByNameCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByNameCategory,
      callback);
};


/**
 * @param {!proto.group.GroupNameCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.listGroupGatewayByNameCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/ListGroupGatewayByNameCategory',
      request,
      metadata || {},
      methodDescriptor_GroupService_ListGroupGatewayByNameCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDeviceSchema,
 *   !proto.group.GroupCreateResponse>}
 */
const methodDescriptor_GroupService_CreateGroupGateway = new grpc.web.MethodDescriptor(
  '/group.GroupService/CreateGroupGateway',
  grpc.web.MethodType.UNARY,
  proto.group.GroupDeviceSchema,
  proto.group.GroupCreateResponse,
  /**
   * @param {!proto.group.GroupDeviceSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupCreateResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.createGroupGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/CreateGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupGateway,
      callback);
};


/**
 * @param {!proto.group.GroupDeviceSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupCreateResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.createGroupGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/CreateGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroupGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupUpdate,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_UpdateGroupGateway = new grpc.web.MethodDescriptor(
  '/group.GroupService/UpdateGroupGateway',
  grpc.web.MethodType.UNARY,
  proto.group.GroupUpdate,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.updateGroupGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/UpdateGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupGateway,
      callback);
};


/**
 * @param {!proto.group.GroupUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.updateGroupGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/UpdateGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroupGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupId,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_DeleteGroupGateway = new grpc.web.MethodDescriptor(
  '/group.GroupService/DeleteGroupGateway',
  grpc.web.MethodType.UNARY,
  proto.group.GroupId,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.deleteGroupGateway =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/DeleteGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupGateway,
      callback);
};


/**
 * @param {!proto.group.GroupId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.deleteGroupGateway =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/DeleteGroupGateway',
      request,
      metadata || {},
      methodDescriptor_GroupService_DeleteGroupGateway);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDevice,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_AddGroupGatewayMember = new grpc.web.MethodDescriptor(
  '/group.GroupService/AddGroupGatewayMember',
  grpc.web.MethodType.UNARY,
  proto.group.GroupDevice,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupDevice} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.addGroupGatewayMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/AddGroupGatewayMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupGatewayMember,
      callback);
};


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.addGroupGatewayMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/AddGroupGatewayMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_AddGroupGatewayMember);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.group.GroupDevice,
 *   !proto.group.GroupChangeResponse>}
 */
const methodDescriptor_GroupService_RemoveGroupGatewayMember = new grpc.web.MethodDescriptor(
  '/group.GroupService/RemoveGroupGatewayMember',
  grpc.web.MethodType.UNARY,
  proto.group.GroupDevice,
  proto.group.GroupChangeResponse,
  /**
   * @param {!proto.group.GroupDevice} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.group.GroupChangeResponse.deserializeBinary
);


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.group.GroupChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.group.GroupChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.group.GroupServiceClient.prototype.removeGroupGatewayMember =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/group.GroupService/RemoveGroupGatewayMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupGatewayMember,
      callback);
};


/**
 * @param {!proto.group.GroupDevice} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.group.GroupChangeResponse>}
 *     Promise that resolves to the response
 */
proto.group.GroupServicePromiseClient.prototype.removeGroupGatewayMember =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/group.GroupService/RemoveGroupGatewayMember',
      request,
      metadata || {},
      methodDescriptor_GroupService_RemoveGroupGatewayMember);
};


module.exports = proto.group;

