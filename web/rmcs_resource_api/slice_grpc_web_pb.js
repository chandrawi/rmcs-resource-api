/**
 * @fileoverview gRPC-Web generated client stub for slice
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_resource_api/slice.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.slice = require('./slice_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.slice.SliceServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.slice.SliceServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceReadResponse>}
 */
const methodDescriptor_SliceService_ReadSlice = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ReadSlice',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceId,
  proto.slice.SliceReadResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceReadResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.readSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ReadSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceReadResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.readSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ReadSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceTime,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByTime = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByTime',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceTime,
  proto.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceByTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByTime,
      callback);
};


/**
 * @param {!proto.slice.SliceTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceByTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceRange,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByRangeTime = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByRangeTime',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceRange,
  proto.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByRangeTime,
      callback);
};


/**
 * @param {!proto.slice.SliceRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceNameTime,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByNameTime = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByNameTime',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceNameTime,
  proto.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceNameTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceNameTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceByNameTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByNameTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByNameTime,
      callback);
};


/**
 * @param {!proto.slice.SliceNameTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceByNameTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByNameTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByNameTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceNameRange,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByNameRangeTime = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByNameRangeTime',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceNameRange,
  proto.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceNameRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceNameRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceByNameRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByNameRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByNameRangeTime,
      callback);
};


/**
 * @param {!proto.slice.SliceNameRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceByNameRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByNameRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByNameRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceOption,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceOption = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceOption',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceOption,
  proto.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceOption',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceOption,
      callback);
};


/**
 * @param {!proto.slice.SliceOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceOption',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSchema,
 *   !proto.slice.SliceCreateResponse>}
 */
const methodDescriptor_SliceService_CreateSlice = new grpc.web.MethodDescriptor(
  '/slice.SliceService/CreateSlice',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceSchema,
  proto.slice.SliceCreateResponse,
  /**
   * @param {!proto.slice.SliceSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceCreateResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.createSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/CreateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceCreateResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.createSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/CreateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceUpdate,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_UpdateSlice = new grpc.web.MethodDescriptor(
  '/slice.SliceService/UpdateSlice',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceUpdate,
  proto.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.updateSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/UpdateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.updateSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/UpdateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_DeleteSlice = new grpc.web.MethodDescriptor(
  '/slice.SliceService/DeleteSlice',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceId,
  proto.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.deleteSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/DeleteSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.deleteSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/DeleteSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceSetReadResponse>}
 */
const methodDescriptor_SliceService_ReadSliceSet = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ReadSliceSet',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceId,
  proto.slice.SliceSetReadResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceSetReadResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.readSliceSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ReadSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSliceSet,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetReadResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.readSliceSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ReadSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSliceSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSetTime,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetByTime = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetByTime',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceSetTime,
  proto.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceSetTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSetTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceSetByTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByTime,
      callback);
};


/**
 * @param {!proto.slice.SliceSetTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceSetByTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSetRange,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetByRangeTime = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetByRangeTime',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceSetRange,
  proto.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceSetRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSetRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceSetByRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByRangeTime,
      callback);
};


/**
 * @param {!proto.slice.SliceSetRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceSetByRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceNameTime,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetByNameTime = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetByNameTime',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceNameTime,
  proto.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceNameTime} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceNameTime} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceSetByNameTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByNameTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByNameTime,
      callback);
};


/**
 * @param {!proto.slice.SliceNameTime} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceSetByNameTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByNameTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByNameTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceNameRange,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetByNameRangeTime = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetByNameRangeTime',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceNameRange,
  proto.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceNameRange} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceNameRange} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceSetByNameRangeTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByNameRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByNameRangeTime,
      callback);
};


/**
 * @param {!proto.slice.SliceNameRange} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceSetByNameRangeTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetByNameRangeTime',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetByNameRangeTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSetOption,
 *   !proto.slice.SliceSetListResponse>}
 */
const methodDescriptor_SliceService_ListSliceSetOption = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceSetOption',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceSetOption,
  proto.slice.SliceSetListResponse,
  /**
   * @param {!proto.slice.SliceSetOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceSetListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSetOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceSetListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceSetListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceSetOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetOption',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetOption,
      callback);
};


/**
 * @param {!proto.slice.SliceSetOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceSetListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceSetOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceSetOption',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceSetOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSetSchema,
 *   !proto.slice.SliceCreateResponse>}
 */
const methodDescriptor_SliceService_CreateSliceSet = new grpc.web.MethodDescriptor(
  '/slice.SliceService/CreateSliceSet',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceSetSchema,
  proto.slice.SliceCreateResponse,
  /**
   * @param {!proto.slice.SliceSetSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceCreateResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSetSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.createSliceSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/CreateSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSliceSet,
      callback);
};


/**
 * @param {!proto.slice.SliceSetSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceCreateResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.createSliceSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/CreateSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSliceSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceUpdate,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_UpdateSliceSet = new grpc.web.MethodDescriptor(
  '/slice.SliceService/UpdateSliceSet',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceUpdate,
  proto.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.updateSliceSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/UpdateSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSliceSet,
      callback);
};


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.updateSliceSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/UpdateSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSliceSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_DeleteSliceSet = new grpc.web.MethodDescriptor(
  '/slice.SliceService/DeleteSliceSet',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceId,
  proto.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.deleteSliceSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/DeleteSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSliceSet,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.deleteSliceSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/DeleteSliceSet',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSliceSet);
};


module.exports = proto.slice;

