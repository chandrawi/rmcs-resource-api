/**
 * @fileoverview gRPC-Web generated client stub for slice
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: rmcs_resource_api/slice.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.slice = require('./slice_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.slice.SliceServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.slice.SliceServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceReadResponse>}
 */
const methodDescriptor_SliceService_ReadSlice = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ReadSlice',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceId,
  proto.slice.SliceReadResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceReadResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.readSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ReadSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceReadResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.readSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ReadSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_ReadSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceName,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByName = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByName',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceName,
  proto.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByName',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByName,
      callback);
};


/**
 * @param {!proto.slice.SliceName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByName',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceDevice,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByDevice = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByDevice',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceDevice,
  proto.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceDevice} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceDevice} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceByDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByDevice',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByDevice,
      callback);
};


/**
 * @param {!proto.slice.SliceDevice} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceByDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByDevice',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceModel,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByModel = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByModel',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceModel,
  proto.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceByModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByModel',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByModel,
      callback);
};


/**
 * @param {!proto.slice.SliceModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceByModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByModel',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceDeviceModel,
 *   !proto.slice.SliceListResponse>}
 */
const methodDescriptor_SliceService_ListSliceByDeviceModel = new grpc.web.MethodDescriptor(
  '/slice.SliceService/ListSliceByDeviceModel',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceDeviceModel,
  proto.slice.SliceListResponse,
  /**
   * @param {!proto.slice.SliceDeviceModel} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceListResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceDeviceModel} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.listSliceByDeviceModel =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/ListSliceByDeviceModel',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByDeviceModel,
      callback);
};


/**
 * @param {!proto.slice.SliceDeviceModel} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceListResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.listSliceByDeviceModel =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/ListSliceByDeviceModel',
      request,
      metadata || {},
      methodDescriptor_SliceService_ListSliceByDeviceModel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceSchema,
 *   !proto.slice.SliceCreateResponse>}
 */
const methodDescriptor_SliceService_CreateSlice = new grpc.web.MethodDescriptor(
  '/slice.SliceService/CreateSlice',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceSchema,
  proto.slice.SliceCreateResponse,
  /**
   * @param {!proto.slice.SliceSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceCreateResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.createSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/CreateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceCreateResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.createSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/CreateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_CreateSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceUpdate,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_UpdateSlice = new grpc.web.MethodDescriptor(
  '/slice.SliceService/UpdateSlice',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceUpdate,
  proto.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.updateSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/UpdateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.updateSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/UpdateSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_UpdateSlice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.slice.SliceId,
 *   !proto.slice.SliceChangeResponse>}
 */
const methodDescriptor_SliceService_DeleteSlice = new grpc.web.MethodDescriptor(
  '/slice.SliceService/DeleteSlice',
  grpc.web.MethodType.UNARY,
  proto.slice.SliceId,
  proto.slice.SliceChangeResponse,
  /**
   * @param {!proto.slice.SliceId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.slice.SliceChangeResponse.deserializeBinary
);


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.slice.SliceChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.slice.SliceChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.slice.SliceServiceClient.prototype.deleteSlice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/slice.SliceService/DeleteSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSlice,
      callback);
};


/**
 * @param {!proto.slice.SliceId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.slice.SliceChangeResponse>}
 *     Promise that resolves to the response
 */
proto.slice.SliceServicePromiseClient.prototype.deleteSlice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/slice.SliceService/DeleteSlice',
      request,
      metadata || {},
      methodDescriptor_SliceService_DeleteSlice);
};


module.exports = proto.slice;

