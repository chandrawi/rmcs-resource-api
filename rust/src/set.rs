// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSchema {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub template_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub members: ::prost::alloc::vec::Vec<SetMember>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMember {
    #[prost(bytes = "vec", tag = "1")]
    pub device_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub model_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub data_index: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetId {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetIds {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetName {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetOption {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub template_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetUpdate {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub template_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMemberRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub device_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub model_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub data_index: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMemberSwap {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub device_id_1: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub model_id_1: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub device_id_2: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "5")]
    pub model_id_2: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTemplateSchema {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub members: ::prost::alloc::vec::Vec<SetTemplateMember>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTemplateMember {
    #[prost(bytes = "vec", tag = "1")]
    pub type_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub model_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub data_index: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTemplateId {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTemplateIds {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTemplateName {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTemplateOption {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTemplateUpdate {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTemplateMemberRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub type_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub model_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub data_index: ::prost::alloc::vec::Vec<u8>,
    #[prost(int32, tag = "5")]
    pub template_index: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTemplateMemberSwap {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(int32, tag = "2")]
    pub template_index_1: i32,
    #[prost(int32, tag = "3")]
    pub template_index_2: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetReadResponse {
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<SetSchema>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetListResponse {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<SetSchema>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetCreateResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetChangeResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TemplateReadResponse {
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<SetTemplateSchema>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TemplateListResponse {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<SetTemplateSchema>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TemplateCreateResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TemplateChangeResponse {}
/// Generated client implementations.
pub mod set_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SetServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SetServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SetServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SetServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SetServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn read_set(
            &mut self,
            request: impl tonic::IntoRequest<super::SetId>,
        ) -> std::result::Result<
            tonic::Response<super::SetReadResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/set.SetService/ReadSet");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("set.SetService", "ReadSet"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_set_by_ids(
            &mut self,
            request: impl tonic::IntoRequest<super::SetIds>,
        ) -> std::result::Result<
            tonic::Response<super::SetListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/ListSetByIds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "ListSetByIds"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_set_by_template(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateId>,
        ) -> std::result::Result<
            tonic::Response<super::SetListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/ListSetByTemplate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "ListSetByTemplate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_set_by_name(
            &mut self,
            request: impl tonic::IntoRequest<super::SetName>,
        ) -> std::result::Result<
            tonic::Response<super::SetListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/ListSetByName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "ListSetByName"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_set_option(
            &mut self,
            request: impl tonic::IntoRequest<super::SetOption>,
        ) -> std::result::Result<
            tonic::Response<super::SetListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/ListSetOption",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "ListSetOption"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_set(
            &mut self,
            request: impl tonic::IntoRequest<super::SetSchema>,
        ) -> std::result::Result<
            tonic::Response<super::SetCreateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/set.SetService/CreateSet");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("set.SetService", "CreateSet"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_set(
            &mut self,
            request: impl tonic::IntoRequest<super::SetUpdate>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/set.SetService/UpdateSet");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("set.SetService", "UpdateSet"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_set(
            &mut self,
            request: impl tonic::IntoRequest<super::SetId>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/set.SetService/DeleteSet");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("set.SetService", "DeleteSet"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn add_set_member(
            &mut self,
            request: impl tonic::IntoRequest<super::SetMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/AddSetMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "AddSetMember"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_set_member(
            &mut self,
            request: impl tonic::IntoRequest<super::SetMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/RemoveSetMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "RemoveSetMember"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn swap_set_member(
            &mut self,
            request: impl tonic::IntoRequest<super::SetMemberSwap>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/SwapSetMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "SwapSetMember"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn read_set_template(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateId>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateReadResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/ReadSetTemplate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "ReadSetTemplate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_set_template_by_ids(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateIds>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/ListSetTemplateByIds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "ListSetTemplateByIds"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_set_template_by_name(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateName>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/ListSetTemplateByName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "ListSetTemplateByName"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_set_template_option(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateOption>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/ListSetTemplateOption",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "ListSetTemplateOption"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_set_template(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateSchema>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateCreateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/CreateSetTemplate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "CreateSetTemplate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_set_template(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateUpdate>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/UpdateSetTemplate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "UpdateSetTemplate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_set_template(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateId>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/DeleteSetTemplate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "DeleteSetTemplate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn add_set_template_member(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/AddSetTemplateMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "AddSetTemplateMember"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_set_template_member(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/RemoveSetTemplateMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "RemoveSetTemplateMember"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn swap_set_template_member(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTemplateMemberSwap>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/set.SetService/SwapSetTemplateMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("set.SetService", "SwapSetTemplateMember"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod set_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SetServiceServer.
    #[async_trait]
    pub trait SetService: std::marker::Send + std::marker::Sync + 'static {
        async fn read_set(
            &self,
            request: tonic::Request<super::SetId>,
        ) -> std::result::Result<tonic::Response<super::SetReadResponse>, tonic::Status>;
        async fn list_set_by_ids(
            &self,
            request: tonic::Request<super::SetIds>,
        ) -> std::result::Result<tonic::Response<super::SetListResponse>, tonic::Status>;
        async fn list_set_by_template(
            &self,
            request: tonic::Request<super::SetTemplateId>,
        ) -> std::result::Result<tonic::Response<super::SetListResponse>, tonic::Status>;
        async fn list_set_by_name(
            &self,
            request: tonic::Request<super::SetName>,
        ) -> std::result::Result<tonic::Response<super::SetListResponse>, tonic::Status>;
        async fn list_set_option(
            &self,
            request: tonic::Request<super::SetOption>,
        ) -> std::result::Result<tonic::Response<super::SetListResponse>, tonic::Status>;
        async fn create_set(
            &self,
            request: tonic::Request<super::SetSchema>,
        ) -> std::result::Result<
            tonic::Response<super::SetCreateResponse>,
            tonic::Status,
        >;
        async fn update_set(
            &self,
            request: tonic::Request<super::SetUpdate>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        >;
        async fn delete_set(
            &self,
            request: tonic::Request<super::SetId>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        >;
        async fn add_set_member(
            &self,
            request: tonic::Request<super::SetMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        >;
        async fn remove_set_member(
            &self,
            request: tonic::Request<super::SetMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        >;
        async fn swap_set_member(
            &self,
            request: tonic::Request<super::SetMemberSwap>,
        ) -> std::result::Result<
            tonic::Response<super::SetChangeResponse>,
            tonic::Status,
        >;
        async fn read_set_template(
            &self,
            request: tonic::Request<super::SetTemplateId>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateReadResponse>,
            tonic::Status,
        >;
        async fn list_set_template_by_ids(
            &self,
            request: tonic::Request<super::SetTemplateIds>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateListResponse>,
            tonic::Status,
        >;
        async fn list_set_template_by_name(
            &self,
            request: tonic::Request<super::SetTemplateName>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateListResponse>,
            tonic::Status,
        >;
        async fn list_set_template_option(
            &self,
            request: tonic::Request<super::SetTemplateOption>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateListResponse>,
            tonic::Status,
        >;
        async fn create_set_template(
            &self,
            request: tonic::Request<super::SetTemplateSchema>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateCreateResponse>,
            tonic::Status,
        >;
        async fn update_set_template(
            &self,
            request: tonic::Request<super::SetTemplateUpdate>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        >;
        async fn delete_set_template(
            &self,
            request: tonic::Request<super::SetTemplateId>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        >;
        async fn add_set_template_member(
            &self,
            request: tonic::Request<super::SetTemplateMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        >;
        async fn remove_set_template_member(
            &self,
            request: tonic::Request<super::SetTemplateMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        >;
        async fn swap_set_template_member(
            &self,
            request: tonic::Request<super::SetTemplateMemberSwap>,
        ) -> std::result::Result<
            tonic::Response<super::TemplateChangeResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct SetServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SetServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SetServiceServer<T>
    where
        T: SetService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/set.SetService/ReadSet" => {
                    #[allow(non_camel_case_types)]
                    struct ReadSetSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetId>
                    for ReadSetSvc<T> {
                        type Response = super::SetReadResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::read_set(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadSetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/ListSetByIds" => {
                    #[allow(non_camel_case_types)]
                    struct ListSetByIdsSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetIds>
                    for ListSetByIdsSvc<T> {
                        type Response = super::SetListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetIds>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::list_set_by_ids(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSetByIdsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/ListSetByTemplate" => {
                    #[allow(non_camel_case_types)]
                    struct ListSetByTemplateSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetTemplateId>
                    for ListSetByTemplateSvc<T> {
                        type Response = super::SetListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::list_set_by_template(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSetByTemplateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/ListSetByName" => {
                    #[allow(non_camel_case_types)]
                    struct ListSetByNameSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetName>
                    for ListSetByNameSvc<T> {
                        type Response = super::SetListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetName>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::list_set_by_name(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSetByNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/ListSetOption" => {
                    #[allow(non_camel_case_types)]
                    struct ListSetOptionSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetOption>
                    for ListSetOptionSvc<T> {
                        type Response = super::SetListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetOption>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::list_set_option(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSetOptionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/CreateSet" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSetSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetSchema>
                    for CreateSetSvc<T> {
                        type Response = super::SetCreateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetSchema>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::create_set(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/UpdateSet" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateSetSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetUpdate>
                    for UpdateSetSvc<T> {
                        type Response = super::SetChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetUpdate>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::update_set(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateSetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/DeleteSet" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteSetSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetId>
                    for DeleteSetSvc<T> {
                        type Response = super::SetChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::delete_set(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteSetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/AddSetMember" => {
                    #[allow(non_camel_case_types)]
                    struct AddSetMemberSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetMemberRequest>
                    for AddSetMemberSvc<T> {
                        type Response = super::SetChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetMemberRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::add_set_member(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddSetMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/RemoveSetMember" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveSetMemberSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetMemberRequest>
                    for RemoveSetMemberSvc<T> {
                        type Response = super::SetChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetMemberRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::remove_set_member(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveSetMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/SwapSetMember" => {
                    #[allow(non_camel_case_types)]
                    struct SwapSetMemberSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetMemberSwap>
                    for SwapSetMemberSvc<T> {
                        type Response = super::SetChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetMemberSwap>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::swap_set_member(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SwapSetMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/ReadSetTemplate" => {
                    #[allow(non_camel_case_types)]
                    struct ReadSetTemplateSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetTemplateId>
                    for ReadSetTemplateSvc<T> {
                        type Response = super::TemplateReadResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::read_set_template(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadSetTemplateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/ListSetTemplateByIds" => {
                    #[allow(non_camel_case_types)]
                    struct ListSetTemplateByIdsSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetTemplateIds>
                    for ListSetTemplateByIdsSvc<T> {
                        type Response = super::TemplateListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateIds>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::list_set_template_by_ids(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSetTemplateByIdsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/ListSetTemplateByName" => {
                    #[allow(non_camel_case_types)]
                    struct ListSetTemplateByNameSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetTemplateName>
                    for ListSetTemplateByNameSvc<T> {
                        type Response = super::TemplateListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateName>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::list_set_template_by_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSetTemplateByNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/ListSetTemplateOption" => {
                    #[allow(non_camel_case_types)]
                    struct ListSetTemplateOptionSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetTemplateOption>
                    for ListSetTemplateOptionSvc<T> {
                        type Response = super::TemplateListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateOption>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::list_set_template_option(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSetTemplateOptionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/CreateSetTemplate" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSetTemplateSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetTemplateSchema>
                    for CreateSetTemplateSvc<T> {
                        type Response = super::TemplateCreateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateSchema>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::create_set_template(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSetTemplateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/UpdateSetTemplate" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateSetTemplateSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetTemplateUpdate>
                    for UpdateSetTemplateSvc<T> {
                        type Response = super::TemplateChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateUpdate>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::update_set_template(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateSetTemplateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/DeleteSetTemplate" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteSetTemplateSvc<T: SetService>(pub Arc<T>);
                    impl<T: SetService> tonic::server::UnaryService<super::SetTemplateId>
                    for DeleteSetTemplateSvc<T> {
                        type Response = super::TemplateChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::delete_set_template(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteSetTemplateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/AddSetTemplateMember" => {
                    #[allow(non_camel_case_types)]
                    struct AddSetTemplateMemberSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetTemplateMemberRequest>
                    for AddSetTemplateMemberSvc<T> {
                        type Response = super::TemplateChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateMemberRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::add_set_template_member(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddSetTemplateMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/RemoveSetTemplateMember" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveSetTemplateMemberSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetTemplateMemberRequest>
                    for RemoveSetTemplateMemberSvc<T> {
                        type Response = super::TemplateChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateMemberRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::remove_set_template_member(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveSetTemplateMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/set.SetService/SwapSetTemplateMember" => {
                    #[allow(non_camel_case_types)]
                    struct SwapSetTemplateMemberSvc<T: SetService>(pub Arc<T>);
                    impl<
                        T: SetService,
                    > tonic::server::UnaryService<super::SetTemplateMemberSwap>
                    for SwapSetTemplateMemberSvc<T> {
                        type Response = super::TemplateChangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetTemplateMemberSwap>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SetService>::swap_set_template_member(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SwapSetTemplateMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for SetServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "set.SetService";
    impl<T> tonic::server::NamedService for SetServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
